{
  "version": 3,
  "sources": ["../../../../../../../../node_modules/xml-utils/get-attribute.js", "../../../../../../../../node_modules/xml-utils/index-of-match.js", "../../../../../../../../node_modules/xml-utils/index-of-match-end.js", "../../../../../../../../node_modules/xml-utils/count-substring.js", "../../../../../../../../node_modules/xml-utils/find-tag-by-name.js", "../../../../../../../../node_modules/xml-utils/find-tags-by-name.js", "browser-external:http", "browser-external:https", "browser-external:url", "browser-external:fs", "../../../../../../../../node_modules/ol/source/BingMaps.js", "../../../../../../../../node_modules/ol/source/CartoDB.js", "../../../../../../../../node_modules/ol/source/Cluster.js", "../../../../../../../../node_modules/@petamoriken/float16/src/_util/messages.mjs", "../../../../../../../../node_modules/@petamoriken/float16/src/_util/primordials.mjs", "../../../../../../../../node_modules/@petamoriken/float16/src/_util/arrayIterator.mjs", "../../../../../../../../node_modules/@petamoriken/float16/src/_util/is.mjs", "../../../../../../../../node_modules/@petamoriken/float16/src/_util/brand.mjs", "../../../../../../../../node_modules/@petamoriken/float16/src/_util/converter.mjs", "../../../../../../../../node_modules/@petamoriken/float16/src/_util/spec.mjs", "../../../../../../../../node_modules/@petamoriken/float16/src/Float16Array.mjs", "../../../../../../../../node_modules/@petamoriken/float16/src/DataView.mjs", "../../../../../../../../node_modules/geotiff/dist-module/geotiffimage.js", "../../../../../../../../node_modules/geotiff/dist-module/rgb.js", "../../../../../../../../node_modules/geotiff/dist-module/compression/index.js", "../../../../../../../../node_modules/geotiff/dist-module/resample.js", "../../../../../../../../node_modules/geotiff/dist-module/dataview64.js", "../../../../../../../../node_modules/geotiff/dist-module/dataslice.js", "../../../../../../../../node_modules/geotiff/dist-module/pool.js", "../../../../../../../../node_modules/geotiff/dist-module/source/httputils.js", "../../../../../../../../node_modules/geotiff/dist-module/source/basesource.js", "../../../../../../../../node_modules/geotiff/node_modules/quick-lru/index.js", "../../../../../../../../node_modules/geotiff/dist-module/utils.js", "../../../../../../../../node_modules/geotiff/dist-module/source/blockedsource.js", "../../../../../../../../node_modules/geotiff/dist-module/source/client/base.js", "../../../../../../../../node_modules/geotiff/dist-module/source/client/fetch.js", "../../../../../../../../node_modules/geotiff/dist-module/source/client/xhr.js", "../../../../../../../../node_modules/geotiff/dist-module/source/client/http.js", "../../../../../../../../node_modules/geotiff/dist-module/source/remote.js", "../../../../../../../../node_modules/geotiff/dist-module/source/filereader.js", "../../../../../../../../node_modules/geotiff/dist-module/source/file.js", "../../../../../../../../node_modules/geotiff/dist-module/geotiffwriter.js", "../../../../../../../../node_modules/geotiff/dist-module/logging.js", "../../../../../../../../node_modules/geotiff/dist-module/geotiff.js", "../../../../../../../../node_modules/ol/source/GeoTIFF.js", "../../../../../../../../node_modules/ol/source/Google.js", "../../../../../../../../node_modules/ol/source/Zoomify.js", "../../../../../../../../node_modules/ol/source/IIIF.js", "../../../../../../../../node_modules/ol/source/arcgisRest.js", "../../../../../../../../node_modules/ol/source/ImageArcGISRest.js", "../../../../../../../../node_modules/ol/source/ImageCanvas.js", "../../../../../../../../node_modules/ol/source/mapguide.js", "../../../../../../../../node_modules/ol/source/ImageMapGuide.js", "../../../../../../../../node_modules/ol/source/static.js", "../../../../../../../../node_modules/ol/source/ImageStatic.js", "../../../../../../../../node_modules/ol/source/ImageTile.js", "../../../../../../../../node_modules/ol/source/ogcTileUtil.js", "../../../../../../../../node_modules/ol/source/OGCMapTile.js", "../../../../../../../../node_modules/ol/source/OGCVectorTile.js", "../../../../../../../../node_modules/ol/source/OSM.js", "../../../../../../../../node_modules/ol/source/StadiaMaps.js", "../../../../../../../../node_modules/ol/source/TileArcGISRest.js", "../../../../../../../../node_modules/ol/source/TileDebug.js", "../../../../../../../../node_modules/ol/source/UTFGrid.js", "../../../../../../../../node_modules/ol/source.js"],
  "sourcesContent": ["function getAttribute(tag, attributeName, options) {\n  const debug = options && options.debug || false;\n  if (debug) console.log(\"[xml-utils] getting \" + attributeName + \" in \" + tag);\n  const xml = typeof tag === \"object\" ? tag.outer : tag;\n\n  // only search for attributes in the opening tag\n  const opening = xml.slice(0, xml.indexOf(\">\") + 1);\n  const quotechars = ['\"', \"'\"];\n  for (let i = 0; i < quotechars.length; i++) {\n    const char = quotechars[i];\n    const pattern = attributeName + \"\\\\=\" + char + \"([^\" + char + \"]*)\" + char;\n    if (debug) console.log(\"[xml-utils] pattern:\", pattern);\n    const re = new RegExp(pattern);\n    const match = re.exec(opening);\n    if (debug) console.log(\"[xml-utils] match:\", match);\n    if (match) return match[1];\n  }\n}\nmodule.exports = getAttribute;\nmodule.exports.default = getAttribute;", "function indexOfMatch(xml, pattern, startIndex) {\n  const re = new RegExp(pattern);\n  const match = re.exec(xml.slice(startIndex));\n  if (match) return startIndex + match.index;else return -1;\n}\nmodule.exports = indexOfMatch;\nmodule.exports.default = indexOfMatch;", "function indexOfMatchEnd(xml, pattern, startIndex) {\n  const re = new RegExp(pattern);\n  const match = re.exec(xml.slice(startIndex));\n  if (match) return startIndex + match.index + match[0].length - 1;else return -1;\n}\nmodule.exports = indexOfMatchEnd;\nmodule.exports.default = indexOfMatchEnd;", "function countSubstring(string, substring) {\n  const pattern = new RegExp(substring, \"g\");\n  const match = string.match(pattern);\n  return match ? match.length : 0;\n}\nmodule.exports = countSubstring;\nmodule.exports.default = countSubstring;", "const indexOfMatch = require(\"./index-of-match.js\");\nconst indexOfMatchEnd = require(\"./index-of-match-end.js\");\nconst countSubstring = require(\"./count-substring.js\");\nfunction findTagByName(xml, tagName, options) {\n  const debug = options && options.debug || false;\n  const nested = !(options && typeof options.nested === false);\n  const startIndex = options && options.startIndex || 0;\n  if (debug) console.log(\"[xml-utils] starting findTagByName with\", tagName, \" and \", options);\n  const start = indexOfMatch(xml, `\\<${tagName}[ \\n\\>\\/]`, startIndex);\n  if (debug) console.log(\"[xml-utils] start:\", start);\n  if (start === -1) return undefined;\n  const afterStart = xml.slice(start + tagName.length);\n  let relativeEnd = indexOfMatchEnd(afterStart, \"^[^<]*[ /]>\", 0);\n  const selfClosing = relativeEnd !== -1 && afterStart[relativeEnd - 1] === \"/\";\n  if (debug) console.log(\"[xml-utils] selfClosing:\", selfClosing);\n  if (selfClosing === false) {\n    // check if tag has subtags with the same name\n    if (nested) {\n      let startIndex = 0;\n      let openings = 1;\n      let closings = 0;\n      while ((relativeEnd = indexOfMatchEnd(afterStart, \"[ /]\" + tagName + \">\", startIndex)) !== -1) {\n        const clip = afterStart.substring(startIndex, relativeEnd + 1);\n        openings += countSubstring(clip, \"<\" + tagName + \"[ \\n\\t>]\");\n        closings += countSubstring(clip, \"</\" + tagName + \">\");\n        // we can't have more openings than closings\n        if (closings >= openings) break;\n        startIndex = relativeEnd;\n      }\n    } else {\n      relativeEnd = indexOfMatchEnd(afterStart, \"[ /]\" + tagName + \">\", 0);\n    }\n  }\n  const end = start + tagName.length + relativeEnd + 1;\n  if (debug) console.log(\"[xml-utils] end:\", end);\n  if (end === -1) return undefined;\n  const outer = xml.slice(start, end);\n  // tag is like <gml:identifier codeSpace=\"OGP\">urn:ogc:def:crs:EPSG::32617</gml:identifier>\n\n  let inner;\n  if (selfClosing) {\n    inner = null;\n  } else {\n    inner = outer.slice(outer.indexOf(\">\") + 1, outer.lastIndexOf(\"<\"));\n  }\n  return {\n    inner,\n    outer,\n    start,\n    end\n  };\n}\nmodule.exports = findTagByName;\nmodule.exports.default = findTagByName;", "const findTagByName = require(\"./find-tag-by-name.js\");\nfunction findTagsByName(xml, tagName, options) {\n  const tags = [];\n  const debug = options && options.debug || false;\n  const nested = options && typeof options.nested === \"boolean\" ? options.nested : true;\n  let startIndex = options && options.startIndex || 0;\n  let tag;\n  while (tag = findTagByName(xml, tagName, {\n    debug,\n    startIndex\n  })) {\n    if (nested) {\n      startIndex = tag.start + 1 + tagName.length;\n    } else {\n      startIndex = tag.end;\n    }\n    tags.push(tag);\n  }\n  if (debug) console.log(\"findTagsByName found\", tags.length, \"tags\");\n  return tags;\n}\nmodule.exports = findTagsByName;\nmodule.exports.default = findTagsByName;", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"http\" has been externalized for browser compatibility. Cannot access \"http.${key}\" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"https\" has been externalized for browser compatibility. Cannot access \"https.${key}\" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"url\" has been externalized for browser compatibility. Cannot access \"url.${key}\" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"fs\" has been externalized for browser compatibility. Cannot access \"fs.${key}\" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "/**\n * @module ol/source/BingMaps\n */\n\nimport TileImage from './TileImage.js';\nimport { applyTransform, intersects } from '../extent.js';\nimport { createFromTileUrlFunctions } from '../tileurlfunction.js';\nimport { createOrUpdate } from '../tilecoord.js';\nimport { createXYZ, extentFromProjection } from '../tilegrid.js';\nimport { get as getProjection, getTransformFromProjections } from '../proj.js';\n\n/**\n * @param {import('../tilecoord.js').TileCoord} tileCoord Tile coord.\n * @return {string} Quad key.\n */\nexport function quadKey(tileCoord) {\n  const z = tileCoord[0];\n  const digits = new Array(z);\n  let mask = 1 << z - 1;\n  let i, charCode;\n  for (i = 0; i < z; ++i) {\n    // 48 is charCode for 0 - '0'.charCodeAt(0)\n    charCode = 48;\n    if (tileCoord[1] & mask) {\n      charCode += 1;\n    }\n    if (tileCoord[2] & mask) {\n      charCode += 2;\n    }\n    digits[i] = String.fromCharCode(charCode);\n    mask >>= 1;\n  }\n  return digits.join('');\n}\n\n/**\n * The attribution containing a link to the Microsoft® Bing™ Maps Platform APIs’\n * Terms Of Use.\n * @const\n * @type {string}\n */\nconst TOS_ATTRIBUTION = '<a class=\"ol-attribution-bing-tos\" ' + 'href=\"https://www.microsoft.com/maps/product/terms.html\" target=\"_blank\">' + 'Terms of Use</a>';\n\n/**\n * @typedef {Object} Options\n * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.\n * @property {boolean} [hidpi=false] If `true` hidpi tiles will be requested.\n * @property {string} [culture='en-us'] Culture code.\n * @property {string} key Bing Maps API key. Get yours at https://www.bingmapsportal.com/.\n * @property {string} imagerySet Type of imagery.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {number} [maxZoom=21] Max zoom. Default is what's advertized by the BingMaps service.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n * @property {boolean} [placeholderTiles] Whether to show BingMaps placeholder tiles when zoomed past the maximum level provided in an area. When `false`, requests beyond\n * the maximum zoom level will return no tile. When `true`, the placeholder tile will be returned. When not set, the default behaviour of the imagery set takes place,\n * which is unique for each imagery set in BingMaps.\n */\n\n/**\n * @typedef {Object} BingMapsImageryMetadataResponse\n * @property {number} statusCode The response status code\n * @property {string} statusDescription The response status description\n * @property {string} authenticationResultCode The authentication result code\n * @property {Array<ResourceSet>} resourceSets The array of resource sets\n */\n\n/**\n * @typedef {Object} ResourceSet\n * @property {Array<Resource>} resources Resources.\n */\n\n/**\n * @typedef {Object} Resource\n * @property {number} imageHeight The image height\n * @property {number} imageWidth The image width\n * @property {number} zoomMin The minimum zoom level\n * @property {number} zoomMax The maximum zoom level\n * @property {string} imageUrl The image URL\n * @property {Array<string>} imageUrlSubdomains The image URL subdomains for rotation\n * @property {Array<ImageryProvider>} [imageryProviders] The array of ImageryProviders\n */\n\n/**\n * @typedef {Object} ImageryProvider\n * @property {Array<CoverageArea>} coverageAreas The coverage areas\n * @property {string} [attribution] The attribution\n */\n\n/**\n * @typedef {Object} CoverageArea\n * @property {number} zoomMin The minimum zoom\n * @property {number} zoomMax The maximum zoom\n * @property {Array<number>} bbox The coverage bounding box\n */\n\n/**\n * @classdesc\n * Layer source for Bing Maps tile data.\n * @api\n */\nclass BingMaps extends TileImage {\n  /**\n   * @param {Options} options Bing Maps options.\n   */\n  constructor(options) {\n    const hidpi = options.hidpi !== undefined ? options.hidpi : false;\n    super({\n      cacheSize: options.cacheSize,\n      crossOrigin: 'anonymous',\n      interpolate: options.interpolate,\n      projection: getProjection('EPSG:3857'),\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      state: 'loading',\n      tileLoadFunction: options.tileLoadFunction,\n      tilePixelRatio: hidpi ? 2 : 1,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n      transition: options.transition,\n      zDirection: options.zDirection\n    });\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.hidpi_ = hidpi;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.culture_ = options.culture !== undefined ? options.culture : 'en-us';\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxZoom_ = options.maxZoom !== undefined ? options.maxZoom : -1;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.apiKey_ = options.key;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.imagerySet_ = options.imagerySet;\n\n    /**\n     * @private\n     * @type {boolean|undefined}\n     */\n    this.placeholderTiles_ = options.placeholderTiles;\n    const url = 'https://dev.virtualearth.net/REST/v1/Imagery/Metadata/' + this.imagerySet_ + '?uriScheme=https&include=ImageryProviders&key=' + this.apiKey_ + '&c=' + this.culture_;\n    fetch(url).then(response => response.json()).then(json => this.handleImageryMetadataResponse(json));\n  }\n\n  /**\n   * Get the api key used for this source.\n   *\n   * @return {string} The api key.\n   * @api\n   */\n  getApiKey() {\n    return this.apiKey_;\n  }\n\n  /**\n   * Get the imagery set associated with this source.\n   *\n   * @return {string} The imagery set.\n   * @api\n   */\n  getImagerySet() {\n    return this.imagerySet_;\n  }\n\n  /**\n   * @param {BingMapsImageryMetadataResponse} response Response.\n   */\n  handleImageryMetadataResponse(response) {\n    if (response.statusCode != 200 || response.statusDescription != 'OK' || response.authenticationResultCode != 'ValidCredentials' || response.resourceSets.length != 1 || response.resourceSets[0].resources.length != 1) {\n      this.setState('error');\n      return;\n    }\n    const resource = response.resourceSets[0].resources[0];\n    const maxZoom = this.maxZoom_ == -1 ? resource.zoomMax : this.maxZoom_;\n    const sourceProjection = this.getProjection();\n    const extent = extentFromProjection(sourceProjection);\n    const scale = this.hidpi_ ? 2 : 1;\n    const tileSize = resource.imageWidth == resource.imageHeight ? resource.imageWidth / scale : [resource.imageWidth / scale, resource.imageHeight / scale];\n    const tileGrid = createXYZ({\n      extent: extent,\n      minZoom: resource.zoomMin,\n      maxZoom: maxZoom,\n      tileSize: tileSize\n    });\n    this.tileGrid = tileGrid;\n    const culture = this.culture_;\n    const hidpi = this.hidpi_;\n    const placeholderTiles = this.placeholderTiles_;\n    this.tileUrlFunction = createFromTileUrlFunctions(resource.imageUrlSubdomains.map(function (subdomain) {\n      /** @type {import('../tilecoord.js').TileCoord} */\n      const quadKeyTileCoord = [0, 0, 0];\n      const imageUrl = resource.imageUrl.replace('{subdomain}', subdomain).replace('{culture}', culture);\n      return (\n        /**\n         * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n         * @param {number} pixelRatio Pixel ratio.\n         * @param {import(\"../proj/Projection.js\").default} projection Projection.\n         * @return {string|undefined} Tile URL.\n         */\n        function (tileCoord, pixelRatio, projection) {\n          if (!tileCoord) {\n            return undefined;\n          }\n          createOrUpdate(tileCoord[0], tileCoord[1], tileCoord[2], quadKeyTileCoord);\n          const url = new URL(imageUrl.replace('{quadkey}', quadKey(quadKeyTileCoord)));\n          const params = url.searchParams;\n          if (hidpi) {\n            params.set('dpi', 'd1');\n            params.set('device', 'mobile');\n          }\n          if (placeholderTiles === true) {\n            params.delete('n');\n          } else if (placeholderTiles === false) {\n            params.set('n', 'z');\n          }\n          return url.toString();\n        }\n      );\n    }));\n    if (resource.imageryProviders) {\n      const transform = getTransformFromProjections(getProjection('EPSG:4326'), this.getProjection());\n      this.setAttributions(frameState => {\n        const attributions = [];\n        const viewState = frameState.viewState;\n        const tileGrid = this.getTileGrid();\n        const z = tileGrid.getZForResolution(viewState.resolution, this.zDirection);\n        const tileCoord = tileGrid.getTileCoordForCoordAndZ(viewState.center, z);\n        const zoom = tileCoord[0];\n        resource.imageryProviders.map(function (imageryProvider) {\n          let intersecting = false;\n          const coverageAreas = imageryProvider.coverageAreas;\n          for (let i = 0, ii = coverageAreas.length; i < ii; ++i) {\n            const coverageArea = coverageAreas[i];\n            if (zoom >= coverageArea.zoomMin && zoom <= coverageArea.zoomMax) {\n              const bbox = coverageArea.bbox;\n              const epsg4326Extent = [bbox[1], bbox[0], bbox[3], bbox[2]];\n              const extent = applyTransform(epsg4326Extent, transform);\n              if (intersects(extent, frameState.extent)) {\n                intersecting = true;\n                break;\n              }\n            }\n          }\n          if (intersecting) {\n            attributions.push(imageryProvider.attribution);\n          }\n        });\n        attributions.push(TOS_ATTRIBUTION);\n        return attributions;\n      });\n    }\n    this.setState('ready');\n  }\n}\nexport default BingMaps;", "/**\n * @module ol/source/CartoDB\n */\n\nimport XYZ from './XYZ.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {import(\"../proj.js\").ProjectionLike} [projection='EPSG:3857'] Projection.\n * @property {number} [maxZoom=18] Max zoom.\n * @property {number} [minZoom] Minimum zoom.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {Object} [config] If using anonymous maps, the CartoDB config to use. See\n * https://carto.com/developers/maps-api/guides/anonymous-maps/\n * for more detail.\n * If using named maps, a key-value lookup with the template parameters.\n * See https://carto.com/developers/maps-api/guides/named-maps/\n * for more detail.\n * @property {string} [map] If using named maps, this will be the name of the template to load.\n * See https://carto.com/developers/maps-api/guides/named-maps/\n * for more detail.\n * @property {string} [account] Username as used to access public Carto dashboard at https://{username}.carto.com/.\n * @property {number} [transition=250] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @typedef {Object} CartoDBLayerInfo\n * @property {string} layergroupid The layer group ID\n * @property {{https: string}} cdn_url The CDN URL\n */\n\n/**\n * @classdesc\n * Layer source for the CartoDB Maps API.\n * @api\n */\nclass CartoDB extends XYZ {\n  /**\n   * @param {Options} options CartoDB options.\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      maxZoom: options.maxZoom !== undefined ? options.maxZoom : 18,\n      minZoom: options.minZoom,\n      projection: options.projection,\n      transition: options.transition,\n      wrapX: options.wrapX,\n      zDirection: options.zDirection\n    });\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.account_ = options.account;\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.mapId_ = options.map || '';\n\n    /**\n     * @type {!Object}\n     * @private\n     */\n    this.config_ = options.config || {};\n\n    /**\n     * @type {!Object<string, CartoDBLayerInfo>}\n     * @private\n     */\n    this.templateCache_ = {};\n    this.initializeMap_();\n  }\n\n  /**\n   * Returns the current config.\n   * @return {!Object} The current configuration.\n   * @api\n   */\n  getConfig() {\n    return this.config_;\n  }\n\n  /**\n   * Updates the carto db config.\n   * @param {Object} config a key-value lookup. Values will replace current values\n   *     in the config.\n   * @api\n   */\n  updateConfig(config) {\n    Object.assign(this.config_, config);\n    this.initializeMap_();\n  }\n\n  /**\n   * Sets the CartoDB config\n   * @param {Object} config In the case of anonymous maps, a CartoDB configuration\n   *     object.\n   * If using named maps, a key-value lookup with the template parameters.\n   * @api\n   */\n  setConfig(config) {\n    this.config_ = config || {};\n    this.initializeMap_();\n  }\n\n  /**\n   * Issue a request to initialize the CartoDB map.\n   * @private\n   */\n  initializeMap_() {\n    const paramHash = JSON.stringify(this.config_);\n    if (this.templateCache_[paramHash]) {\n      this.applyTemplate_(this.templateCache_[paramHash]);\n      return;\n    }\n    let mapUrl = 'https://' + this.account_ + '.carto.com/api/v1/map';\n    if (this.mapId_) {\n      mapUrl += '/named/' + this.mapId_;\n    }\n    const client = new XMLHttpRequest();\n    client.addEventListener('load', this.handleInitResponse_.bind(this, paramHash));\n    client.addEventListener('error', this.handleInitError_.bind(this));\n    client.open('POST', mapUrl);\n    client.setRequestHeader('Content-type', 'application/json');\n    client.send(JSON.stringify(this.config_));\n  }\n\n  /**\n   * Handle map initialization response.\n   * @param {string} paramHash a hash representing the parameter set that was used\n   *     for the request\n   * @param {Event} event Event.\n   * @private\n   */\n  handleInitResponse_(paramHash, event) {\n    const client = /** @type {XMLHttpRequest} */event.target;\n    // status will be 0 for file:// urls\n    if (!client.status || client.status >= 200 && client.status < 300) {\n      let response;\n      try {\n        response = /** @type {CartoDBLayerInfo} */\n        JSON.parse(client.responseText);\n      } catch (err) {\n        this.setState('error');\n        return;\n      }\n      this.applyTemplate_(response);\n      this.templateCache_[paramHash] = response;\n      this.setState('ready');\n    } else {\n      this.setState('error');\n    }\n  }\n\n  /**\n   * @private\n   * @param {Event} event Event.\n   */\n  handleInitError_(event) {\n    this.setState('error');\n  }\n\n  /**\n   * Apply the new tile urls returned by carto db\n   * @param {CartoDBLayerInfo} data Result of carto db call.\n   * @private\n   */\n  applyTemplate_(data) {\n    const tilesUrl = 'https://' + data.cdn_url.https + '/' + this.account_ + '/api/v1/map/' + data.layergroupid + '/{z}/{x}/{y}.png';\n    this.setUrl(tilesUrl);\n  }\n}\nexport default CartoDB;", "/**\n * @module ol/source/Cluster\n */\n\nimport EventType from '../events/EventType.js';\nimport Feature from '../Feature.js';\nimport Point from '../geom/Point.js';\nimport VectorSource from './Vector.js';\nimport { add as addCoordinate, scale as scaleCoordinate } from '../coordinate.js';\nimport { assert } from '../asserts.js';\nimport { buffer, createEmpty, createOrUpdateFromCoordinate, getCenter } from '../extent.js';\nimport { getUid } from '../util.js';\n\n/**\n * @template {import(\"../Feature.js\").FeatureLike} FeatureType\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {number} [distance=20] Distance in pixels within which features will\n * be clustered together.\n * @property {number} [minDistance=0] Minimum distance in pixels between clusters.\n * Will be capped at the configured distance.\n * By default no minimum distance is guaranteed. This config can be used to avoid\n * overlapping icons. As a tradoff, the cluster feature's position will no longer be\n * the center of all its features.\n * @property {function(FeatureType):(Point|null)} [geometryFunction]\n * Function that takes a {@link module:ol/Feature~Feature} as argument and returns a\n * {@link module:ol/geom/Point~Point} as cluster calculation point for the feature. When a\n * feature should not be considered for clustering, the function should return\n * `null`. The default, which works when the underlying source contains point\n * features only, is\n * ```js\n * function(feature) {\n *   return feature.getGeometry();\n * }\n * ```\n * See {@link module:ol/geom/Polygon~Polygon#getInteriorPoint} for a way to get a cluster\n * calculation point for polygons.\n * @property {function(Point, Array<FeatureType>):Feature} [createCluster]\n * Function that takes the cluster's center {@link module:ol/geom/Point~Point} and an array\n * of {@link module:ol/Feature~Feature} included in this cluster. Must return a\n * {@link module:ol/Feature~Feature} that will be used to render. Default implementation is:\n * ```js\n * function(point, features) {\n *   return new Feature({\n *     geometry: point,\n *     features: features\n *   });\n * }\n * ```\n * @property {VectorSource<FeatureType>} [source=null] Source.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n */\n\n/**\n * @classdesc\n * Layer source to cluster vector data. Works out of the box with point\n * geometries. For other geometry types, or if not all geometries should be\n * considered for clustering, a custom `geometryFunction` can be defined.\n *\n * If the instance is disposed without also disposing the underlying\n * source `setSource(null)` has to be called to remove the listener reference\n * from the wrapped source.\n * @api\n * @template {import('../Feature.js').FeatureLike} FeatureType\n * @extends {VectorSource<Feature<import(\"../geom/Geometry.js\").default>>}\n */\nclass Cluster extends VectorSource {\n  /**\n   * @param {Options<FeatureType>} [options] Cluster options.\n   */\n  constructor(options) {\n    options = options || {};\n    super({\n      attributions: options.attributions,\n      wrapX: options.wrapX\n    });\n\n    /**\n     * @type {number|undefined}\n     * @protected\n     */\n    this.resolution = undefined;\n\n    /**\n     * @type {number}\n     * @protected\n     */\n    this.distance = options.distance !== undefined ? options.distance : 20;\n\n    /**\n     * @type {number}\n     * @protected\n     */\n    this.minDistance = options.minDistance || 0;\n\n    /**\n     * @type {number}\n     * @protected\n     */\n    this.interpolationRatio = 0;\n\n    /**\n     * @type {Array<Feature>}\n     * @protected\n     */\n    this.features = [];\n\n    /**\n     * @param {FeatureType} feature Feature.\n     * @return {Point} Cluster calculation point.\n     * @protected\n     */\n    this.geometryFunction = options.geometryFunction || function (feature) {\n      const geometry = /** @type {Point} */feature.getGeometry();\n      assert(!geometry || geometry.getType() === 'Point', 'The default `geometryFunction` can only handle `Point` or null geometries');\n      return geometry;\n    };\n\n    /**\n     * @type {function(Point, Array<FeatureType>):Feature}\n     * @private\n     */\n    this.createCustomCluster_ = options.createCluster;\n\n    /**\n     * @type {VectorSource<FeatureType>|null}\n     * @protected\n     */\n    this.source = null;\n\n    /**\n     * @private\n     */\n    this.boundRefresh_ = this.refresh.bind(this);\n    this.updateDistance(this.distance, this.minDistance);\n    this.setSource(options.source || null);\n  }\n\n  /**\n   * Remove all features from the source.\n   * @param {boolean} [fast] Skip dispatching of {@link module:ol/source/VectorEventType~VectorEventType#removefeature} events.\n   * @api\n   * @override\n   */\n  clear(fast) {\n    this.features.length = 0;\n    super.clear(fast);\n  }\n\n  /**\n   * Get the distance in pixels between clusters.\n   * @return {number} Distance.\n   * @api\n   */\n  getDistance() {\n    return this.distance;\n  }\n\n  /**\n   * Get a reference to the wrapped source.\n   * @return {VectorSource<FeatureType>|null} Source.\n   * @api\n   */\n  getSource() {\n    return this.source;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @override\n   */\n  loadFeatures(extent, resolution, projection) {\n    this.source?.loadFeatures(extent, resolution, projection);\n    if (resolution !== this.resolution) {\n      this.resolution = resolution;\n      this.refresh();\n    }\n  }\n\n  /**\n   * Set the distance within which features will be clusterd together.\n   * @param {number} distance The distance in pixels.\n   * @api\n   */\n  setDistance(distance) {\n    this.updateDistance(distance, this.minDistance);\n  }\n\n  /**\n   * Set the minimum distance between clusters. Will be capped at the\n   * configured distance.\n   * @param {number} minDistance The minimum distance in pixels.\n   * @api\n   */\n  setMinDistance(minDistance) {\n    this.updateDistance(this.distance, minDistance);\n  }\n\n  /**\n   * The configured minimum distance between clusters.\n   * @return {number} The minimum distance in pixels.\n   * @api\n   */\n  getMinDistance() {\n    return this.minDistance;\n  }\n\n  /**\n   * Replace the wrapped source.\n   * @param {VectorSource<FeatureType>|null} source The new source for this instance.\n   * @api\n   */\n  setSource(source) {\n    if (this.source) {\n      this.source.removeEventListener(EventType.CHANGE, this.boundRefresh_);\n    }\n    this.source = source;\n    if (source) {\n      source.addEventListener(EventType.CHANGE, this.boundRefresh_);\n    }\n    this.refresh();\n  }\n\n  /**\n   * Handle the source changing.\n   * @override\n   */\n  refresh() {\n    this.clear();\n    this.cluster();\n    this.addFeatures(this.features);\n  }\n\n  /**\n   * Update the distances and refresh the source if necessary.\n   * @param {number} distance The new distance.\n   * @param {number} minDistance The new minimum distance.\n   */\n  updateDistance(distance, minDistance) {\n    const ratio = distance === 0 ? 0 : Math.min(minDistance, distance) / distance;\n    const changed = distance !== this.distance || this.interpolationRatio !== ratio;\n    this.distance = distance;\n    this.minDistance = minDistance;\n    this.interpolationRatio = ratio;\n    if (changed) {\n      this.refresh();\n    }\n  }\n\n  /**\n   * @protected\n   */\n  cluster() {\n    if (this.resolution === undefined || !this.source) {\n      return;\n    }\n    const extent = createEmpty();\n    const mapDistance = this.distance * this.resolution;\n    const features = this.source.getFeatures();\n\n    /** @type {Object<string, true>} */\n    const clustered = {};\n    for (let i = 0, ii = features.length; i < ii; i++) {\n      const feature = features[i];\n      if (!(getUid(feature) in clustered)) {\n        const geometry = this.geometryFunction(feature);\n        if (geometry) {\n          const coordinates = geometry.getCoordinates();\n          createOrUpdateFromCoordinate(coordinates, extent);\n          buffer(extent, mapDistance, extent);\n          const neighbors = this.source.getFeaturesInExtent(extent).filter(function (neighbor) {\n            const uid = getUid(neighbor);\n            if (uid in clustered) {\n              return false;\n            }\n            clustered[uid] = true;\n            return true;\n          });\n          this.features.push(this.createCluster(neighbors, extent));\n        }\n      }\n    }\n  }\n\n  /**\n   * @param {Array<FeatureType>} features Features\n   * @param {import(\"../extent.js\").Extent} extent The searched extent for these features.\n   * @return {Feature} The cluster feature.\n   * @protected\n   */\n  createCluster(features, extent) {\n    const centroid = [0, 0];\n    for (let i = features.length - 1; i >= 0; --i) {\n      const geometry = this.geometryFunction(features[i]);\n      if (geometry) {\n        addCoordinate(centroid, geometry.getCoordinates());\n      } else {\n        features.splice(i, 1);\n      }\n    }\n    scaleCoordinate(centroid, 1 / features.length);\n    const searchCenter = getCenter(extent);\n    const ratio = this.interpolationRatio;\n    const geometry = new Point([centroid[0] * (1 - ratio) + searchCenter[0] * ratio, centroid[1] * (1 - ratio) + searchCenter[1] * ratio]);\n    if (this.createCustomCluster_) {\n      return this.createCustomCluster_(geometry, features);\n    }\n    return new Feature({\n      geometry,\n      features\n    });\n  }\n}\nexport default Cluster;", "export const THIS_IS_NOT_AN_OBJECT = \"This is not an object\";\nexport const THIS_IS_NOT_A_FLOAT16ARRAY_OBJECT = \"This is not a Float16Array object\";\nexport const THIS_CONSTRUCTOR_IS_NOT_A_SUBCLASS_OF_FLOAT16ARRAY = \"This constructor is not a subclass of Float16Array\";\nexport const THE_CONSTRUCTOR_PROPERTY_VALUE_IS_NOT_AN_OBJECT = \"The constructor property value is not an object\";\nexport const SPECIES_CONSTRUCTOR_DIDNT_RETURN_TYPEDARRAY_OBJECT = \"Species constructor didn't return TypedArray object\";\nexport const DERIVED_CONSTRUCTOR_CREATED_TYPEDARRAY_OBJECT_WHICH_WAS_TOO_SMALL_LENGTH = \"Derived constructor created TypedArray object which was too small length\";\nexport const ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER = \"Attempting to access detached ArrayBuffer\";\nexport const CANNOT_CONVERT_UNDEFINED_OR_NULL_TO_OBJECT = \"Cannot convert undefined or null to object\";\nexport const CANNOT_MIX_BIGINT_AND_OTHER_TYPES = \"Cannot mix BigInt and other types, use explicit conversions\";\nexport const ITERATOR_PROPERTY_IS_NOT_CALLABLE = \"@@iterator property is not callable\";\nexport const REDUCE_OF_EMPTY_ARRAY_WITH_NO_INITIAL_VALUE = \"Reduce of empty array with no initial value\";\nexport const THE_COMPARISON_FUNCTION_MUST_BE_EITHER_A_FUNCTION_OR_UNDEFINED = \"The comparison function must be either a function or undefined\";\nexport const OFFSET_IS_OUT_OF_BOUNDS = \"Offset is out of bounds\";", "/* eslint-disable no-restricted-globals, no-restricted-syntax */\n/* global SharedArrayBuffer */\n\nimport { CANNOT_CONVERT_UNDEFINED_OR_NULL_TO_OBJECT } from \"./messages.mjs\";\n\n/** @type {<T extends (...args: any) => any>(target: T) => (thisArg: ThisType<T>, ...args: any[]) => any} */\nfunction uncurryThis(target) {\n  return (thisArg, ...args) => {\n    return ReflectApply(target, thisArg, args);\n  };\n}\n\n/** @type {(target: any, key: string | symbol) => (thisArg: any, ...args: any[]) => any} */\nfunction uncurryThisGetter(target, key) {\n  return uncurryThis(ReflectGetOwnPropertyDescriptor(target, key).get);\n}\n\n// Reflect\nexport const {\n  apply: ReflectApply,\n  construct: ReflectConstruct,\n  defineProperty: ReflectDefineProperty,\n  get: ReflectGet,\n  getOwnPropertyDescriptor: ReflectGetOwnPropertyDescriptor,\n  getPrototypeOf: ReflectGetPrototypeOf,\n  has: ReflectHas,\n  ownKeys: ReflectOwnKeys,\n  set: ReflectSet,\n  setPrototypeOf: ReflectSetPrototypeOf\n} = Reflect;\n\n// Proxy\nexport const NativeProxy = Proxy;\n\n// Number\nexport const {\n  EPSILON,\n  MAX_SAFE_INTEGER,\n  isFinite: NumberIsFinite,\n  isNaN: NumberIsNaN\n} = Number;\n\n// Symbol\nexport const {\n  iterator: SymbolIterator,\n  species: SymbolSpecies,\n  toStringTag: SymbolToStringTag,\n  for: SymbolFor\n} = Symbol;\n\n// Object\nexport const NativeObject = Object;\nexport const {\n  create: ObjectCreate,\n  defineProperty: ObjectDefineProperty,\n  freeze: ObjectFreeze,\n  is: ObjectIs\n} = NativeObject;\nconst ObjectPrototype = NativeObject.prototype;\n/** @type {(object: object, key: PropertyKey) => Function | undefined} */\nexport const ObjectPrototype__lookupGetter__ = /** @type {any} */ObjectPrototype.__lookupGetter__ ? uncurryThis(/** @type {any} */ObjectPrototype.__lookupGetter__) : (object, key) => {\n  if (object == null) {\n    throw NativeTypeError(CANNOT_CONVERT_UNDEFINED_OR_NULL_TO_OBJECT);\n  }\n  let target = NativeObject(object);\n  do {\n    const descriptor = ReflectGetOwnPropertyDescriptor(target, key);\n    if (descriptor !== undefined) {\n      if (ObjectHasOwn(descriptor, \"get\")) {\n        return descriptor.get;\n      }\n      return;\n    }\n  } while ((target = ReflectGetPrototypeOf(target)) !== null);\n};\n/** @type {(object: object, key: PropertyKey) => boolean} */\nexport const ObjectHasOwn = /** @type {any} */NativeObject.hasOwn || uncurryThis(ObjectPrototype.hasOwnProperty);\n\n// Array\nconst NativeArray = Array;\nexport const ArrayIsArray = NativeArray.isArray;\nconst ArrayPrototype = NativeArray.prototype;\n/** @type {(array: ArrayLike<unknown>, separator?: string) => string} */\nexport const ArrayPrototypeJoin = uncurryThis(ArrayPrototype.join);\n/** @type {<T>(array: T[], ...items: T[]) => number} */\nexport const ArrayPrototypePush = uncurryThis(ArrayPrototype.push);\n/** @type {(array: ArrayLike<unknown>, ...opts: any[]) => string} */\nexport const ArrayPrototypeToLocaleString = uncurryThis(ArrayPrototype.toLocaleString);\nexport const NativeArrayPrototypeSymbolIterator = ArrayPrototype[SymbolIterator];\n/** @type {<T>(array: T[]) => IterableIterator<T>} */\nexport const ArrayPrototypeSymbolIterator = uncurryThis(NativeArrayPrototypeSymbolIterator);\n\n// Math\nexport const {\n  abs: MathAbs,\n  trunc: MathTrunc\n} = Math;\n\n// ArrayBuffer\nexport const NativeArrayBuffer = ArrayBuffer;\nexport const ArrayBufferIsView = NativeArrayBuffer.isView;\nconst ArrayBufferPrototype = NativeArrayBuffer.prototype;\n/** @type {(buffer: ArrayBuffer, begin?: number, end?: number) => number} */\nexport const ArrayBufferPrototypeSlice = uncurryThis(ArrayBufferPrototype.slice);\n/** @type {(buffer: ArrayBuffer) => ArrayBuffer} */\nexport const ArrayBufferPrototypeGetByteLength = uncurryThisGetter(ArrayBufferPrototype, \"byteLength\");\n\n// SharedArrayBuffer\nexport const NativeSharedArrayBuffer = typeof SharedArrayBuffer !== \"undefined\" ? SharedArrayBuffer : null;\n/** @type {(buffer: SharedArrayBuffer) => SharedArrayBuffer} */\nexport const SharedArrayBufferPrototypeGetByteLength = NativeSharedArrayBuffer && uncurryThisGetter(NativeSharedArrayBuffer.prototype, \"byteLength\");\n\n// TypedArray\n/** @typedef {Uint8Array|Uint8ClampedArray|Uint16Array|Uint32Array|Int8Array|Int16Array|Int32Array|Float32Array|Float64Array|BigUint64Array|BigInt64Array} TypedArray */\n/** @type {any} */\nexport const TypedArray = ReflectGetPrototypeOf(Uint8Array);\nconst TypedArrayFrom = TypedArray.from;\nexport const TypedArrayPrototype = TypedArray.prototype;\nexport const NativeTypedArrayPrototypeSymbolIterator = TypedArrayPrototype[SymbolIterator];\n/** @type {(typedArray: TypedArray) => IterableIterator<number>} */\nexport const TypedArrayPrototypeKeys = uncurryThis(TypedArrayPrototype.keys);\n/** @type {(typedArray: TypedArray) => IterableIterator<number>} */\nexport const TypedArrayPrototypeValues = uncurryThis(TypedArrayPrototype.values);\n/** @type {(typedArray: TypedArray) => IterableIterator<[number, number]>} */\nexport const TypedArrayPrototypeEntries = uncurryThis(TypedArrayPrototype.entries);\n/** @type {(typedArray: TypedArray, array: ArrayLike<number>, offset?: number) => void} */\nexport const TypedArrayPrototypeSet = uncurryThis(TypedArrayPrototype.set);\n/** @type {<T extends TypedArray>(typedArray: T) => T} */\nexport const TypedArrayPrototypeReverse = uncurryThis(TypedArrayPrototype.reverse);\n/** @type {<T extends TypedArray>(typedArray: T, value: number, start?: number, end?: number) => T} */\nexport const TypedArrayPrototypeFill = uncurryThis(TypedArrayPrototype.fill);\n/** @type {<T extends TypedArray>(typedArray: T, target: number, start: number, end?: number) => T} */\nexport const TypedArrayPrototypeCopyWithin = uncurryThis(TypedArrayPrototype.copyWithin);\n/** @type {<T extends TypedArray>(typedArray: T, compareFn?: (a: number, b: number) => number) => T} */\nexport const TypedArrayPrototypeSort = uncurryThis(TypedArrayPrototype.sort);\n/** @type {<T extends TypedArray>(typedArray: T, start?: number, end?: number) => T} */\nexport const TypedArrayPrototypeSlice = uncurryThis(TypedArrayPrototype.slice);\n/** @type {<T extends TypedArray>(typedArray: T, start?: number, end?: number) => T} */\nexport const TypedArrayPrototypeSubarray = uncurryThis(TypedArrayPrototype.subarray);\n/** @type {((typedArray: TypedArray) => ArrayBuffer)} */\nexport const TypedArrayPrototypeGetBuffer = uncurryThisGetter(TypedArrayPrototype, \"buffer\");\n/** @type {((typedArray: TypedArray) => number)} */\nexport const TypedArrayPrototypeGetByteOffset = uncurryThisGetter(TypedArrayPrototype, \"byteOffset\");\n/** @type {((typedArray: TypedArray) => number)} */\nexport const TypedArrayPrototypeGetLength = uncurryThisGetter(TypedArrayPrototype, \"length\");\n/** @type {(target: unknown) => string} */\nexport const TypedArrayPrototypeGetSymbolToStringTag = uncurryThisGetter(TypedArrayPrototype, SymbolToStringTag);\n\n// Uint8Array\nexport const NativeUint8Array = Uint8Array;\n\n// Uint16Array\nexport const NativeUint16Array = Uint16Array;\n/** @type {Uint16ArrayConstructor[\"from\"]} */\nexport const Uint16ArrayFrom = (...args) => {\n  return ReflectApply(TypedArrayFrom, NativeUint16Array, args);\n};\n\n// Uint32Array\nexport const NativeUint32Array = Uint32Array;\n\n// Float32Array\nexport const NativeFloat32Array = Float32Array;\n\n// ArrayIterator\n/** @type {any} */\nexport const ArrayIteratorPrototype = ReflectGetPrototypeOf([][SymbolIterator]());\n/** @type {<T>(arrayIterator: IterableIterator<T>) => IteratorResult<T>} */\nexport const ArrayIteratorPrototypeNext = uncurryThis(ArrayIteratorPrototype.next);\n\n// Generator\n/** @type {<T = unknown, TReturn = any, TNext = unknown>(generator: Generator<T, TReturn, TNext>, value?: TNext) => T} */\nexport const GeneratorPrototypeNext = uncurryThis(function* () {}().next);\n\n// Iterator\nexport const IteratorPrototype = ReflectGetPrototypeOf(ArrayIteratorPrototype);\n\n// DataView\nconst DataViewPrototype = DataView.prototype;\n/** @type {(dataView: DataView, byteOffset: number, littleEndian?: boolean) => number} */\nexport const DataViewPrototypeGetUint16 = uncurryThis(DataViewPrototype.getUint16);\n/** @type {(dataView: DataView, byteOffset: number, value: number, littleEndian?: boolean) => void} */\nexport const DataViewPrototypeSetUint16 = uncurryThis(DataViewPrototype.setUint16);\n\n// Error\nexport const NativeTypeError = TypeError;\nexport const NativeRangeError = RangeError;\n\n// WeakSet\n/**\n * Do not construct with arguments to avoid calling the \"add\" method\n * @type {{new <T extends {}>(): WeakSet<T>}}\n */\nexport const NativeWeakSet = WeakSet;\nconst WeakSetPrototype = NativeWeakSet.prototype;\n/** @type {<T extends {}>(set: WeakSet<T>, value: T) => Set<T>} */\nexport const WeakSetPrototypeAdd = uncurryThis(WeakSetPrototype.add);\n/** @type {<T extends {}>(set: WeakSet<T>, value: T) => boolean} */\nexport const WeakSetPrototypeHas = uncurryThis(WeakSetPrototype.has);\n\n// WeakMap\n/**\n * Do not construct with arguments to avoid calling the \"set\" method\n * @type {{new <K extends {}, V>(): WeakMap<K, V>}}\n */\nexport const NativeWeakMap = WeakMap;\nconst WeakMapPrototype = NativeWeakMap.prototype;\n/** @type {<K extends {}, V>(weakMap: WeakMap<K, V>, key: K) => V} */\nexport const WeakMapPrototypeGet = uncurryThis(WeakMapPrototype.get);\n/** @type {<K extends {}, V>(weakMap: WeakMap<K, V>, key: K) => boolean} */\nexport const WeakMapPrototypeHas = uncurryThis(WeakMapPrototype.has);\n/** @type {<K extends {}, V>(weakMap: WeakMap<K, V>, key: K, value: V) => WeakMap} */\nexport const WeakMapPrototypeSet = uncurryThis(WeakMapPrototype.set);", "import { ArrayIteratorPrototype, ArrayIteratorPrototypeNext, ArrayPrototypeSymbolIterator, GeneratorPrototypeNext, IteratorPrototype, NativeArrayPrototypeSymbolIterator, NativeWeakMap, ObjectCreate, ObjectDefineProperty, ReflectGetOwnPropertyDescriptor, ReflectOwnKeys, SymbolIterator, WeakMapPrototypeGet, WeakMapPrototypeSet } from \"./primordials.mjs\";\n\n/** @type {WeakMap<{}, IterableIterator<any>>} */\nconst arrayIterators = new NativeWeakMap();\nconst SafeIteratorPrototype = ObjectCreate(null, {\n  next: {\n    value: function next() {\n      const arrayIterator = WeakMapPrototypeGet(arrayIterators, this);\n      return ArrayIteratorPrototypeNext(arrayIterator);\n    }\n  },\n  [SymbolIterator]: {\n    value: function values() {\n      return this;\n    }\n  }\n});\n\n/**\n * Wrap the Array around the SafeIterator If Array.prototype [@@iterator] has been modified\n * @type {<T>(array: T[]) => Iterable<T>}\n */\nexport function safeIfNeeded(array) {\n  if (array[SymbolIterator] === NativeArrayPrototypeSymbolIterator && ArrayIteratorPrototype.next === ArrayIteratorPrototypeNext) {\n    return array;\n  }\n  const safe = ObjectCreate(SafeIteratorPrototype);\n  WeakMapPrototypeSet(arrayIterators, safe, ArrayPrototypeSymbolIterator(array));\n  return safe;\n}\n\n/** @type {WeakMap<{}, Generator<any>>} */\nconst generators = new NativeWeakMap();\n\n/** @see https://tc39.es/ecma262/#sec-%arrayiteratorprototype%-object */\nconst DummyArrayIteratorPrototype = ObjectCreate(IteratorPrototype, {\n  next: {\n    value: function next() {\n      const generator = WeakMapPrototypeGet(generators, this);\n      return GeneratorPrototypeNext(generator);\n    },\n    writable: true,\n    configurable: true\n  }\n});\nfor (const key of ReflectOwnKeys(ArrayIteratorPrototype)) {\n  // next method has already defined\n  if (key === \"next\") {\n    continue;\n  }\n\n  // Copy ArrayIteratorPrototype descriptors to DummyArrayIteratorPrototype\n  ObjectDefineProperty(DummyArrayIteratorPrototype, key, ReflectGetOwnPropertyDescriptor(ArrayIteratorPrototype, key));\n}\n\n/**\n * Wrap the Generator around the dummy ArrayIterator\n * @type {<T>(generator: Generator<T>) => IterableIterator<T>}\n */\nexport function wrap(generator) {\n  const dummy = ObjectCreate(DummyArrayIteratorPrototype);\n  WeakMapPrototypeSet(generators, dummy, generator);\n  return dummy;\n}", "import { ArrayBufferPrototypeGetByteLength, ArrayIsArray, ArrayIteratorPrototype, ArrayIteratorPrototypeNext, MathTrunc, NativeArrayPrototypeSymbolIterator, NativeSharedArrayBuffer, NativeTypedArrayPrototypeSymbolIterator, NumberIsFinite, SharedArrayBufferPrototypeGetByteLength, SymbolIterator, TypedArrayPrototypeGetSymbolToStringTag } from \"./primordials.mjs\";\n\n/**\n * @param {unknown} value\n * @returns {value is {}}\n */\nexport function isObject(value) {\n  return value !== null && typeof value === \"object\" || typeof value === \"function\";\n}\n\n/**\n * @param {unknown} value\n * @returns {value is {}}\n */\nexport function isObjectLike(value) {\n  return value !== null && typeof value === \"object\";\n}\n\n// Inspired by util.types implementation of Node.js\n/** @typedef {Uint8Array|Uint8ClampedArray|Uint16Array|Uint32Array|Int8Array|Int16Array|Int32Array|Float32Array|Float64Array|BigUint64Array|BigInt64Array} TypedArray */\n\n/**\n * @param {unknown} value\n * @returns {value is TypedArray}\n */\nexport function isNativeTypedArray(value) {\n  return TypedArrayPrototypeGetSymbolToStringTag(value) !== undefined;\n}\n\n/**\n * @param {unknown} value\n * @returns {value is BigInt64Array|BigUint64Array}\n */\nexport function isNativeBigIntTypedArray(value) {\n  const typedArrayName = TypedArrayPrototypeGetSymbolToStringTag(value);\n  return typedArrayName === \"BigInt64Array\" || typedArrayName === \"BigUint64Array\";\n}\n\n/**\n * @param {unknown} value\n * @returns {value is ArrayBuffer}\n */\nfunction isArrayBuffer(value) {\n  try {\n    // ArrayBuffers are never arrays\n    if (ArrayIsArray(value)) {\n      return false;\n    }\n    ArrayBufferPrototypeGetByteLength(/** @type {any} */value);\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * @param {unknown} value\n * @returns {value is SharedArrayBuffer}\n */\nexport function isSharedArrayBuffer(value) {\n  if (NativeSharedArrayBuffer === null) {\n    return false;\n  }\n  try {\n    SharedArrayBufferPrototypeGetByteLength(/** @type {any} */value);\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * @param {unknown} value\n * @returns {value is ArrayBuffer|SharedArrayBuffer}\n */\nexport function isAnyArrayBuffer(value) {\n  return isArrayBuffer(value) || isSharedArrayBuffer(value);\n}\n\n/**\n * @param {unknown} value\n * @returns {value is unknown[]}\n */\nexport function isOrdinaryArray(value) {\n  if (!ArrayIsArray(value)) {\n    return false;\n  }\n\n  // Verify that there are no changes in ArrayIterator\n  return value[SymbolIterator] === NativeArrayPrototypeSymbolIterator && ArrayIteratorPrototype.next === ArrayIteratorPrototypeNext;\n}\n\n/**\n * @param {unknown} value\n * @returns {value is TypedArray}\n */\nexport function isOrdinaryNativeTypedArray(value) {\n  if (!isNativeTypedArray(value)) {\n    return false;\n  }\n\n  // Verify that there are no changes in ArrayIterator\n  return value[SymbolIterator] === NativeTypedArrayPrototypeSymbolIterator && ArrayIteratorPrototype.next === ArrayIteratorPrototypeNext;\n}\n\n/**\n * @param {unknown} value\n * @returns {value is string}\n */\nexport function isCanonicalIntegerIndexString(value) {\n  if (typeof value !== \"string\") {\n    return false;\n  }\n  const number = +value;\n  if (value !== number + \"\") {\n    return false;\n  }\n  if (!NumberIsFinite(number)) {\n    return false;\n  }\n  return number === MathTrunc(number);\n}", "import { isObject, isObjectLike } from \"./is.mjs\";\nimport { THE_CONSTRUCTOR_PROPERTY_VALUE_IS_NOT_AN_OBJECT } from \"./messages.mjs\";\nimport { NativeTypeError, ReflectGetPrototypeOf, ReflectHas, SymbolFor } from \"./primordials.mjs\";\nexport const brand = SymbolFor(\"__Float16Array__\");\n\n/**\n * @param {unknown} target\n * @throws {TypeError}\n * @returns {boolean}\n */\nexport function hasFloat16ArrayBrand(target) {\n  if (!isObjectLike(target)) {\n    return false;\n  }\n  const prototype = ReflectGetPrototypeOf(target);\n  if (!isObjectLike(prototype)) {\n    return false;\n  }\n  const constructor = prototype.constructor;\n  if (constructor === undefined) {\n    return false;\n  }\n  if (!isObject(constructor)) {\n    throw NativeTypeError(THE_CONSTRUCTOR_PROPERTY_VALUE_IS_NOT_AN_OBJECT);\n  }\n  return ReflectHas(constructor, brand);\n}", "import { EPSILON, MathAbs, NativeArrayBuffer, NativeFloat32Array, NativeUint16Array, NativeUint32Array, NativeUint8Array, NumberIsFinite, NumberIsNaN } from \"./primordials.mjs\";\nconst INVERSE_OF_EPSILON = 1 / EPSILON;\n\n/**\n * rounds to the nearest value;\n * if the number falls midway, it is rounded to the nearest value with an even least significant digit\n * @param {number} num\n * @returns {number}\n */\nfunction roundTiesToEven(num) {\n  return num + INVERSE_OF_EPSILON - INVERSE_OF_EPSILON;\n}\nconst FLOAT16_MIN_VALUE = 6.103515625e-05;\nconst FLOAT16_MAX_VALUE = 65504;\nconst FLOAT16_EPSILON = 0.0009765625;\nconst FLOAT16_EPSILON_MULTIPLIED_BY_FLOAT16_MIN_VALUE = FLOAT16_EPSILON * FLOAT16_MIN_VALUE;\nconst FLOAT16_EPSILON_DEVIDED_BY_EPSILON = FLOAT16_EPSILON * INVERSE_OF_EPSILON;\n\n/**\n * round a number to a half float number\n * @param {unknown} num - double float\n * @returns {number} half float number\n */\nexport function roundToFloat16(num) {\n  const number = +num;\n\n  // NaN, Infinity, -Infinity, 0, -0\n  if (!NumberIsFinite(number) || number === 0) {\n    return number;\n  }\n\n  // finite except 0, -0\n  const sign = number > 0 ? 1 : -1;\n  const absolute = MathAbs(number);\n\n  // small number\n  if (absolute < FLOAT16_MIN_VALUE) {\n    return sign * roundTiesToEven(absolute / FLOAT16_EPSILON_MULTIPLIED_BY_FLOAT16_MIN_VALUE) * FLOAT16_EPSILON_MULTIPLIED_BY_FLOAT16_MIN_VALUE;\n  }\n  const temp = (1 + FLOAT16_EPSILON_DEVIDED_BY_EPSILON) * absolute;\n  const result = temp - (temp - absolute);\n\n  // large number\n  if (result > FLOAT16_MAX_VALUE || NumberIsNaN(result)) {\n    return sign * Infinity;\n  }\n  return sign * result;\n}\n\n// base algorithm: http://fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n\nconst buffer = new NativeArrayBuffer(4);\nconst floatView = new NativeFloat32Array(buffer);\nconst uint32View = new NativeUint32Array(buffer);\nconst baseTable = new NativeUint16Array(512);\nconst shiftTable = new NativeUint8Array(512);\nfor (let i = 0; i < 256; ++i) {\n  const e = i - 127;\n\n  // very small number (0, -0)\n  if (e < -24) {\n    baseTable[i] = 0x0000;\n    baseTable[i | 0x100] = 0x8000;\n    shiftTable[i] = 24;\n    shiftTable[i | 0x100] = 24;\n\n    // small number (denorm)\n  } else if (e < -14) {\n    baseTable[i] = 0x0400 >> -e - 14;\n    baseTable[i | 0x100] = 0x0400 >> -e - 14 | 0x8000;\n    shiftTable[i] = -e - 1;\n    shiftTable[i | 0x100] = -e - 1;\n\n    // normal number\n  } else if (e <= 15) {\n    baseTable[i] = e + 15 << 10;\n    baseTable[i | 0x100] = e + 15 << 10 | 0x8000;\n    shiftTable[i] = 13;\n    shiftTable[i | 0x100] = 13;\n\n    // large number (Infinity, -Infinity)\n  } else if (e < 128) {\n    baseTable[i] = 0x7c00;\n    baseTable[i | 0x100] = 0xfc00;\n    shiftTable[i] = 24;\n    shiftTable[i | 0x100] = 24;\n\n    // stay (NaN, Infinity, -Infinity)\n  } else {\n    baseTable[i] = 0x7c00;\n    baseTable[i | 0x100] = 0xfc00;\n    shiftTable[i] = 13;\n    shiftTable[i | 0x100] = 13;\n  }\n}\n\n/**\n * round a number to a half float number bits\n * @param {unknown} num - double float\n * @returns {number} half float number bits\n */\nexport function roundToFloat16Bits(num) {\n  floatView[0] = roundToFloat16(num);\n  const f = uint32View[0];\n  const e = f >> 23 & 0x1ff;\n  return baseTable[e] + ((f & 0x007fffff) >> shiftTable[e]);\n}\nconst mantissaTable = new NativeUint32Array(2048);\nfor (let i = 1; i < 1024; ++i) {\n  let m = i << 13; // zero pad mantissa bits\n  let e = 0; // zero exponent\n\n  // normalized\n  while ((m & 0x00800000) === 0) {\n    m <<= 1;\n    e -= 0x00800000; // decrement exponent\n  }\n  m &= ~0x00800000; // clear leading 1 bit\n  e += 0x38800000; // adjust bias\n\n  mantissaTable[i] = m | e;\n}\nfor (let i = 1024; i < 2048; ++i) {\n  mantissaTable[i] = 0x38000000 + (i - 1024 << 13);\n}\nconst exponentTable = new NativeUint32Array(64);\nfor (let i = 1; i < 31; ++i) {\n  exponentTable[i] = i << 23;\n}\nexponentTable[31] = 0x47800000;\nexponentTable[32] = 0x80000000;\nfor (let i = 33; i < 63; ++i) {\n  exponentTable[i] = 0x80000000 + (i - 32 << 23);\n}\nexponentTable[63] = 0xc7800000;\nconst offsetTable = new NativeUint16Array(64);\nfor (let i = 1; i < 64; ++i) {\n  if (i !== 32) {\n    offsetTable[i] = 1024;\n  }\n}\n\n/**\n * convert a half float number bits to a number\n * @param {number} float16bits - half float number bits\n * @returns {number} double float\n */\nexport function convertToNumber(float16bits) {\n  const i = float16bits >> 10;\n  uint32View[0] = mantissaTable[offsetTable[i] + (float16bits & 0x3ff)] + exponentTable[i];\n  return floatView[0];\n}", "import { isObject, isSharedArrayBuffer } from \"./is.mjs\";\nimport { THE_CONSTRUCTOR_PROPERTY_VALUE_IS_NOT_AN_OBJECT, THIS_IS_NOT_AN_OBJECT } from \"./messages.mjs\";\nimport { ArrayBufferPrototypeSlice, MAX_SAFE_INTEGER, MathTrunc, NativeTypeError, NumberIsNaN, ObjectIs, SymbolSpecies } from \"./primordials.mjs\";\n\n/**\n * @see https://tc39.es/ecma262/#sec-tointegerorinfinity\n * @param {unknown} target\n * @returns {number}\n */\nexport function ToIntegerOrInfinity(target) {\n  const number = +target;\n  if (NumberIsNaN(number) || number === 0) {\n    return 0;\n  }\n  return MathTrunc(number);\n}\n\n/**\n * @see https://tc39.es/ecma262/#sec-tolength\n * @param {unknown} target\n * @returns {number}\n */\nexport function ToLength(target) {\n  const length = ToIntegerOrInfinity(target);\n  if (length < 0) {\n    return 0;\n  }\n  return length < MAX_SAFE_INTEGER ? length : MAX_SAFE_INTEGER;\n}\n\n/**\n * @see https://tc39.es/ecma262/#sec-speciesconstructor\n * @param {object} target\n * @param {{ new(...args: any[]): any; }} defaultConstructor\n * @returns {{ new(...args: any[]): any; }}\n */\nexport function SpeciesConstructor(target, defaultConstructor) {\n  if (!isObject(target)) {\n    throw NativeTypeError(THIS_IS_NOT_AN_OBJECT);\n  }\n  const constructor = target.constructor;\n  if (constructor === undefined) {\n    return defaultConstructor;\n  }\n  if (!isObject(constructor)) {\n    throw NativeTypeError(THE_CONSTRUCTOR_PROPERTY_VALUE_IS_NOT_AN_OBJECT);\n  }\n  const species = constructor[SymbolSpecies];\n  if (species == null) {\n    return defaultConstructor;\n  }\n  return species;\n}\n\n/**\n * @see https://tc39.es/ecma262/#sec-isdetachedbuffer\n * @param {ArrayBufferLike} buffer\n * @returns {boolean}\n */\nexport function IsDetachedBuffer(buffer) {\n  if (isSharedArrayBuffer(buffer)) {\n    return false;\n  }\n  try {\n    ArrayBufferPrototypeSlice(buffer, 0, 0);\n    return false;\n  } catch (e) {/* empty */}\n  return true;\n}\n\n/**\n * bigint comparisons are not supported\n * @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.sort\n * @param {number} x\n * @param {number} y\n * @returns {-1 | 0 | 1}\n */\nexport function defaultCompare(x, y) {\n  const isXNaN = NumberIsNaN(x);\n  const isYNaN = NumberIsNaN(y);\n  if (isXNaN && isYNaN) {\n    return 0;\n  }\n  if (isXNaN) {\n    return 1;\n  }\n  if (isYNaN) {\n    return -1;\n  }\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  if (x === 0 && y === 0) {\n    const isXPlusZero = ObjectIs(x, 0);\n    const isYPlusZero = ObjectIs(y, 0);\n    if (!isXPlusZero && isYPlusZero) {\n      return -1;\n    }\n    if (isXPlusZero && !isYPlusZero) {\n      return 1;\n    }\n  }\n  return 0;\n}", "import { safeIfNeeded, wrap } from \"./_util/arrayIterator.mjs\";\nimport { brand, hasFloat16ArrayBrand } from \"./_util/brand.mjs\";\nimport { convertToNumber, roundToFloat16Bits } from \"./_util/converter.mjs\";\nimport { isAnyArrayBuffer, isCanonicalIntegerIndexString, isNativeBigIntTypedArray, isNativeTypedArray, isObject, isOrdinaryArray, isOrdinaryNativeTypedArray } from \"./_util/is.mjs\";\nimport { ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER, CANNOT_CONVERT_UNDEFINED_OR_NULL_TO_OBJECT, CANNOT_MIX_BIGINT_AND_OTHER_TYPES, DERIVED_CONSTRUCTOR_CREATED_TYPEDARRAY_OBJECT_WHICH_WAS_TOO_SMALL_LENGTH, ITERATOR_PROPERTY_IS_NOT_CALLABLE, OFFSET_IS_OUT_OF_BOUNDS, REDUCE_OF_EMPTY_ARRAY_WITH_NO_INITIAL_VALUE, SPECIES_CONSTRUCTOR_DIDNT_RETURN_TYPEDARRAY_OBJECT, THE_COMPARISON_FUNCTION_MUST_BE_EITHER_A_FUNCTION_OR_UNDEFINED, THIS_CONSTRUCTOR_IS_NOT_A_SUBCLASS_OF_FLOAT16ARRAY, THIS_IS_NOT_A_FLOAT16ARRAY_OBJECT } from \"./_util/messages.mjs\";\nimport { ArrayBufferIsView, ArrayPrototypeJoin, ArrayPrototypePush, ArrayPrototypeToLocaleString, NativeArrayBuffer, NativeObject, NativeProxy, NativeRangeError, NativeTypeError, NativeUint16Array, NativeWeakMap, NativeWeakSet, NumberIsNaN, ObjectDefineProperty, ObjectFreeze, ObjectHasOwn, ObjectPrototype__lookupGetter__, ReflectApply, ReflectConstruct, ReflectDefineProperty, ReflectGet, ReflectGetOwnPropertyDescriptor, ReflectHas, ReflectOwnKeys, ReflectSet, ReflectSetPrototypeOf, SymbolIterator, SymbolToStringTag, TypedArray, TypedArrayPrototype, TypedArrayPrototypeCopyWithin, TypedArrayPrototypeEntries, TypedArrayPrototypeFill, TypedArrayPrototypeGetBuffer, TypedArrayPrototypeGetByteOffset, TypedArrayPrototypeGetLength, TypedArrayPrototypeKeys, TypedArrayPrototypeReverse, TypedArrayPrototypeSet, TypedArrayPrototypeSlice, TypedArrayPrototypeSort, TypedArrayPrototypeSubarray, TypedArrayPrototypeValues, Uint16ArrayFrom, WeakMapPrototypeGet, WeakMapPrototypeHas, WeakMapPrototypeSet, WeakSetPrototypeAdd, WeakSetPrototypeHas } from \"./_util/primordials.mjs\";\nimport { IsDetachedBuffer, SpeciesConstructor, ToIntegerOrInfinity, ToLength, defaultCompare } from \"./_util/spec.mjs\";\nconst BYTES_PER_ELEMENT = 2;\n\n/** @typedef {Uint16Array & { __float16bits: never }} Float16BitsArray */\n\n/** @type {WeakMap<Float16Array, Float16BitsArray>} */\nconst float16bitsArrays = new NativeWeakMap();\n\n/**\n * @param {unknown} target\n * @returns {target is Float16Array}\n */\nexport function isFloat16Array(target) {\n  return WeakMapPrototypeHas(float16bitsArrays, target) || !ArrayBufferIsView(target) && hasFloat16ArrayBrand(target);\n}\n\n/**\n * @param {unknown} target\n * @throws {TypeError}\n * @returns {asserts target is Float16Array}\n */\nfunction assertFloat16Array(target) {\n  if (!isFloat16Array(target)) {\n    throw NativeTypeError(THIS_IS_NOT_A_FLOAT16ARRAY_OBJECT);\n  }\n}\n\n/**\n * @param {unknown} target\n * @param {number=} count\n * @throws {TypeError}\n * @returns {asserts target is Uint8Array|Uint8ClampedArray|Uint16Array|Uint32Array|Int8Array|Int16Array|Int32Array|Float16Array|Float32Array|Float64Array}\n */\nfunction assertSpeciesTypedArray(target, count) {\n  const isTargetFloat16Array = isFloat16Array(target);\n  const isTargetTypedArray = isNativeTypedArray(target);\n  if (!isTargetFloat16Array && !isTargetTypedArray) {\n    throw NativeTypeError(SPECIES_CONSTRUCTOR_DIDNT_RETURN_TYPEDARRAY_OBJECT);\n  }\n  if (typeof count === \"number\") {\n    let length;\n    if (isTargetFloat16Array) {\n      const float16bitsArray = getFloat16BitsArray(target);\n      length = TypedArrayPrototypeGetLength(float16bitsArray);\n    } else {\n      length = TypedArrayPrototypeGetLength(target);\n    }\n    if (length < count) {\n      throw NativeTypeError(DERIVED_CONSTRUCTOR_CREATED_TYPEDARRAY_OBJECT_WHICH_WAS_TOO_SMALL_LENGTH);\n    }\n  }\n  if (isNativeBigIntTypedArray(target)) {\n    throw NativeTypeError(CANNOT_MIX_BIGINT_AND_OTHER_TYPES);\n  }\n}\n\n/**\n * @param {Float16Array} float16\n * @throws {TypeError}\n * @returns {Float16BitsArray}\n */\nfunction getFloat16BitsArray(float16) {\n  const float16bitsArray = WeakMapPrototypeGet(float16bitsArrays, float16);\n  if (float16bitsArray !== undefined) {\n    const buffer = TypedArrayPrototypeGetBuffer(float16bitsArray);\n    if (IsDetachedBuffer(buffer)) {\n      throw NativeTypeError(ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER);\n    }\n    return float16bitsArray;\n  }\n\n  // from another Float16Array instance (a different version?)\n  const buffer = /** @type {any} */float16.buffer;\n  if (IsDetachedBuffer(buffer)) {\n    throw NativeTypeError(ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER);\n  }\n  const cloned = ReflectConstruct(Float16Array, [buffer, /** @type {any} */float16.byteOffset, /** @type {any} */float16.length], float16.constructor);\n  return WeakMapPrototypeGet(float16bitsArrays, cloned);\n}\n\n/**\n * @param {Float16BitsArray} float16bitsArray\n * @returns {number[]}\n */\nfunction copyToArray(float16bitsArray) {\n  const length = TypedArrayPrototypeGetLength(float16bitsArray);\n  const array = [];\n  for (let i = 0; i < length; ++i) {\n    array[i] = convertToNumber(float16bitsArray[i]);\n  }\n  return array;\n}\n\n/** @type {WeakSet<Function>} */\nconst TypedArrayPrototypeGetters = new NativeWeakSet();\nfor (const key of ReflectOwnKeys(TypedArrayPrototype)) {\n  // @@toStringTag getter property is defined in Float16Array.prototype\n  if (key === SymbolToStringTag) {\n    continue;\n  }\n  const descriptor = ReflectGetOwnPropertyDescriptor(TypedArrayPrototype, key);\n  if (ObjectHasOwn(descriptor, \"get\") && typeof descriptor.get === \"function\") {\n    WeakSetPrototypeAdd(TypedArrayPrototypeGetters, descriptor.get);\n  }\n}\nconst handler = ObjectFreeze(/** @type {ProxyHandler<Float16BitsArray>} */{\n  get(target, key, receiver) {\n    if (isCanonicalIntegerIndexString(key) && ObjectHasOwn(target, key)) {\n      return convertToNumber(ReflectGet(target, key));\n    }\n\n    // %TypedArray%.prototype getter properties cannot called by Proxy receiver\n    if (WeakSetPrototypeHas(TypedArrayPrototypeGetters, ObjectPrototype__lookupGetter__(target, key))) {\n      return ReflectGet(target, key);\n    }\n    return ReflectGet(target, key, receiver);\n  },\n  set(target, key, value, receiver) {\n    if (isCanonicalIntegerIndexString(key) && ObjectHasOwn(target, key)) {\n      return ReflectSet(target, key, roundToFloat16Bits(value));\n    }\n    return ReflectSet(target, key, value, receiver);\n  },\n  getOwnPropertyDescriptor(target, key) {\n    if (isCanonicalIntegerIndexString(key) && ObjectHasOwn(target, key)) {\n      const descriptor = ReflectGetOwnPropertyDescriptor(target, key);\n      descriptor.value = convertToNumber(descriptor.value);\n      return descriptor;\n    }\n    return ReflectGetOwnPropertyDescriptor(target, key);\n  },\n  defineProperty(target, key, descriptor) {\n    if (isCanonicalIntegerIndexString(key) && ObjectHasOwn(target, key) && ObjectHasOwn(descriptor, \"value\")) {\n      descriptor.value = roundToFloat16Bits(descriptor.value);\n      return ReflectDefineProperty(target, key, descriptor);\n    }\n    return ReflectDefineProperty(target, key, descriptor);\n  }\n});\nexport class Float16Array {\n  /** @see https://tc39.es/ecma262/#sec-typedarray */\n  constructor(input, _byteOffset, _length) {\n    /** @type {Float16BitsArray} */\n    let float16bitsArray;\n    if (isFloat16Array(input)) {\n      float16bitsArray = ReflectConstruct(NativeUint16Array, [getFloat16BitsArray(input)], new.target);\n    } else if (isObject(input) && !isAnyArrayBuffer(input)) {\n      // object without ArrayBuffer, SharedArrayBuffer\n      /** @type {ArrayLike<unknown>} */\n      let list;\n      /** @type {number} */\n      let length;\n      if (isNativeTypedArray(input)) {\n        // TypedArray\n        list = input;\n        length = TypedArrayPrototypeGetLength(input);\n        const buffer = TypedArrayPrototypeGetBuffer(input);\n        if (IsDetachedBuffer(buffer)) {\n          throw NativeTypeError(ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER);\n        }\n        if (isNativeBigIntTypedArray(input)) {\n          throw NativeTypeError(CANNOT_MIX_BIGINT_AND_OTHER_TYPES);\n        }\n        const data = new NativeArrayBuffer(length * BYTES_PER_ELEMENT);\n        float16bitsArray = ReflectConstruct(NativeUint16Array, [data], new.target);\n      } else {\n        const iterator = input[SymbolIterator];\n        if (iterator != null && typeof iterator !== \"function\") {\n          throw NativeTypeError(ITERATOR_PROPERTY_IS_NOT_CALLABLE);\n        }\n        if (iterator != null) {\n          // Iterable (Array)\n          // for optimization\n          if (isOrdinaryArray(input)) {\n            list = input;\n            length = input.length;\n          } else {\n            // eslint-disable-next-line no-restricted-syntax\n            list = [...(/** @type {Iterable<unknown>} */input)];\n            length = list.length;\n          }\n        } else {\n          // ArrayLike\n          list = /** @type {ArrayLike<unknown>} */input;\n          length = ToLength(list.length);\n        }\n        float16bitsArray = ReflectConstruct(NativeUint16Array, [length], new.target);\n      }\n\n      // set values\n      for (let i = 0; i < length; ++i) {\n        float16bitsArray[i] = roundToFloat16Bits(list[i]);\n      }\n    } else {\n      // primitive, ArrayBuffer, SharedArrayBuffer\n      float16bitsArray = ReflectConstruct(NativeUint16Array, arguments, new.target);\n    }\n\n    /** @type {Float16Array} */\n    const proxy = /** @type {any} */new NativeProxy(float16bitsArray, handler);\n\n    // proxy private storage\n    WeakMapPrototypeSet(float16bitsArrays, proxy, float16bitsArray);\n    return proxy;\n  }\n\n  /**\n   * limitation: `Object.getOwnPropertyNames(Float16Array)` or `Reflect.ownKeys(Float16Array)` include this key\n   * @see https://tc39.es/ecma262/#sec-%typedarray%.from\n   */\n  static from(src, ...opts) {\n    const Constructor = this;\n    if (!ReflectHas(Constructor, brand)) {\n      throw NativeTypeError(THIS_CONSTRUCTOR_IS_NOT_A_SUBCLASS_OF_FLOAT16ARRAY);\n    }\n\n    // for optimization\n    if (Constructor === Float16Array) {\n      if (isFloat16Array(src) && opts.length === 0) {\n        const float16bitsArray = getFloat16BitsArray(src);\n        const uint16 = new NativeUint16Array(TypedArrayPrototypeGetBuffer(float16bitsArray), TypedArrayPrototypeGetByteOffset(float16bitsArray), TypedArrayPrototypeGetLength(float16bitsArray));\n        return new Float16Array(TypedArrayPrototypeGetBuffer(TypedArrayPrototypeSlice(uint16)));\n      }\n      if (opts.length === 0) {\n        return new Float16Array(TypedArrayPrototypeGetBuffer(Uint16ArrayFrom(src, roundToFloat16Bits)));\n      }\n      const mapFunc = opts[0];\n      const thisArg = opts[1];\n      return new Float16Array(TypedArrayPrototypeGetBuffer(Uint16ArrayFrom(src, function (val, ...args) {\n        return roundToFloat16Bits(ReflectApply(mapFunc, this, [val, ...safeIfNeeded(args)]));\n      }, thisArg)));\n    }\n\n    /** @type {ArrayLike<unknown>} */\n    let list;\n    /** @type {number} */\n    let length;\n    const iterator = src[SymbolIterator];\n    if (iterator != null && typeof iterator !== \"function\") {\n      throw NativeTypeError(ITERATOR_PROPERTY_IS_NOT_CALLABLE);\n    }\n    if (iterator != null) {\n      // Iterable (TypedArray, Array)\n      // for optimization\n      if (isOrdinaryArray(src)) {\n        list = src;\n        length = src.length;\n      } else if (isOrdinaryNativeTypedArray(src)) {\n        list = src;\n        length = TypedArrayPrototypeGetLength(src);\n      } else {\n        // eslint-disable-next-line no-restricted-syntax\n        list = [...src];\n        length = list.length;\n      }\n    } else {\n      // ArrayLike\n      if (src == null) {\n        throw NativeTypeError(CANNOT_CONVERT_UNDEFINED_OR_NULL_TO_OBJECT);\n      }\n      list = NativeObject(src);\n      length = ToLength(list.length);\n    }\n    const array = new Constructor(length);\n    if (opts.length === 0) {\n      for (let i = 0; i < length; ++i) {\n        array[i] = /** @type {number} */list[i];\n      }\n    } else {\n      const mapFunc = opts[0];\n      const thisArg = opts[1];\n      for (let i = 0; i < length; ++i) {\n        array[i] = ReflectApply(mapFunc, thisArg, [list[i], i]);\n      }\n    }\n    return array;\n  }\n\n  /**\n   * limitation: `Object.getOwnPropertyNames(Float16Array)` or `Reflect.ownKeys(Float16Array)` include this key\n   * @see https://tc39.es/ecma262/#sec-%typedarray%.of\n   */\n  static of(...items) {\n    const Constructor = this;\n    if (!ReflectHas(Constructor, brand)) {\n      throw NativeTypeError(THIS_CONSTRUCTOR_IS_NOT_A_SUBCLASS_OF_FLOAT16ARRAY);\n    }\n    const length = items.length;\n\n    // for optimization\n    if (Constructor === Float16Array) {\n      const proxy = new Float16Array(length);\n      const float16bitsArray = getFloat16BitsArray(proxy);\n      for (let i = 0; i < length; ++i) {\n        float16bitsArray[i] = roundToFloat16Bits(items[i]);\n      }\n      return proxy;\n    }\n    const array = new Constructor(length);\n    for (let i = 0; i < length; ++i) {\n      array[i] = items[i];\n    }\n    return array;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.keys */\n  keys() {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    return TypedArrayPrototypeKeys(float16bitsArray);\n  }\n\n  /**\n   * limitation: returns a object whose prototype is not `%ArrayIteratorPrototype%`\n   * @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.values\n   */\n  values() {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    return wrap(function* () {\n      // eslint-disable-next-line no-restricted-syntax\n      for (const val of TypedArrayPrototypeValues(float16bitsArray)) {\n        yield convertToNumber(val);\n      }\n    }());\n  }\n\n  /**\n   * limitation: returns a object whose prototype is not `%ArrayIteratorPrototype%`\n   * @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.entries\n   */\n  entries() {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    return wrap(function* () {\n      // eslint-disable-next-line no-restricted-syntax\n      for (const [i, val] of TypedArrayPrototypeEntries(float16bitsArray)) {\n        yield (/** @type {[number, number]} */[i, convertToNumber(val)]);\n      }\n    }());\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.at */\n  at(index) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const relativeIndex = ToIntegerOrInfinity(index);\n    const k = relativeIndex >= 0 ? relativeIndex : length + relativeIndex;\n    if (k < 0 || k >= length) {\n      return;\n    }\n    return convertToNumber(float16bitsArray[k]);\n  }\n\n  /** @see https://tc39.es/proposal-change-array-by-copy/#sec-%typedarray%.prototype.with */\n  with(index, value) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const relativeIndex = ToIntegerOrInfinity(index);\n    const k = relativeIndex >= 0 ? relativeIndex : length + relativeIndex;\n    const number = +value;\n    if (k < 0 || k >= length) {\n      throw NativeRangeError(OFFSET_IS_OUT_OF_BOUNDS);\n    }\n\n    // don't use SpeciesConstructor\n    const uint16 = new NativeUint16Array(TypedArrayPrototypeGetBuffer(float16bitsArray), TypedArrayPrototypeGetByteOffset(float16bitsArray), TypedArrayPrototypeGetLength(float16bitsArray));\n    const cloned = new Float16Array(TypedArrayPrototypeGetBuffer(TypedArrayPrototypeSlice(uint16)));\n    const array = getFloat16BitsArray(cloned);\n    array[k] = roundToFloat16Bits(number);\n    return cloned;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.map */\n  map(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = opts[0];\n    const Constructor = SpeciesConstructor(float16bitsArray, Float16Array);\n\n    // for optimization\n    if (Constructor === Float16Array) {\n      const proxy = new Float16Array(length);\n      const array = getFloat16BitsArray(proxy);\n      for (let i = 0; i < length; ++i) {\n        const val = convertToNumber(float16bitsArray[i]);\n        array[i] = roundToFloat16Bits(ReflectApply(callback, thisArg, [val, i, this]));\n      }\n      return proxy;\n    }\n    const array = new Constructor(length);\n    assertSpeciesTypedArray(array, length);\n    for (let i = 0; i < length; ++i) {\n      const val = convertToNumber(float16bitsArray[i]);\n      array[i] = ReflectApply(callback, thisArg, [val, i, this]);\n    }\n    return /** @type {any} */array;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.filter */\n  filter(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = opts[0];\n    const kept = [];\n    for (let i = 0; i < length; ++i) {\n      const val = convertToNumber(float16bitsArray[i]);\n      if (ReflectApply(callback, thisArg, [val, i, this])) {\n        ArrayPrototypePush(kept, val);\n      }\n    }\n    const Constructor = SpeciesConstructor(float16bitsArray, Float16Array);\n    const array = new Constructor(kept);\n    assertSpeciesTypedArray(array);\n    return /** @type {any} */array;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.reduce */\n  reduce(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    if (length === 0 && opts.length === 0) {\n      throw NativeTypeError(REDUCE_OF_EMPTY_ARRAY_WITH_NO_INITIAL_VALUE);\n    }\n    let accumulator, start;\n    if (opts.length === 0) {\n      accumulator = convertToNumber(float16bitsArray[0]);\n      start = 1;\n    } else {\n      accumulator = opts[0];\n      start = 0;\n    }\n    for (let i = start; i < length; ++i) {\n      accumulator = callback(accumulator, convertToNumber(float16bitsArray[i]), i, this);\n    }\n    return accumulator;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.reduceright */\n  reduceRight(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    if (length === 0 && opts.length === 0) {\n      throw NativeTypeError(REDUCE_OF_EMPTY_ARRAY_WITH_NO_INITIAL_VALUE);\n    }\n    let accumulator, start;\n    if (opts.length === 0) {\n      accumulator = convertToNumber(float16bitsArray[length - 1]);\n      start = length - 2;\n    } else {\n      accumulator = opts[0];\n      start = length - 1;\n    }\n    for (let i = start; i >= 0; --i) {\n      accumulator = callback(accumulator, convertToNumber(float16bitsArray[i]), i, this);\n    }\n    return accumulator;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.foreach */\n  forEach(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = opts[0];\n    for (let i = 0; i < length; ++i) {\n      ReflectApply(callback, thisArg, [convertToNumber(float16bitsArray[i]), i, this]);\n    }\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.find */\n  find(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = opts[0];\n    for (let i = 0; i < length; ++i) {\n      const value = convertToNumber(float16bitsArray[i]);\n      if (ReflectApply(callback, thisArg, [value, i, this])) {\n        return value;\n      }\n    }\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.findindex */\n  findIndex(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = opts[0];\n    for (let i = 0; i < length; ++i) {\n      const value = convertToNumber(float16bitsArray[i]);\n      if (ReflectApply(callback, thisArg, [value, i, this])) {\n        return i;\n      }\n    }\n    return -1;\n  }\n\n  /** @see https://tc39.es/proposal-array-find-from-last/index.html#sec-%typedarray%.prototype.findlast */\n  findLast(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = opts[0];\n    for (let i = length - 1; i >= 0; --i) {\n      const value = convertToNumber(float16bitsArray[i]);\n      if (ReflectApply(callback, thisArg, [value, i, this])) {\n        return value;\n      }\n    }\n  }\n\n  /** @see https://tc39.es/proposal-array-find-from-last/index.html#sec-%typedarray%.prototype.findlastindex */\n  findLastIndex(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = opts[0];\n    for (let i = length - 1; i >= 0; --i) {\n      const value = convertToNumber(float16bitsArray[i]);\n      if (ReflectApply(callback, thisArg, [value, i, this])) {\n        return i;\n      }\n    }\n    return -1;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.every */\n  every(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = opts[0];\n    for (let i = 0; i < length; ++i) {\n      if (!ReflectApply(callback, thisArg, [convertToNumber(float16bitsArray[i]), i, this])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.some */\n  some(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = opts[0];\n    for (let i = 0; i < length; ++i) {\n      if (ReflectApply(callback, thisArg, [convertToNumber(float16bitsArray[i]), i, this])) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.set */\n  set(input, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const targetOffset = ToIntegerOrInfinity(opts[0]);\n    if (targetOffset < 0) {\n      throw NativeRangeError(OFFSET_IS_OUT_OF_BOUNDS);\n    }\n    if (input == null) {\n      throw NativeTypeError(CANNOT_CONVERT_UNDEFINED_OR_NULL_TO_OBJECT);\n    }\n    if (isNativeBigIntTypedArray(input)) {\n      throw NativeTypeError(CANNOT_MIX_BIGINT_AND_OTHER_TYPES);\n    }\n\n    // for optimization\n    if (isFloat16Array(input)) {\n      // peel off Proxy\n      return TypedArrayPrototypeSet(getFloat16BitsArray(this), getFloat16BitsArray(input), targetOffset);\n    }\n    if (isNativeTypedArray(input)) {\n      const buffer = TypedArrayPrototypeGetBuffer(input);\n      if (IsDetachedBuffer(buffer)) {\n        throw NativeTypeError(ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER);\n      }\n    }\n    const targetLength = TypedArrayPrototypeGetLength(float16bitsArray);\n    const src = NativeObject(input);\n    const srcLength = ToLength(src.length);\n    if (targetOffset === Infinity || srcLength + targetOffset > targetLength) {\n      throw NativeRangeError(OFFSET_IS_OUT_OF_BOUNDS);\n    }\n    for (let i = 0; i < srcLength; ++i) {\n      float16bitsArray[i + targetOffset] = roundToFloat16Bits(src[i]);\n    }\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.reverse */\n  reverse() {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    TypedArrayPrototypeReverse(float16bitsArray);\n    return this;\n  }\n\n  /** @see https://tc39.es/proposal-change-array-by-copy/#sec-%typedarray%.prototype.toReversed */\n  toReversed() {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    // don't use SpeciesConstructor\n    const uint16 = new NativeUint16Array(TypedArrayPrototypeGetBuffer(float16bitsArray), TypedArrayPrototypeGetByteOffset(float16bitsArray), TypedArrayPrototypeGetLength(float16bitsArray));\n    const cloned = new Float16Array(TypedArrayPrototypeGetBuffer(TypedArrayPrototypeSlice(uint16)));\n    const clonedFloat16bitsArray = getFloat16BitsArray(cloned);\n    TypedArrayPrototypeReverse(clonedFloat16bitsArray);\n    return cloned;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.fill */\n  fill(value, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    TypedArrayPrototypeFill(float16bitsArray, roundToFloat16Bits(value), ...safeIfNeeded(opts));\n    return this;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.copywithin */\n  copyWithin(target, start, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    TypedArrayPrototypeCopyWithin(float16bitsArray, target, start, ...safeIfNeeded(opts));\n    return this;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.sort */\n  sort(compareFn) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const sortCompare = compareFn !== undefined ? compareFn : defaultCompare;\n    TypedArrayPrototypeSort(float16bitsArray, (x, y) => {\n      return sortCompare(convertToNumber(x), convertToNumber(y));\n    });\n    return this;\n  }\n\n  /** @see https://tc39.es/proposal-change-array-by-copy/#sec-%typedarray%.prototype.toSorted */\n  toSorted(compareFn) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    if (compareFn !== undefined && typeof compareFn !== \"function\") {\n      throw new NativeTypeError(THE_COMPARISON_FUNCTION_MUST_BE_EITHER_A_FUNCTION_OR_UNDEFINED);\n    }\n    const sortCompare = compareFn !== undefined ? compareFn : defaultCompare;\n\n    // don't use SpeciesConstructor\n    const uint16 = new NativeUint16Array(TypedArrayPrototypeGetBuffer(float16bitsArray), TypedArrayPrototypeGetByteOffset(float16bitsArray), TypedArrayPrototypeGetLength(float16bitsArray));\n    const cloned = new Float16Array(TypedArrayPrototypeGetBuffer(TypedArrayPrototypeSlice(uint16)));\n    const clonedFloat16bitsArray = getFloat16BitsArray(cloned);\n    TypedArrayPrototypeSort(clonedFloat16bitsArray, (x, y) => {\n      return sortCompare(convertToNumber(x), convertToNumber(y));\n    });\n    return cloned;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.slice */\n  slice(start, end) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const Constructor = SpeciesConstructor(float16bitsArray, Float16Array);\n\n    // for optimization\n    if (Constructor === Float16Array) {\n      const uint16 = new NativeUint16Array(TypedArrayPrototypeGetBuffer(float16bitsArray), TypedArrayPrototypeGetByteOffset(float16bitsArray), TypedArrayPrototypeGetLength(float16bitsArray));\n      return new Float16Array(TypedArrayPrototypeGetBuffer(TypedArrayPrototypeSlice(uint16, start, end)));\n    }\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const relativeStart = ToIntegerOrInfinity(start);\n    const relativeEnd = end === undefined ? length : ToIntegerOrInfinity(end);\n    let k;\n    if (relativeStart === -Infinity) {\n      k = 0;\n    } else if (relativeStart < 0) {\n      k = length + relativeStart > 0 ? length + relativeStart : 0;\n    } else {\n      k = length < relativeStart ? length : relativeStart;\n    }\n    let final;\n    if (relativeEnd === -Infinity) {\n      final = 0;\n    } else if (relativeEnd < 0) {\n      final = length + relativeEnd > 0 ? length + relativeEnd : 0;\n    } else {\n      final = length < relativeEnd ? length : relativeEnd;\n    }\n    const count = final - k > 0 ? final - k : 0;\n    const array = new Constructor(count);\n    assertSpeciesTypedArray(array, count);\n    if (count === 0) {\n      return array;\n    }\n    const buffer = TypedArrayPrototypeGetBuffer(float16bitsArray);\n    if (IsDetachedBuffer(buffer)) {\n      throw NativeTypeError(ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER);\n    }\n    let n = 0;\n    while (k < final) {\n      array[n] = convertToNumber(float16bitsArray[k]);\n      ++k;\n      ++n;\n    }\n    return /** @type {any} */array;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.subarray */\n  subarray(begin, end) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const Constructor = SpeciesConstructor(float16bitsArray, Float16Array);\n    const uint16 = new NativeUint16Array(TypedArrayPrototypeGetBuffer(float16bitsArray), TypedArrayPrototypeGetByteOffset(float16bitsArray), TypedArrayPrototypeGetLength(float16bitsArray));\n    const uint16Subarray = TypedArrayPrototypeSubarray(uint16, begin, end);\n    const array = new Constructor(TypedArrayPrototypeGetBuffer(uint16Subarray), TypedArrayPrototypeGetByteOffset(uint16Subarray), TypedArrayPrototypeGetLength(uint16Subarray));\n    assertSpeciesTypedArray(array);\n    return /** @type {any} */array;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.indexof */\n  indexOf(element, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    let from = ToIntegerOrInfinity(opts[0]);\n    if (from === Infinity) {\n      return -1;\n    }\n    if (from < 0) {\n      from += length;\n      if (from < 0) {\n        from = 0;\n      }\n    }\n    for (let i = from; i < length; ++i) {\n      if (ObjectHasOwn(float16bitsArray, i) && convertToNumber(float16bitsArray[i]) === element) {\n        return i;\n      }\n    }\n    return -1;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.lastindexof */\n  lastIndexOf(element, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    let from = opts.length >= 1 ? ToIntegerOrInfinity(opts[0]) : length - 1;\n    if (from === -Infinity) {\n      return -1;\n    }\n    if (from >= 0) {\n      from = from < length - 1 ? from : length - 1;\n    } else {\n      from += length;\n    }\n    for (let i = from; i >= 0; --i) {\n      if (ObjectHasOwn(float16bitsArray, i) && convertToNumber(float16bitsArray[i]) === element) {\n        return i;\n      }\n    }\n    return -1;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.includes */\n  includes(element, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    let from = ToIntegerOrInfinity(opts[0]);\n    if (from === Infinity) {\n      return false;\n    }\n    if (from < 0) {\n      from += length;\n      if (from < 0) {\n        from = 0;\n      }\n    }\n    const isNaN = NumberIsNaN(element);\n    for (let i = from; i < length; ++i) {\n      const value = convertToNumber(float16bitsArray[i]);\n      if (isNaN && NumberIsNaN(value)) {\n        return true;\n      }\n      if (value === element) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.join */\n  join(separator) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const array = copyToArray(float16bitsArray);\n    return ArrayPrototypeJoin(array, separator);\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.tolocalestring */\n  toLocaleString(...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const array = copyToArray(float16bitsArray);\n    return ArrayPrototypeToLocaleString(array, ...safeIfNeeded(opts));\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-get-%typedarray%.prototype-@@tostringtag */\n  get [SymbolToStringTag]() {\n    if (isFloat16Array(this)) {\n      return /** @type {any} */\"Float16Array\";\n    }\n  }\n}\n\n/** @see https://tc39.es/ecma262/#sec-typedarray.bytes_per_element */\nObjectDefineProperty(Float16Array, \"BYTES_PER_ELEMENT\", {\n  value: BYTES_PER_ELEMENT\n});\n\n// limitation: It is peaked by `Object.getOwnPropertySymbols(Float16Array)` and `Reflect.ownKeys(Float16Array)`\nObjectDefineProperty(Float16Array, brand, {});\n\n/** @see https://tc39.es/ecma262/#sec-properties-of-the-typedarray-constructors */\nReflectSetPrototypeOf(Float16Array, TypedArray);\nconst Float16ArrayPrototype = Float16Array.prototype;\n\n/** @see https://tc39.es/ecma262/#sec-typedarray.prototype.bytes_per_element */\nObjectDefineProperty(Float16ArrayPrototype, \"BYTES_PER_ELEMENT\", {\n  value: BYTES_PER_ELEMENT\n});\n\n/** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype-@@iterator */\nObjectDefineProperty(Float16ArrayPrototype, SymbolIterator, {\n  value: Float16ArrayPrototype.values,\n  writable: true,\n  configurable: true\n});\nReflectSetPrototypeOf(Float16ArrayPrototype, TypedArrayPrototype);", "import { safeIfNeeded } from \"./_util/arrayIterator.mjs\";\nimport { convertToNumber, roundToFloat16Bits } from \"./_util/converter.mjs\";\nimport { DataViewPrototypeGetUint16, DataViewPrototypeSetUint16 } from \"./_util/primordials.mjs\";\n\n/**\n * returns an unsigned 16-bit float at the specified byte offset from the start of the DataView\n * @param {DataView} dataView\n * @param {number} byteOffset\n * @param {[boolean]} opts\n * @returns {number}\n */\nexport function getFloat16(dataView, byteOffset, ...opts) {\n  return convertToNumber(DataViewPrototypeGetUint16(dataView, byteOffset, ...safeIfNeeded(opts)));\n}\n\n/**\n * stores an unsigned 16-bit float value at the specified byte offset from the start of the DataView\n * @param {DataView} dataView\n * @param {number} byteOffset\n * @param {number} value\n * @param {[boolean]} opts\n */\nexport function setFloat16(dataView, byteOffset, value, ...opts) {\n  return DataViewPrototypeSetUint16(dataView, byteOffset, roundToFloat16Bits(value), ...safeIfNeeded(opts));\n}", "/** @module geotiffimage */\nimport { getFloat16 } from '@petamoriken/float16';\nimport getAttribute from 'xml-utils/get-attribute.js';\nimport findTagsByName from 'xml-utils/find-tags-by-name.js';\nimport { photometricInterpretations, ExtraSamplesValues } from './globals.js';\nimport { fromWhiteIsZero, fromBlackIsZero, fromPalette, fromCMYK, fromYCbCr, fromCIELab } from './rgb.js';\nimport { getDecoder } from './compression/index.js';\nimport { resample, resampleInterleaved } from './resample.js';\n\n/**\n * @typedef {Object} ReadRasterOptions\n * @property {Array<number>} [window=whole window] the subset to read data from in pixels.\n * @property {Array<number>} [bbox=whole image] the subset to read data from in\n *                                           geographical coordinates.\n * @property {Array<number>} [samples=all samples] the selection of samples to read from. Default is all samples.\n * @property {boolean} [interleave=false] whether the data shall be read\n *                                             in one single array or separate\n *                                             arrays.\n * @property {Pool} [pool=null] The optional decoder pool to use.\n * @property {number} [width] The desired width of the output. When the width is not the\n *                                 same as the images, resampling will be performed.\n * @property {number} [height] The desired height of the output. When the width is not the\n *                                  same as the images, resampling will be performed.\n * @property {string} [resampleMethod='nearest'] The desired resampling method.\n * @property {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n *                                       to be aborted\n * @property {number|number[]} [fillValue] The value to use for parts of the image\n *                                              outside of the images extent. When multiple\n *                                              samples are requested, an array of fill values\n *                                              can be passed.\n */\n\n/** @typedef {import(\"./geotiff.js\").TypedArray} TypedArray */\n/** @typedef {import(\"./geotiff.js\").ReadRasterResult} ReadRasterResult */\n\nfunction sum(array, start, end) {\n  let s = 0;\n  for (let i = start; i < end; ++i) {\n    s += array[i];\n  }\n  return s;\n}\nfunction arrayForType(format, bitsPerSample, size) {\n  switch (format) {\n    case 1:\n      // unsigned integer data\n      if (bitsPerSample <= 8) {\n        return new Uint8Array(size);\n      } else if (bitsPerSample <= 16) {\n        return new Uint16Array(size);\n      } else if (bitsPerSample <= 32) {\n        return new Uint32Array(size);\n      }\n      break;\n    case 2:\n      // twos complement signed integer data\n      if (bitsPerSample === 8) {\n        return new Int8Array(size);\n      } else if (bitsPerSample === 16) {\n        return new Int16Array(size);\n      } else if (bitsPerSample === 32) {\n        return new Int32Array(size);\n      }\n      break;\n    case 3:\n      // floating point data\n      switch (bitsPerSample) {\n        case 16:\n        case 32:\n          return new Float32Array(size);\n        case 64:\n          return new Float64Array(size);\n        default:\n          break;\n      }\n      break;\n    default:\n      break;\n  }\n  throw Error('Unsupported data format/bitsPerSample');\n}\nfunction needsNormalization(format, bitsPerSample) {\n  if ((format === 1 || format === 2) && bitsPerSample <= 32 && bitsPerSample % 8 === 0) {\n    return false;\n  } else if (format === 3 && (bitsPerSample === 16 || bitsPerSample === 32 || bitsPerSample === 64)) {\n    return false;\n  }\n  return true;\n}\nfunction normalizeArray(inBuffer, format, planarConfiguration, samplesPerPixel, bitsPerSample, tileWidth, tileHeight) {\n  // const inByteArray = new Uint8Array(inBuffer);\n  const view = new DataView(inBuffer);\n  const outSize = planarConfiguration === 2 ? tileHeight * tileWidth : tileHeight * tileWidth * samplesPerPixel;\n  const samplesToTransfer = planarConfiguration === 2 ? 1 : samplesPerPixel;\n  const outArray = arrayForType(format, bitsPerSample, outSize);\n  // let pixel = 0;\n\n  const bitMask = parseInt('1'.repeat(bitsPerSample), 2);\n  if (format === 1) {\n    // unsigned integer\n    // translation of https://github.com/OSGeo/gdal/blob/master/gdal/frmts/gtiff/geotiff.cpp#L7337\n    let pixelBitSkip;\n    // let sampleBitOffset = 0;\n    if (planarConfiguration === 1) {\n      pixelBitSkip = samplesPerPixel * bitsPerSample;\n      // sampleBitOffset = (samplesPerPixel - 1) * bitsPerSample;\n    } else {\n      pixelBitSkip = bitsPerSample;\n    }\n\n    // Bits per line rounds up to next byte boundary.\n    let bitsPerLine = tileWidth * pixelBitSkip;\n    if ((bitsPerLine & 7) !== 0) {\n      bitsPerLine = bitsPerLine + 7 & ~7;\n    }\n    for (let y = 0; y < tileHeight; ++y) {\n      const lineBitOffset = y * bitsPerLine;\n      for (let x = 0; x < tileWidth; ++x) {\n        const pixelBitOffset = lineBitOffset + x * samplesToTransfer * bitsPerSample;\n        for (let i = 0; i < samplesToTransfer; ++i) {\n          const bitOffset = pixelBitOffset + i * bitsPerSample;\n          const outIndex = (y * tileWidth + x) * samplesToTransfer + i;\n          const byteOffset = Math.floor(bitOffset / 8);\n          const innerBitOffset = bitOffset % 8;\n          if (innerBitOffset + bitsPerSample <= 8) {\n            outArray[outIndex] = view.getUint8(byteOffset) >> 8 - bitsPerSample - innerBitOffset & bitMask;\n          } else if (innerBitOffset + bitsPerSample <= 16) {\n            outArray[outIndex] = view.getUint16(byteOffset) >> 16 - bitsPerSample - innerBitOffset & bitMask;\n          } else if (innerBitOffset + bitsPerSample <= 24) {\n            const raw = view.getUint16(byteOffset) << 8 | view.getUint8(byteOffset + 2);\n            outArray[outIndex] = raw >> 24 - bitsPerSample - innerBitOffset & bitMask;\n          } else {\n            outArray[outIndex] = view.getUint32(byteOffset) >> 32 - bitsPerSample - innerBitOffset & bitMask;\n          }\n\n          // let outWord = 0;\n          // for (let bit = 0; bit < bitsPerSample; ++bit) {\n          //   if (inByteArray[bitOffset >> 3]\n          //     & (0x80 >> (bitOffset & 7))) {\n          //     outWord |= (1 << (bitsPerSample - 1 - bit));\n          //   }\n          //   ++bitOffset;\n          // }\n\n          // outArray[outIndex] = outWord;\n          // outArray[pixel] = outWord;\n          // pixel += 1;\n        }\n        // bitOffset = bitOffset + pixelBitSkip - bitsPerSample;\n      }\n    }\n  } else if (format === 3) {// floating point\n    // Float16 is handled elsewhere\n    // normalize 16/24 bit floats to 32 bit floats in the array\n    // console.time();\n    // if (bitsPerSample === 16) {\n    //   for (let byte = 0, outIndex = 0; byte < inBuffer.byteLength; byte += 2, ++outIndex) {\n    //     outArray[outIndex] = getFloat16(view, byte);\n    //   }\n    // }\n    // console.timeEnd()\n  }\n  return outArray.buffer;\n}\n\n/**\n * GeoTIFF sub-file image.\n */\nclass GeoTIFFImage {\n  /**\n   * @constructor\n   * @param {Object} fileDirectory The parsed file directory\n   * @param {Object} geoKeys The parsed geo-keys\n   * @param {DataView} dataView The DataView for the underlying file.\n   * @param {Boolean} littleEndian Whether the file is encoded in little or big endian\n   * @param {Boolean} cache Whether or not decoded tiles shall be cached\n   * @param {import('./source/basesource').BaseSource} source The datasource to read from\n   */\n  constructor(fileDirectory, geoKeys, dataView, littleEndian, cache, source) {\n    this.fileDirectory = fileDirectory;\n    this.geoKeys = geoKeys;\n    this.dataView = dataView;\n    this.littleEndian = littleEndian;\n    this.tiles = cache ? {} : null;\n    this.isTiled = !fileDirectory.StripOffsets;\n    const planarConfiguration = fileDirectory.PlanarConfiguration;\n    this.planarConfiguration = typeof planarConfiguration === 'undefined' ? 1 : planarConfiguration;\n    if (this.planarConfiguration !== 1 && this.planarConfiguration !== 2) {\n      throw new Error('Invalid planar configuration.');\n    }\n    this.source = source;\n  }\n\n  /**\n   * Returns the associated parsed file directory.\n   * @returns {Object} the parsed file directory\n   */\n  getFileDirectory() {\n    return this.fileDirectory;\n  }\n\n  /**\n   * Returns the associated parsed geo keys.\n   * @returns {Object} the parsed geo keys\n   */\n  getGeoKeys() {\n    return this.geoKeys;\n  }\n\n  /**\n   * Returns the width of the image.\n   * @returns {Number} the width of the image\n   */\n  getWidth() {\n    return this.fileDirectory.ImageWidth;\n  }\n\n  /**\n   * Returns the height of the image.\n   * @returns {Number} the height of the image\n   */\n  getHeight() {\n    return this.fileDirectory.ImageLength;\n  }\n\n  /**\n   * Returns the number of samples per pixel.\n   * @returns {Number} the number of samples per pixel\n   */\n  getSamplesPerPixel() {\n    return typeof this.fileDirectory.SamplesPerPixel !== 'undefined' ? this.fileDirectory.SamplesPerPixel : 1;\n  }\n\n  /**\n   * Returns the width of each tile.\n   * @returns {Number} the width of each tile\n   */\n  getTileWidth() {\n    return this.isTiled ? this.fileDirectory.TileWidth : this.getWidth();\n  }\n\n  /**\n   * Returns the height of each tile.\n   * @returns {Number} the height of each tile\n   */\n  getTileHeight() {\n    if (this.isTiled) {\n      return this.fileDirectory.TileLength;\n    }\n    if (typeof this.fileDirectory.RowsPerStrip !== 'undefined') {\n      return Math.min(this.fileDirectory.RowsPerStrip, this.getHeight());\n    }\n    return this.getHeight();\n  }\n  getBlockWidth() {\n    return this.getTileWidth();\n  }\n  getBlockHeight(y) {\n    if (this.isTiled || (y + 1) * this.getTileHeight() <= this.getHeight()) {\n      return this.getTileHeight();\n    } else {\n      return this.getHeight() - y * this.getTileHeight();\n    }\n  }\n\n  /**\n   * Calculates the number of bytes for each pixel across all samples. Only full\n   * bytes are supported, an exception is thrown when this is not the case.\n   * @returns {Number} the bytes per pixel\n   */\n  getBytesPerPixel() {\n    let bytes = 0;\n    for (let i = 0; i < this.fileDirectory.BitsPerSample.length; ++i) {\n      bytes += this.getSampleByteSize(i);\n    }\n    return bytes;\n  }\n  getSampleByteSize(i) {\n    if (i >= this.fileDirectory.BitsPerSample.length) {\n      throw new RangeError(`Sample index ${i} is out of range.`);\n    }\n    return Math.ceil(this.fileDirectory.BitsPerSample[i] / 8);\n  }\n  getReaderForSample(sampleIndex) {\n    const format = this.fileDirectory.SampleFormat ? this.fileDirectory.SampleFormat[sampleIndex] : 1;\n    const bitsPerSample = this.fileDirectory.BitsPerSample[sampleIndex];\n    switch (format) {\n      case 1:\n        // unsigned integer data\n        if (bitsPerSample <= 8) {\n          return DataView.prototype.getUint8;\n        } else if (bitsPerSample <= 16) {\n          return DataView.prototype.getUint16;\n        } else if (bitsPerSample <= 32) {\n          return DataView.prototype.getUint32;\n        }\n        break;\n      case 2:\n        // twos complement signed integer data\n        if (bitsPerSample <= 8) {\n          return DataView.prototype.getInt8;\n        } else if (bitsPerSample <= 16) {\n          return DataView.prototype.getInt16;\n        } else if (bitsPerSample <= 32) {\n          return DataView.prototype.getInt32;\n        }\n        break;\n      case 3:\n        switch (bitsPerSample) {\n          case 16:\n            return function (offset, littleEndian) {\n              return getFloat16(this, offset, littleEndian);\n            };\n          case 32:\n            return DataView.prototype.getFloat32;\n          case 64:\n            return DataView.prototype.getFloat64;\n          default:\n            break;\n        }\n        break;\n      default:\n        break;\n    }\n    throw Error('Unsupported data format/bitsPerSample');\n  }\n  getSampleFormat(sampleIndex = 0) {\n    return this.fileDirectory.SampleFormat ? this.fileDirectory.SampleFormat[sampleIndex] : 1;\n  }\n  getBitsPerSample(sampleIndex = 0) {\n    return this.fileDirectory.BitsPerSample[sampleIndex];\n  }\n  getArrayForSample(sampleIndex, size) {\n    const format = this.getSampleFormat(sampleIndex);\n    const bitsPerSample = this.getBitsPerSample(sampleIndex);\n    return arrayForType(format, bitsPerSample, size);\n  }\n\n  /**\n   * Returns the decoded strip or tile.\n   * @param {Number} x the strip or tile x-offset\n   * @param {Number} y the tile y-offset (0 for stripped images)\n   * @param {Number} sample the sample to get for separated samples\n   * @param {import(\"./geotiff\").Pool|import(\"./geotiff\").BaseDecoder} poolOrDecoder the decoder or decoder pool\n   * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n   *                               to be aborted\n   * @returns {Promise.<ArrayBuffer>}\n   */\n  async getTileOrStrip(x, y, sample, poolOrDecoder, signal) {\n    const numTilesPerRow = Math.ceil(this.getWidth() / this.getTileWidth());\n    const numTilesPerCol = Math.ceil(this.getHeight() / this.getTileHeight());\n    let index;\n    const {\n      tiles\n    } = this;\n    if (this.planarConfiguration === 1) {\n      index = y * numTilesPerRow + x;\n    } else if (this.planarConfiguration === 2) {\n      index = sample * numTilesPerRow * numTilesPerCol + y * numTilesPerRow + x;\n    }\n    let offset;\n    let byteCount;\n    if (this.isTiled) {\n      offset = this.fileDirectory.TileOffsets[index];\n      byteCount = this.fileDirectory.TileByteCounts[index];\n    } else {\n      offset = this.fileDirectory.StripOffsets[index];\n      byteCount = this.fileDirectory.StripByteCounts[index];\n    }\n    const slice = (await this.source.fetch([{\n      offset,\n      length: byteCount\n    }], signal))[0];\n    let request;\n    if (tiles === null || !tiles[index]) {\n      // resolve each request by potentially applying array normalization\n      request = (async () => {\n        let data = await poolOrDecoder.decode(this.fileDirectory, slice);\n        const sampleFormat = this.getSampleFormat();\n        const bitsPerSample = this.getBitsPerSample();\n        if (needsNormalization(sampleFormat, bitsPerSample)) {\n          data = normalizeArray(data, sampleFormat, this.planarConfiguration, this.getSamplesPerPixel(), bitsPerSample, this.getTileWidth(), this.getBlockHeight(y));\n        }\n        return data;\n      })();\n\n      // set the cache\n      if (tiles !== null) {\n        tiles[index] = request;\n      }\n    } else {\n      // get from the cache\n      request = tiles[index];\n    }\n\n    // cache the tile request\n    return {\n      x,\n      y,\n      sample,\n      data: await request\n    };\n  }\n\n  /**\n   * Internal read function.\n   * @private\n   * @param {Array} imageWindow The image window in pixel coordinates\n   * @param {Array} samples The selected samples (0-based indices)\n   * @param {TypedArray|TypedArray[]} valueArrays The array(s) to write into\n   * @param {Boolean} interleave Whether or not to write in an interleaved manner\n   * @param {import(\"./geotiff\").Pool|AbstractDecoder} poolOrDecoder the decoder or decoder pool\n   * @param {number} width the width of window to be read into\n   * @param {number} height the height of window to be read into\n   * @param {number} resampleMethod the resampling method to be used when interpolating\n   * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n   *                               to be aborted\n   * @returns {Promise<ReadRasterResult>}\n   */\n  async _readRaster(imageWindow, samples, valueArrays, interleave, poolOrDecoder, width, height, resampleMethod, signal) {\n    const tileWidth = this.getTileWidth();\n    const tileHeight = this.getTileHeight();\n    const imageWidth = this.getWidth();\n    const imageHeight = this.getHeight();\n    const minXTile = Math.max(Math.floor(imageWindow[0] / tileWidth), 0);\n    const maxXTile = Math.min(Math.ceil(imageWindow[2] / tileWidth), Math.ceil(imageWidth / tileWidth));\n    const minYTile = Math.max(Math.floor(imageWindow[1] / tileHeight), 0);\n    const maxYTile = Math.min(Math.ceil(imageWindow[3] / tileHeight), Math.ceil(imageHeight / tileHeight));\n    const windowWidth = imageWindow[2] - imageWindow[0];\n    let bytesPerPixel = this.getBytesPerPixel();\n    const srcSampleOffsets = [];\n    const sampleReaders = [];\n    for (let i = 0; i < samples.length; ++i) {\n      if (this.planarConfiguration === 1) {\n        srcSampleOffsets.push(sum(this.fileDirectory.BitsPerSample, 0, samples[i]) / 8);\n      } else {\n        srcSampleOffsets.push(0);\n      }\n      sampleReaders.push(this.getReaderForSample(samples[i]));\n    }\n    const promises = [];\n    const {\n      littleEndian\n    } = this;\n    for (let yTile = minYTile; yTile < maxYTile; ++yTile) {\n      for (let xTile = minXTile; xTile < maxXTile; ++xTile) {\n        let getPromise;\n        if (this.planarConfiguration === 1) {\n          getPromise = this.getTileOrStrip(xTile, yTile, 0, poolOrDecoder, signal);\n        }\n        for (let sampleIndex = 0; sampleIndex < samples.length; ++sampleIndex) {\n          const si = sampleIndex;\n          const sample = samples[sampleIndex];\n          if (this.planarConfiguration === 2) {\n            bytesPerPixel = this.getSampleByteSize(sample);\n            getPromise = this.getTileOrStrip(xTile, yTile, sample, poolOrDecoder, signal);\n          }\n          const promise = getPromise.then(tile => {\n            const buffer = tile.data;\n            const dataView = new DataView(buffer);\n            const blockHeight = this.getBlockHeight(tile.y);\n            const firstLine = tile.y * tileHeight;\n            const firstCol = tile.x * tileWidth;\n            const lastLine = firstLine + blockHeight;\n            const lastCol = (tile.x + 1) * tileWidth;\n            const reader = sampleReaders[si];\n            const ymax = Math.min(blockHeight, blockHeight - (lastLine - imageWindow[3]), imageHeight - firstLine);\n            const xmax = Math.min(tileWidth, tileWidth - (lastCol - imageWindow[2]), imageWidth - firstCol);\n            for (let y = Math.max(0, imageWindow[1] - firstLine); y < ymax; ++y) {\n              for (let x = Math.max(0, imageWindow[0] - firstCol); x < xmax; ++x) {\n                const pixelOffset = (y * tileWidth + x) * bytesPerPixel;\n                const value = reader.call(dataView, pixelOffset + srcSampleOffsets[si], littleEndian);\n                let windowCoordinate;\n                if (interleave) {\n                  windowCoordinate = (y + firstLine - imageWindow[1]) * windowWidth * samples.length + (x + firstCol - imageWindow[0]) * samples.length + si;\n                  valueArrays[windowCoordinate] = value;\n                } else {\n                  windowCoordinate = (y + firstLine - imageWindow[1]) * windowWidth + x + firstCol - imageWindow[0];\n                  valueArrays[si][windowCoordinate] = value;\n                }\n              }\n            }\n          });\n          promises.push(promise);\n        }\n      }\n    }\n    await Promise.all(promises);\n    if (width && imageWindow[2] - imageWindow[0] !== width || height && imageWindow[3] - imageWindow[1] !== height) {\n      let resampled;\n      if (interleave) {\n        resampled = resampleInterleaved(valueArrays, imageWindow[2] - imageWindow[0], imageWindow[3] - imageWindow[1], width, height, samples.length, resampleMethod);\n      } else {\n        resampled = resample(valueArrays, imageWindow[2] - imageWindow[0], imageWindow[3] - imageWindow[1], width, height, resampleMethod);\n      }\n      resampled.width = width;\n      resampled.height = height;\n      return resampled;\n    }\n    valueArrays.width = width || imageWindow[2] - imageWindow[0];\n    valueArrays.height = height || imageWindow[3] - imageWindow[1];\n    return valueArrays;\n  }\n\n  /**\n   * Reads raster data from the image. This function reads all selected samples\n   * into separate arrays of the correct type for that sample or into a single\n   * combined array when `interleave` is set. When provided, only a subset\n   * of the raster is read for each sample.\n   *\n   * @param {ReadRasterOptions} [options={}] optional parameters\n   * @returns {Promise<ReadRasterResult>} the decoded arrays as a promise\n   */\n  async readRasters({\n    window: wnd,\n    samples = [],\n    interleave,\n    pool = null,\n    width,\n    height,\n    resampleMethod,\n    fillValue,\n    signal\n  } = {}) {\n    const imageWindow = wnd || [0, 0, this.getWidth(), this.getHeight()];\n\n    // check parameters\n    if (imageWindow[0] > imageWindow[2] || imageWindow[1] > imageWindow[3]) {\n      throw new Error('Invalid subsets');\n    }\n    const imageWindowWidth = imageWindow[2] - imageWindow[0];\n    const imageWindowHeight = imageWindow[3] - imageWindow[1];\n    const numPixels = imageWindowWidth * imageWindowHeight;\n    const samplesPerPixel = this.getSamplesPerPixel();\n    if (!samples || !samples.length) {\n      for (let i = 0; i < samplesPerPixel; ++i) {\n        samples.push(i);\n      }\n    } else {\n      for (let i = 0; i < samples.length; ++i) {\n        if (samples[i] >= samplesPerPixel) {\n          return Promise.reject(new RangeError(`Invalid sample index '${samples[i]}'.`));\n        }\n      }\n    }\n    let valueArrays;\n    if (interleave) {\n      const format = this.fileDirectory.SampleFormat ? Math.max.apply(null, this.fileDirectory.SampleFormat) : 1;\n      const bitsPerSample = Math.max.apply(null, this.fileDirectory.BitsPerSample);\n      valueArrays = arrayForType(format, bitsPerSample, numPixels * samples.length);\n      if (fillValue) {\n        valueArrays.fill(fillValue);\n      }\n    } else {\n      valueArrays = [];\n      for (let i = 0; i < samples.length; ++i) {\n        const valueArray = this.getArrayForSample(samples[i], numPixels);\n        if (Array.isArray(fillValue) && i < fillValue.length) {\n          valueArray.fill(fillValue[i]);\n        } else if (fillValue && !Array.isArray(fillValue)) {\n          valueArray.fill(fillValue);\n        }\n        valueArrays.push(valueArray);\n      }\n    }\n    const poolOrDecoder = pool || (await getDecoder(this.fileDirectory));\n    const result = await this._readRaster(imageWindow, samples, valueArrays, interleave, poolOrDecoder, width, height, resampleMethod, signal);\n    return result;\n  }\n\n  /**\n   * Reads raster data from the image as RGB. The result is always an\n   * interleaved typed array.\n   * Colorspaces other than RGB will be transformed to RGB, color maps expanded.\n   * When no other method is applicable, the first sample is used to produce a\n   * grayscale image.\n   * When provided, only a subset of the raster is read for each sample.\n   *\n   * @param {Object} [options] optional parameters\n   * @param {Array<number>} [options.window] the subset to read data from in pixels.\n   * @param {boolean} [options.interleave=true] whether the data shall be read\n   *                                             in one single array or separate\n   *                                             arrays.\n   * @param {import(\"./geotiff\").Pool} [options.pool=null] The optional decoder pool to use.\n   * @param {number} [options.width] The desired width of the output. When the width is no the\n   *                                 same as the images, resampling will be performed.\n   * @param {number} [options.height] The desired height of the output. When the width is no the\n   *                                  same as the images, resampling will be performed.\n   * @param {string} [options.resampleMethod='nearest'] The desired resampling method.\n   * @param {boolean} [options.enableAlpha=false] Enable reading alpha channel if present.\n   * @param {AbortSignal} [options.signal] An AbortSignal that may be signalled if the request is\n   *                                       to be aborted\n   * @returns {Promise<ReadRasterResult>} the RGB array as a Promise\n   */\n  async readRGB({\n    window,\n    interleave = true,\n    pool = null,\n    width,\n    height,\n    resampleMethod,\n    enableAlpha = false,\n    signal\n  } = {}) {\n    const imageWindow = window || [0, 0, this.getWidth(), this.getHeight()];\n\n    // check parameters\n    if (imageWindow[0] > imageWindow[2] || imageWindow[1] > imageWindow[3]) {\n      throw new Error('Invalid subsets');\n    }\n    const pi = this.fileDirectory.PhotometricInterpretation;\n    if (pi === photometricInterpretations.RGB) {\n      let s = [0, 1, 2];\n      if (!(this.fileDirectory.ExtraSamples === ExtraSamplesValues.Unspecified) && enableAlpha) {\n        s = [];\n        for (let i = 0; i < this.fileDirectory.BitsPerSample.length; i += 1) {\n          s.push(i);\n        }\n      }\n      return this.readRasters({\n        window,\n        interleave,\n        samples: s,\n        pool,\n        width,\n        height,\n        resampleMethod,\n        signal\n      });\n    }\n    let samples;\n    switch (pi) {\n      case photometricInterpretations.WhiteIsZero:\n      case photometricInterpretations.BlackIsZero:\n      case photometricInterpretations.Palette:\n        samples = [0];\n        break;\n      case photometricInterpretations.CMYK:\n        samples = [0, 1, 2, 3];\n        break;\n      case photometricInterpretations.YCbCr:\n      case photometricInterpretations.CIELab:\n        samples = [0, 1, 2];\n        break;\n      default:\n        throw new Error('Invalid or unsupported photometric interpretation.');\n    }\n    const subOptions = {\n      window: imageWindow,\n      interleave: true,\n      samples,\n      pool,\n      width,\n      height,\n      resampleMethod,\n      signal\n    };\n    const {\n      fileDirectory\n    } = this;\n    const raster = await this.readRasters(subOptions);\n    const max = 2 ** this.fileDirectory.BitsPerSample[0];\n    let data;\n    switch (pi) {\n      case photometricInterpretations.WhiteIsZero:\n        data = fromWhiteIsZero(raster, max);\n        break;\n      case photometricInterpretations.BlackIsZero:\n        data = fromBlackIsZero(raster, max);\n        break;\n      case photometricInterpretations.Palette:\n        data = fromPalette(raster, fileDirectory.ColorMap);\n        break;\n      case photometricInterpretations.CMYK:\n        data = fromCMYK(raster);\n        break;\n      case photometricInterpretations.YCbCr:\n        data = fromYCbCr(raster);\n        break;\n      case photometricInterpretations.CIELab:\n        data = fromCIELab(raster);\n        break;\n      default:\n        throw new Error('Unsupported photometric interpretation.');\n    }\n\n    // if non-interleaved data is requested, we must split the channels\n    // into their respective arrays\n    if (!interleave) {\n      const red = new Uint8Array(data.length / 3);\n      const green = new Uint8Array(data.length / 3);\n      const blue = new Uint8Array(data.length / 3);\n      for (let i = 0, j = 0; i < data.length; i += 3, ++j) {\n        red[j] = data[i];\n        green[j] = data[i + 1];\n        blue[j] = data[i + 2];\n      }\n      data = [red, green, blue];\n    }\n    data.width = raster.width;\n    data.height = raster.height;\n    return data;\n  }\n\n  /**\n   * Returns an array of tiepoints.\n   * @returns {Object[]}\n   */\n  getTiePoints() {\n    if (!this.fileDirectory.ModelTiepoint) {\n      return [];\n    }\n    const tiePoints = [];\n    for (let i = 0; i < this.fileDirectory.ModelTiepoint.length; i += 6) {\n      tiePoints.push({\n        i: this.fileDirectory.ModelTiepoint[i],\n        j: this.fileDirectory.ModelTiepoint[i + 1],\n        k: this.fileDirectory.ModelTiepoint[i + 2],\n        x: this.fileDirectory.ModelTiepoint[i + 3],\n        y: this.fileDirectory.ModelTiepoint[i + 4],\n        z: this.fileDirectory.ModelTiepoint[i + 5]\n      });\n    }\n    return tiePoints;\n  }\n\n  /**\n   * Returns the parsed GDAL metadata items.\n   *\n   * If sample is passed to null, dataset-level metadata will be returned.\n   * Otherwise only metadata specific to the provided sample will be returned.\n   *\n   * @param {number} [sample=null] The sample index.\n   * @returns {Object}\n   */\n  getGDALMetadata(sample = null) {\n    const metadata = {};\n    if (!this.fileDirectory.GDAL_METADATA) {\n      return null;\n    }\n    const string = this.fileDirectory.GDAL_METADATA;\n    let items = findTagsByName(string, 'Item');\n    if (sample === null) {\n      items = items.filter(item => getAttribute(item, 'sample') === undefined);\n    } else {\n      items = items.filter(item => Number(getAttribute(item, 'sample')) === sample);\n    }\n    for (let i = 0; i < items.length; ++i) {\n      const item = items[i];\n      metadata[getAttribute(item, 'name')] = item.inner;\n    }\n    return metadata;\n  }\n\n  /**\n   * Returns the GDAL nodata value\n   * @returns {number|null}\n   */\n  getGDALNoData() {\n    if (!this.fileDirectory.GDAL_NODATA) {\n      return null;\n    }\n    const string = this.fileDirectory.GDAL_NODATA;\n    return Number(string.substring(0, string.length - 1));\n  }\n\n  /**\n   * Returns the image origin as a XYZ-vector. When the image has no affine\n   * transformation, then an exception is thrown.\n   * @returns {Array<number>} The origin as a vector\n   */\n  getOrigin() {\n    const tiePoints = this.fileDirectory.ModelTiepoint;\n    const modelTransformation = this.fileDirectory.ModelTransformation;\n    if (tiePoints && tiePoints.length === 6) {\n      return [tiePoints[3], tiePoints[4], tiePoints[5]];\n    }\n    if (modelTransformation) {\n      return [modelTransformation[3], modelTransformation[7], modelTransformation[11]];\n    }\n    throw new Error('The image does not have an affine transformation.');\n  }\n\n  /**\n   * Returns the image resolution as a XYZ-vector. When the image has no affine\n   * transformation, then an exception is thrown.\n   * @param {GeoTIFFImage} [referenceImage=null] A reference image to calculate the resolution from\n   *                                             in cases when the current image does not have the\n   *                                             required tags on its own.\n   * @returns {Array<number>} The resolution as a vector\n   */\n  getResolution(referenceImage = null) {\n    const modelPixelScale = this.fileDirectory.ModelPixelScale;\n    const modelTransformation = this.fileDirectory.ModelTransformation;\n    if (modelPixelScale) {\n      return [modelPixelScale[0], -modelPixelScale[1], modelPixelScale[2]];\n    }\n    if (modelTransformation) {\n      if (modelTransformation[1] === 0 && modelTransformation[4] === 0) {\n        return [modelTransformation[0], -modelTransformation[5], modelTransformation[10]];\n      }\n      return [Math.sqrt(modelTransformation[0] * modelTransformation[0] + modelTransformation[4] * modelTransformation[4]), -Math.sqrt(modelTransformation[1] * modelTransformation[1] + modelTransformation[5] * modelTransformation[5]), modelTransformation[10]];\n    }\n    if (referenceImage) {\n      const [refResX, refResY, refResZ] = referenceImage.getResolution();\n      return [refResX * referenceImage.getWidth() / this.getWidth(), refResY * referenceImage.getHeight() / this.getHeight(), refResZ * referenceImage.getWidth() / this.getWidth()];\n    }\n    throw new Error('The image does not have an affine transformation.');\n  }\n\n  /**\n   * Returns whether or not the pixels of the image depict an area (or point).\n   * @returns {Boolean} Whether the pixels are a point\n   */\n  pixelIsArea() {\n    return this.geoKeys.GTRasterTypeGeoKey === 1;\n  }\n\n  /**\n   * Returns the image bounding box as an array of 4 values: min-x, min-y,\n   * max-x and max-y. When the image has no affine transformation, then an\n   * exception is thrown.\n   * @param {boolean} [tilegrid=false] If true return extent for a tilegrid\n   *                                   without adjustment for ModelTransformation.\n   * @returns {Array<number>} The bounding box\n   */\n  getBoundingBox(tilegrid = false) {\n    const height = this.getHeight();\n    const width = this.getWidth();\n    if (this.fileDirectory.ModelTransformation && !tilegrid) {\n      // eslint-disable-next-line no-unused-vars\n      const [a, b, c, d, e, f, g, h] = this.fileDirectory.ModelTransformation;\n      const corners = [[0, 0], [0, height], [width, 0], [width, height]];\n      const projected = corners.map(([I, J]) => [d + a * I + b * J, h + e * I + f * J]);\n      const xs = projected.map(pt => pt[0]);\n      const ys = projected.map(pt => pt[1]);\n      return [Math.min(...xs), Math.min(...ys), Math.max(...xs), Math.max(...ys)];\n    } else {\n      const origin = this.getOrigin();\n      const resolution = this.getResolution();\n      const x1 = origin[0];\n      const y1 = origin[1];\n      const x2 = x1 + resolution[0] * width;\n      const y2 = y1 + resolution[1] * height;\n      return [Math.min(x1, x2), Math.min(y1, y2), Math.max(x1, x2), Math.max(y1, y2)];\n    }\n  }\n}\nexport default GeoTIFFImage;", "export function fromWhiteIsZero(raster, max) {\n  const {\n    width,\n    height\n  } = raster;\n  const rgbRaster = new Uint8Array(width * height * 3);\n  let value;\n  for (let i = 0, j = 0; i < raster.length; ++i, j += 3) {\n    value = 256 - raster[i] / max * 256;\n    rgbRaster[j] = value;\n    rgbRaster[j + 1] = value;\n    rgbRaster[j + 2] = value;\n  }\n  return rgbRaster;\n}\nexport function fromBlackIsZero(raster, max) {\n  const {\n    width,\n    height\n  } = raster;\n  const rgbRaster = new Uint8Array(width * height * 3);\n  let value;\n  for (let i = 0, j = 0; i < raster.length; ++i, j += 3) {\n    value = raster[i] / max * 256;\n    rgbRaster[j] = value;\n    rgbRaster[j + 1] = value;\n    rgbRaster[j + 2] = value;\n  }\n  return rgbRaster;\n}\nexport function fromPalette(raster, colorMap) {\n  const {\n    width,\n    height\n  } = raster;\n  const rgbRaster = new Uint8Array(width * height * 3);\n  const greenOffset = colorMap.length / 3;\n  const blueOffset = colorMap.length / 3 * 2;\n  for (let i = 0, j = 0; i < raster.length; ++i, j += 3) {\n    const mapIndex = raster[i];\n    rgbRaster[j] = colorMap[mapIndex] / 65536 * 256;\n    rgbRaster[j + 1] = colorMap[mapIndex + greenOffset] / 65536 * 256;\n    rgbRaster[j + 2] = colorMap[mapIndex + blueOffset] / 65536 * 256;\n  }\n  return rgbRaster;\n}\nexport function fromCMYK(cmykRaster) {\n  const {\n    width,\n    height\n  } = cmykRaster;\n  const rgbRaster = new Uint8Array(width * height * 3);\n  for (let i = 0, j = 0; i < cmykRaster.length; i += 4, j += 3) {\n    const c = cmykRaster[i];\n    const m = cmykRaster[i + 1];\n    const y = cmykRaster[i + 2];\n    const k = cmykRaster[i + 3];\n    rgbRaster[j] = 255 * ((255 - c) / 256) * ((255 - k) / 256);\n    rgbRaster[j + 1] = 255 * ((255 - m) / 256) * ((255 - k) / 256);\n    rgbRaster[j + 2] = 255 * ((255 - y) / 256) * ((255 - k) / 256);\n  }\n  return rgbRaster;\n}\nexport function fromYCbCr(yCbCrRaster) {\n  const {\n    width,\n    height\n  } = yCbCrRaster;\n  const rgbRaster = new Uint8ClampedArray(width * height * 3);\n  for (let i = 0, j = 0; i < yCbCrRaster.length; i += 3, j += 3) {\n    const y = yCbCrRaster[i];\n    const cb = yCbCrRaster[i + 1];\n    const cr = yCbCrRaster[i + 2];\n    rgbRaster[j] = y + 1.40200 * (cr - 0x80);\n    rgbRaster[j + 1] = y - 0.34414 * (cb - 0x80) - 0.71414 * (cr - 0x80);\n    rgbRaster[j + 2] = y + 1.77200 * (cb - 0x80);\n  }\n  return rgbRaster;\n}\nconst Xn = 0.95047;\nconst Yn = 1.00000;\nconst Zn = 1.08883;\n\n// from https://github.com/antimatter15/rgb-lab/blob/master/color.js\n\nexport function fromCIELab(cieLabRaster) {\n  const {\n    width,\n    height\n  } = cieLabRaster;\n  const rgbRaster = new Uint8Array(width * height * 3);\n  for (let i = 0, j = 0; i < cieLabRaster.length; i += 3, j += 3) {\n    const L = cieLabRaster[i + 0];\n    const a_ = cieLabRaster[i + 1] << 24 >> 24; // conversion from uint8 to int8\n    const b_ = cieLabRaster[i + 2] << 24 >> 24; // same\n\n    let y = (L + 16) / 116;\n    let x = a_ / 500 + y;\n    let z = y - b_ / 200;\n    let r;\n    let g;\n    let b;\n    x = Xn * (x * x * x > 0.008856 ? x * x * x : (x - 16 / 116) / 7.787);\n    y = Yn * (y * y * y > 0.008856 ? y * y * y : (y - 16 / 116) / 7.787);\n    z = Zn * (z * z * z > 0.008856 ? z * z * z : (z - 16 / 116) / 7.787);\n    r = x * 3.2406 + y * -1.5372 + z * -0.4986;\n    g = x * -0.9689 + y * 1.8758 + z * 0.0415;\n    b = x * 0.0557 + y * -0.2040 + z * 1.0570;\n    r = r > 0.0031308 ? 1.055 * r ** (1 / 2.4) - 0.055 : 12.92 * r;\n    g = g > 0.0031308 ? 1.055 * g ** (1 / 2.4) - 0.055 : 12.92 * g;\n    b = b > 0.0031308 ? 1.055 * b ** (1 / 2.4) - 0.055 : 12.92 * b;\n    rgbRaster[j] = Math.max(0, Math.min(1, r)) * 255;\n    rgbRaster[j + 1] = Math.max(0, Math.min(1, g)) * 255;\n    rgbRaster[j + 2] = Math.max(0, Math.min(1, b)) * 255;\n  }\n  return rgbRaster;\n}", "const registry = new Map();\nexport function addDecoder(cases, importFn) {\n  if (!Array.isArray(cases)) {\n    cases = [cases]; // eslint-disable-line no-param-reassign\n  }\n  cases.forEach(c => registry.set(c, importFn));\n}\nexport async function getDecoder(fileDirectory) {\n  const importFn = registry.get(fileDirectory.Compression);\n  if (!importFn) {\n    throw new Error(`Unknown compression method identifier: ${fileDirectory.Compression}`);\n  }\n  const Decoder = await importFn();\n  return new Decoder(fileDirectory);\n}\n\n// Add default decoders to registry (end-user may override with other implementations)\naddDecoder([undefined, 1], () => import('./raw.js').then(m => m.default));\naddDecoder(5, () => import('./lzw.js').then(m => m.default));\naddDecoder(6, () => {\n  throw new Error('old style JPEG compression is not supported.');\n});\naddDecoder(7, () => import('./jpeg.js').then(m => m.default));\naddDecoder([8, 32946], () => import('./deflate.js').then(m => m.default));\naddDecoder(32773, () => import('./packbits.js').then(m => m.default));\naddDecoder(34887, () => import('./lerc.js').then(async m => {\n  await m.zstd.init();\n  return m;\n}).then(m => m.default));\naddDecoder(50001, () => import('./webimage.js').then(m => m.default));", "/**\n * @module resample\n */\n\nfunction copyNewSize(array, width, height, samplesPerPixel = 1) {\n  return new (Object.getPrototypeOf(array).constructor)(width * height * samplesPerPixel);\n}\n\n/**\n * Resample the input arrays using nearest neighbor value selection.\n * @param {TypedArray[]} valueArrays The input arrays to resample\n * @param {number} inWidth The width of the input rasters\n * @param {number} inHeight The height of the input rasters\n * @param {number} outWidth The desired width of the output rasters\n * @param {number} outHeight The desired height of the output rasters\n * @returns {TypedArray[]} The resampled rasters\n */\nexport function resampleNearest(valueArrays, inWidth, inHeight, outWidth, outHeight) {\n  const relX = inWidth / outWidth;\n  const relY = inHeight / outHeight;\n  return valueArrays.map(array => {\n    const newArray = copyNewSize(array, outWidth, outHeight);\n    for (let y = 0; y < outHeight; ++y) {\n      const cy = Math.min(Math.round(relY * y), inHeight - 1);\n      for (let x = 0; x < outWidth; ++x) {\n        const cx = Math.min(Math.round(relX * x), inWidth - 1);\n        const value = array[cy * inWidth + cx];\n        newArray[y * outWidth + x] = value;\n      }\n    }\n    return newArray;\n  });\n}\n\n// simple linear interpolation, code from:\n// https://en.wikipedia.org/wiki/Linear_interpolation#Programming_language_support\nfunction lerp(v0, v1, t) {\n  return (1 - t) * v0 + t * v1;\n}\n\n/**\n * Resample the input arrays using bilinear interpolation.\n * @param {TypedArray[]} valueArrays The input arrays to resample\n * @param {number} inWidth The width of the input rasters\n * @param {number} inHeight The height of the input rasters\n * @param {number} outWidth The desired width of the output rasters\n * @param {number} outHeight The desired height of the output rasters\n * @returns {TypedArray[]} The resampled rasters\n */\nexport function resampleBilinear(valueArrays, inWidth, inHeight, outWidth, outHeight) {\n  const relX = inWidth / outWidth;\n  const relY = inHeight / outHeight;\n  return valueArrays.map(array => {\n    const newArray = copyNewSize(array, outWidth, outHeight);\n    for (let y = 0; y < outHeight; ++y) {\n      const rawY = relY * y;\n      const yl = Math.floor(rawY);\n      const yh = Math.min(Math.ceil(rawY), inHeight - 1);\n      for (let x = 0; x < outWidth; ++x) {\n        const rawX = relX * x;\n        const tx = rawX % 1;\n        const xl = Math.floor(rawX);\n        const xh = Math.min(Math.ceil(rawX), inWidth - 1);\n        const ll = array[yl * inWidth + xl];\n        const hl = array[yl * inWidth + xh];\n        const lh = array[yh * inWidth + xl];\n        const hh = array[yh * inWidth + xh];\n        const value = lerp(lerp(ll, hl, tx), lerp(lh, hh, tx), rawY % 1);\n        newArray[y * outWidth + x] = value;\n      }\n    }\n    return newArray;\n  });\n}\n\n/**\n * Resample the input arrays using the selected resampling method.\n * @param {TypedArray[]} valueArrays The input arrays to resample\n * @param {number} inWidth The width of the input rasters\n * @param {number} inHeight The height of the input rasters\n * @param {number} outWidth The desired width of the output rasters\n * @param {number} outHeight The desired height of the output rasters\n * @param {string} [method = 'nearest'] The desired resampling method\n * @returns {TypedArray[]} The resampled rasters\n */\nexport function resample(valueArrays, inWidth, inHeight, outWidth, outHeight, method = 'nearest') {\n  switch (method.toLowerCase()) {\n    case 'nearest':\n      return resampleNearest(valueArrays, inWidth, inHeight, outWidth, outHeight);\n    case 'bilinear':\n    case 'linear':\n      return resampleBilinear(valueArrays, inWidth, inHeight, outWidth, outHeight);\n    default:\n      throw new Error(`Unsupported resampling method: '${method}'`);\n  }\n}\n\n/**\n * Resample the pixel interleaved input array using nearest neighbor value selection.\n * @param {TypedArray} valueArrays The input arrays to resample\n * @param {number} inWidth The width of the input rasters\n * @param {number} inHeight The height of the input rasters\n * @param {number} outWidth The desired width of the output rasters\n * @param {number} outHeight The desired height of the output rasters\n * @param {number} samples The number of samples per pixel for pixel\n *                         interleaved data\n * @returns {TypedArray} The resampled raster\n */\nexport function resampleNearestInterleaved(valueArray, inWidth, inHeight, outWidth, outHeight, samples) {\n  const relX = inWidth / outWidth;\n  const relY = inHeight / outHeight;\n  const newArray = copyNewSize(valueArray, outWidth, outHeight, samples);\n  for (let y = 0; y < outHeight; ++y) {\n    const cy = Math.min(Math.round(relY * y), inHeight - 1);\n    for (let x = 0; x < outWidth; ++x) {\n      const cx = Math.min(Math.round(relX * x), inWidth - 1);\n      for (let i = 0; i < samples; ++i) {\n        const value = valueArray[cy * inWidth * samples + cx * samples + i];\n        newArray[y * outWidth * samples + x * samples + i] = value;\n      }\n    }\n  }\n  return newArray;\n}\n\n/**\n * Resample the pixel interleaved input array using bilinear interpolation.\n * @param {TypedArray} valueArrays The input arrays to resample\n * @param {number} inWidth The width of the input rasters\n * @param {number} inHeight The height of the input rasters\n * @param {number} outWidth The desired width of the output rasters\n * @param {number} outHeight The desired height of the output rasters\n * @param {number} samples The number of samples per pixel for pixel\n *                         interleaved data\n * @returns {TypedArray} The resampled raster\n */\nexport function resampleBilinearInterleaved(valueArray, inWidth, inHeight, outWidth, outHeight, samples) {\n  const relX = inWidth / outWidth;\n  const relY = inHeight / outHeight;\n  const newArray = copyNewSize(valueArray, outWidth, outHeight, samples);\n  for (let y = 0; y < outHeight; ++y) {\n    const rawY = relY * y;\n    const yl = Math.floor(rawY);\n    const yh = Math.min(Math.ceil(rawY), inHeight - 1);\n    for (let x = 0; x < outWidth; ++x) {\n      const rawX = relX * x;\n      const tx = rawX % 1;\n      const xl = Math.floor(rawX);\n      const xh = Math.min(Math.ceil(rawX), inWidth - 1);\n      for (let i = 0; i < samples; ++i) {\n        const ll = valueArray[yl * inWidth * samples + xl * samples + i];\n        const hl = valueArray[yl * inWidth * samples + xh * samples + i];\n        const lh = valueArray[yh * inWidth * samples + xl * samples + i];\n        const hh = valueArray[yh * inWidth * samples + xh * samples + i];\n        const value = lerp(lerp(ll, hl, tx), lerp(lh, hh, tx), rawY % 1);\n        newArray[y * outWidth * samples + x * samples + i] = value;\n      }\n    }\n  }\n  return newArray;\n}\n\n/**\n * Resample the pixel interleaved input array using the selected resampling method.\n * @param {TypedArray} valueArray The input array to resample\n * @param {number} inWidth The width of the input rasters\n * @param {number} inHeight The height of the input rasters\n * @param {number} outWidth The desired width of the output rasters\n * @param {number} outHeight The desired height of the output rasters\n * @param {number} samples The number of samples per pixel for pixel\n *                                 interleaved data\n * @param {string} [method = 'nearest'] The desired resampling method\n * @returns {TypedArray} The resampled rasters\n */\nexport function resampleInterleaved(valueArray, inWidth, inHeight, outWidth, outHeight, samples, method = 'nearest') {\n  switch (method.toLowerCase()) {\n    case 'nearest':\n      return resampleNearestInterleaved(valueArray, inWidth, inHeight, outWidth, outHeight, samples);\n    case 'bilinear':\n    case 'linear':\n      return resampleBilinearInterleaved(valueArray, inWidth, inHeight, outWidth, outHeight, samples);\n    default:\n      throw new Error(`Unsupported resampling method: '${method}'`);\n  }\n}", "import { getFloat16 } from '@petamoriken/float16';\nexport default class DataView64 {\n  constructor(arrayBuffer) {\n    this._dataView = new DataView(arrayBuffer);\n  }\n  get buffer() {\n    return this._dataView.buffer;\n  }\n  getUint64(offset, littleEndian) {\n    const left = this.getUint32(offset, littleEndian);\n    const right = this.getUint32(offset + 4, littleEndian);\n    let combined;\n    if (littleEndian) {\n      combined = left + 2 ** 32 * right;\n      if (!Number.isSafeInteger(combined)) {\n        throw new Error(`${combined} exceeds MAX_SAFE_INTEGER. ` + 'Precision may be lost. Please report if you get this message to https://github.com/geotiffjs/geotiff.js/issues');\n      }\n      return combined;\n    }\n    combined = 2 ** 32 * left + right;\n    if (!Number.isSafeInteger(combined)) {\n      throw new Error(`${combined} exceeds MAX_SAFE_INTEGER. ` + 'Precision may be lost. Please report if you get this message to https://github.com/geotiffjs/geotiff.js/issues');\n    }\n    return combined;\n  }\n\n  // adapted from https://stackoverflow.com/a/55338384/8060591\n  getInt64(offset, littleEndian) {\n    let value = 0;\n    const isNegative = (this._dataView.getUint8(offset + (littleEndian ? 7 : 0)) & 0x80) > 0;\n    let carrying = true;\n    for (let i = 0; i < 8; i++) {\n      let byte = this._dataView.getUint8(offset + (littleEndian ? i : 7 - i));\n      if (isNegative) {\n        if (carrying) {\n          if (byte !== 0x00) {\n            byte = ~(byte - 1) & 0xff;\n            carrying = false;\n          }\n        } else {\n          byte = ~byte & 0xff;\n        }\n      }\n      value += byte * 256 ** i;\n    }\n    if (isNegative) {\n      value = -value;\n    }\n    return value;\n  }\n  getUint8(offset, littleEndian) {\n    return this._dataView.getUint8(offset, littleEndian);\n  }\n  getInt8(offset, littleEndian) {\n    return this._dataView.getInt8(offset, littleEndian);\n  }\n  getUint16(offset, littleEndian) {\n    return this._dataView.getUint16(offset, littleEndian);\n  }\n  getInt16(offset, littleEndian) {\n    return this._dataView.getInt16(offset, littleEndian);\n  }\n  getUint32(offset, littleEndian) {\n    return this._dataView.getUint32(offset, littleEndian);\n  }\n  getInt32(offset, littleEndian) {\n    return this._dataView.getInt32(offset, littleEndian);\n  }\n  getFloat16(offset, littleEndian) {\n    return getFloat16(this._dataView, offset, littleEndian);\n  }\n  getFloat32(offset, littleEndian) {\n    return this._dataView.getFloat32(offset, littleEndian);\n  }\n  getFloat64(offset, littleEndian) {\n    return this._dataView.getFloat64(offset, littleEndian);\n  }\n}", "export default class DataSlice {\n  constructor(arrayBuffer, sliceOffset, littleEndian, bigTiff) {\n    this._dataView = new DataView(arrayBuffer);\n    this._sliceOffset = sliceOffset;\n    this._littleEndian = littleEndian;\n    this._bigTiff = bigTiff;\n  }\n  get sliceOffset() {\n    return this._sliceOffset;\n  }\n  get sliceTop() {\n    return this._sliceOffset + this.buffer.byteLength;\n  }\n  get littleEndian() {\n    return this._littleEndian;\n  }\n  get bigTiff() {\n    return this._bigTiff;\n  }\n  get buffer() {\n    return this._dataView.buffer;\n  }\n  covers(offset, length) {\n    return this.sliceOffset <= offset && this.sliceTop >= offset + length;\n  }\n  readUint8(offset) {\n    return this._dataView.getUint8(offset - this._sliceOffset, this._littleEndian);\n  }\n  readInt8(offset) {\n    return this._dataView.getInt8(offset - this._sliceOffset, this._littleEndian);\n  }\n  readUint16(offset) {\n    return this._dataView.getUint16(offset - this._sliceOffset, this._littleEndian);\n  }\n  readInt16(offset) {\n    return this._dataView.getInt16(offset - this._sliceOffset, this._littleEndian);\n  }\n  readUint32(offset) {\n    return this._dataView.getUint32(offset - this._sliceOffset, this._littleEndian);\n  }\n  readInt32(offset) {\n    return this._dataView.getInt32(offset - this._sliceOffset, this._littleEndian);\n  }\n  readFloat32(offset) {\n    return this._dataView.getFloat32(offset - this._sliceOffset, this._littleEndian);\n  }\n  readFloat64(offset) {\n    return this._dataView.getFloat64(offset - this._sliceOffset, this._littleEndian);\n  }\n  readUint64(offset) {\n    const left = this.readUint32(offset);\n    const right = this.readUint32(offset + 4);\n    let combined;\n    if (this._littleEndian) {\n      combined = left + 2 ** 32 * right;\n      if (!Number.isSafeInteger(combined)) {\n        throw new Error(`${combined} exceeds MAX_SAFE_INTEGER. ` + 'Precision may be lost. Please report if you get this message to https://github.com/geotiffjs/geotiff.js/issues');\n      }\n      return combined;\n    }\n    combined = 2 ** 32 * left + right;\n    if (!Number.isSafeInteger(combined)) {\n      throw new Error(`${combined} exceeds MAX_SAFE_INTEGER. ` + 'Precision may be lost. Please report if you get this message to https://github.com/geotiffjs/geotiff.js/issues');\n    }\n    return combined;\n  }\n\n  // adapted from https://stackoverflow.com/a/55338384/8060591\n  readInt64(offset) {\n    let value = 0;\n    const isNegative = (this._dataView.getUint8(offset + (this._littleEndian ? 7 : 0)) & 0x80) > 0;\n    let carrying = true;\n    for (let i = 0; i < 8; i++) {\n      let byte = this._dataView.getUint8(offset + (this._littleEndian ? i : 7 - i));\n      if (isNegative) {\n        if (carrying) {\n          if (byte !== 0x00) {\n            byte = ~(byte - 1) & 0xff;\n            carrying = false;\n          }\n        } else {\n          byte = ~byte & 0xff;\n        }\n      }\n      value += byte * 256 ** i;\n    }\n    if (isNegative) {\n      value = -value;\n    }\n    return value;\n  }\n  readOffset(offset) {\n    if (this._bigTiff) {\n      return this.readUint64(offset);\n    }\n    return this.readUint32(offset);\n  }\n}", "import { getDecoder } from './compression/index.js';\nconst defaultPoolSize = typeof navigator !== 'undefined' ? navigator.hardwareConcurrency || 2 : 2;\n\n/**\n * @module pool\n */\n\n/**\n * Pool for workers to decode chunks of the images.\n */\nclass Pool {\n  /**\n   * @constructor\n   * @param {Number} [size] The size of the pool. Defaults to the number of CPUs\n   *                      available. When this parameter is `null` or 0, then the\n   *                      decoding will be done in the main thread.\n   * @param {function(): Worker} [createWorker] A function that creates the decoder worker.\n   * Defaults to a worker with all decoders that ship with geotiff.js. The `createWorker()`\n   * function is expected to return a `Worker` compatible with Web Workers. For code that\n   * runs in Node, [web-worker](https://www.npmjs.com/package/web-worker) is a good choice.\n   *\n   * A worker that uses a custom lzw decoder would look like this `my-custom-worker.js` file:\n   * ```js\n   * import { addDecoder, getDecoder } from 'geotiff';\n   * addDecoder(5, () => import ('./my-custom-lzw').then((m) => m.default));\n   * self.addEventListener('message', async (e) => {\n   *   const { id, fileDirectory, buffer } = e.data;\n   *   const decoder = await getDecoder(fileDirectory);\n   *   const decoded = await decoder.decode(fileDirectory, buffer);\n   *   self.postMessage({ decoded, id }, [decoded]);\n   * });\n   * ```\n   * The way the above code is built into a worker by the `createWorker()` function\n   * depends on the used bundler. For most bundlers, something like this will work:\n   * ```js\n   * function createWorker() {\n   *   return new Worker(new URL('./my-custom-worker.js', import.meta.url));\n   * }\n   * ```\n   */\n  constructor(size = defaultPoolSize, createWorker) {\n    this.workers = null;\n    this._awaitingDecoder = null;\n    this.size = size;\n    this.messageId = 0;\n    if (size) {\n      this._awaitingDecoder = createWorker ? Promise.resolve(createWorker) : new Promise(resolve => {\n        import('./worker/decoder.js').then(module => {\n          resolve(module.create);\n        });\n      });\n      this._awaitingDecoder.then(create => {\n        this._awaitingDecoder = null;\n        this.workers = [];\n        for (let i = 0; i < size; i++) {\n          this.workers.push({\n            worker: create(),\n            idle: true\n          });\n        }\n      });\n    }\n  }\n\n  /**\n   * Decode the given block of bytes with the set compression method.\n   * @param {ArrayBuffer} buffer the array buffer of bytes to decode.\n   * @returns {Promise<ArrayBuffer>} the decoded result as a `Promise`\n   */\n  async decode(fileDirectory, buffer) {\n    if (this._awaitingDecoder) {\n      await this._awaitingDecoder;\n    }\n    return this.size === 0 ? getDecoder(fileDirectory).then(decoder => decoder.decode(fileDirectory, buffer)) : new Promise(resolve => {\n      const worker = this.workers.find(candidate => candidate.idle) || this.workers[Math.floor(Math.random() * this.size)];\n      worker.idle = false;\n      const id = this.messageId++;\n      const onMessage = e => {\n        if (e.data.id === id) {\n          worker.idle = true;\n          resolve(e.data.decoded);\n          worker.worker.removeEventListener('message', onMessage);\n        }\n      };\n      worker.worker.addEventListener('message', onMessage);\n      worker.worker.postMessage({\n        fileDirectory,\n        buffer,\n        id\n      }, [buffer]);\n    });\n  }\n  destroy() {\n    if (this.workers) {\n      this.workers.forEach(worker => {\n        worker.worker.terminate();\n      });\n      this.workers = null;\n    }\n  }\n}\nexport default Pool;", "const CRLFCRLF = '\\r\\n\\r\\n';\n\n/*\n * Shim for 'Object.fromEntries'\n */\nfunction itemsToObject(items) {\n  if (typeof Object.fromEntries !== 'undefined') {\n    return Object.fromEntries(items);\n  }\n  const obj = {};\n  for (const [key, value] of items) {\n    obj[key.toLowerCase()] = value;\n  }\n  return obj;\n}\n\n/**\n * Parse HTTP headers from a given string.\n * @param {String} text the text to parse the headers from\n * @returns {Object} the parsed headers with lowercase keys\n */\nfunction parseHeaders(text) {\n  const items = text.split('\\r\\n').map(line => {\n    const kv = line.split(':').map(str => str.trim());\n    kv[0] = kv[0].toLowerCase();\n    return kv;\n  });\n  return itemsToObject(items);\n}\n\n/**\n * Parse a 'Content-Type' header value to the content-type and parameters\n * @param {String} rawContentType the raw string to parse from\n * @returns {Object} the parsed content type with the fields: type and params\n */\nexport function parseContentType(rawContentType) {\n  const [type, ...rawParams] = rawContentType.split(';').map(s => s.trim());\n  const paramsItems = rawParams.map(param => param.split('='));\n  return {\n    type,\n    params: itemsToObject(paramsItems)\n  };\n}\n\n/**\n * Parse a 'Content-Range' header value to its start, end, and total parts\n * @param {String} rawContentRange the raw string to parse from\n * @returns {Object} the parsed parts\n */\nexport function parseContentRange(rawContentRange) {\n  let start;\n  let end;\n  let total;\n  if (rawContentRange) {\n    [, start, end, total] = rawContentRange.match(/bytes (\\d+)-(\\d+)\\/(\\d+)/);\n    start = parseInt(start, 10);\n    end = parseInt(end, 10);\n    total = parseInt(total, 10);\n  }\n  return {\n    start,\n    end,\n    total\n  };\n}\n\n/**\n * Parses a list of byteranges from the given 'multipart/byteranges' HTTP response.\n * Each item in the list has the following properties:\n * - headers: the HTTP headers\n * - data: the sliced ArrayBuffer for that specific part\n * - offset: the offset of the byterange within its originating file\n * - length: the length of the byterange\n * @param {ArrayBuffer} responseArrayBuffer the response to be parsed and split\n * @param {String} boundary the boundary string used to split the sections\n * @returns {Object[]} the parsed byteranges\n */\nexport function parseByteRanges(responseArrayBuffer, boundary) {\n  let offset = null;\n  const decoder = new TextDecoder('ascii');\n  const out = [];\n  const startBoundary = `--${boundary}`;\n  const endBoundary = `${startBoundary}--`;\n\n  // search for the initial boundary, may be offset by some bytes\n  // TODO: more efficient to check for `--` in bytes directly\n  for (let i = 0; i < 10; ++i) {\n    const text = decoder.decode(new Uint8Array(responseArrayBuffer, i, startBoundary.length));\n    if (text === startBoundary) {\n      offset = i;\n    }\n  }\n  if (offset === null) {\n    throw new Error('Could not find initial boundary');\n  }\n  while (offset < responseArrayBuffer.byteLength) {\n    const text = decoder.decode(new Uint8Array(responseArrayBuffer, offset, Math.min(startBoundary.length + 1024, responseArrayBuffer.byteLength - offset)));\n\n    // break if we arrived at the end\n    if (text.length === 0 || text.startsWith(endBoundary)) {\n      break;\n    }\n\n    // assert that we are actually dealing with a byterange and are at the correct offset\n    if (!text.startsWith(startBoundary)) {\n      throw new Error('Part does not start with boundary');\n    }\n\n    // get a substring from where we read the headers\n    const innerText = text.substr(startBoundary.length + 2);\n    if (innerText.length === 0) {\n      break;\n    }\n\n    // find the double linebreak that denotes the end of the headers\n    const endOfHeaders = innerText.indexOf(CRLFCRLF);\n\n    // parse the headers to get the content range size\n    const headers = parseHeaders(innerText.substr(0, endOfHeaders));\n    const {\n      start,\n      end,\n      total\n    } = parseContentRange(headers['content-range']);\n\n    // calculate the length of the slice and the next offset\n    const startOfData = offset + startBoundary.length + endOfHeaders + CRLFCRLF.length;\n    const length = parseInt(end, 10) + 1 - parseInt(start, 10);\n    out.push({\n      headers,\n      data: responseArrayBuffer.slice(startOfData, startOfData + length),\n      offset: start,\n      length,\n      fileSize: total\n    });\n    offset = startOfData + length + 4;\n  }\n  return out;\n}", "/**\n * @typedef Slice\n * @property {number} offset\n * @property {number} length\n */\n\nexport class BaseSource {\n  /**\n   *\n   * @param {Slice[]} slices\n   * @returns {ArrayBuffer[]}\n   */\n  async fetch(slices, signal = undefined) {\n    return Promise.all(slices.map(slice => this.fetchSlice(slice, signal)));\n  }\n\n  /**\n   *\n   * @param {Slice} slice\n   * @returns {ArrayBuffer}\n   */\n  async fetchSlice(slice) {\n    throw new Error(`fetching of slice ${slice} not possible, not implemented`);\n  }\n\n  /**\n   * Returns the filesize if already determined and null otherwise\n   */\n  get fileSize() {\n    return null;\n  }\n  async close() {\n    // no-op by default\n  }\n}", "export default class QuickLRU extends Map {\n  constructor(options = {}) {\n    super();\n    if (!(options.maxSize && options.maxSize > 0)) {\n      throw new TypeError('`maxSize` must be a number greater than 0');\n    }\n    if (typeof options.maxAge === 'number' && options.maxAge === 0) {\n      throw new TypeError('`maxAge` must be a number greater than 0');\n    }\n\n    // TODO: Use private class fields when ESLint supports them.\n    this.maxSize = options.maxSize;\n    this.maxAge = options.maxAge || Number.POSITIVE_INFINITY;\n    this.onEviction = options.onEviction;\n    this.cache = new Map();\n    this.oldCache = new Map();\n    this._size = 0;\n  }\n\n  // TODO: Use private class methods when targeting Node.js 16.\n  _emitEvictions(cache) {\n    if (typeof this.onEviction !== 'function') {\n      return;\n    }\n    for (const [key, item] of cache) {\n      this.onEviction(key, item.value);\n    }\n  }\n  _deleteIfExpired(key, item) {\n    if (typeof item.expiry === 'number' && item.expiry <= Date.now()) {\n      if (typeof this.onEviction === 'function') {\n        this.onEviction(key, item.value);\n      }\n      return this.delete(key);\n    }\n    return false;\n  }\n  _getOrDeleteIfExpired(key, item) {\n    const deleted = this._deleteIfExpired(key, item);\n    if (deleted === false) {\n      return item.value;\n    }\n  }\n  _getItemValue(key, item) {\n    return item.expiry ? this._getOrDeleteIfExpired(key, item) : item.value;\n  }\n  _peek(key, cache) {\n    const item = cache.get(key);\n    return this._getItemValue(key, item);\n  }\n  _set(key, value) {\n    this.cache.set(key, value);\n    this._size++;\n    if (this._size >= this.maxSize) {\n      this._size = 0;\n      this._emitEvictions(this.oldCache);\n      this.oldCache = this.cache;\n      this.cache = new Map();\n    }\n  }\n  _moveToRecent(key, item) {\n    this.oldCache.delete(key);\n    this._set(key, item);\n  }\n  *_entriesAscending() {\n    for (const item of this.oldCache) {\n      const [key, value] = item;\n      if (!this.cache.has(key)) {\n        const deleted = this._deleteIfExpired(key, value);\n        if (deleted === false) {\n          yield item;\n        }\n      }\n    }\n    for (const item of this.cache) {\n      const [key, value] = item;\n      const deleted = this._deleteIfExpired(key, value);\n      if (deleted === false) {\n        yield item;\n      }\n    }\n  }\n  get(key) {\n    if (this.cache.has(key)) {\n      const item = this.cache.get(key);\n      return this._getItemValue(key, item);\n    }\n    if (this.oldCache.has(key)) {\n      const item = this.oldCache.get(key);\n      if (this._deleteIfExpired(key, item) === false) {\n        this._moveToRecent(key, item);\n        return item.value;\n      }\n    }\n  }\n  set(key, value, {\n    maxAge = this.maxAge\n  } = {}) {\n    const expiry = typeof maxAge === 'number' && maxAge !== Number.POSITIVE_INFINITY ? Date.now() + maxAge : undefined;\n    if (this.cache.has(key)) {\n      this.cache.set(key, {\n        value,\n        expiry\n      });\n    } else {\n      this._set(key, {\n        value,\n        expiry\n      });\n    }\n    return this;\n  }\n  has(key) {\n    if (this.cache.has(key)) {\n      return !this._deleteIfExpired(key, this.cache.get(key));\n    }\n    if (this.oldCache.has(key)) {\n      return !this._deleteIfExpired(key, this.oldCache.get(key));\n    }\n    return false;\n  }\n  peek(key) {\n    if (this.cache.has(key)) {\n      return this._peek(key, this.cache);\n    }\n    if (this.oldCache.has(key)) {\n      return this._peek(key, this.oldCache);\n    }\n  }\n  delete(key) {\n    const deleted = this.cache.delete(key);\n    if (deleted) {\n      this._size--;\n    }\n    return this.oldCache.delete(key) || deleted;\n  }\n  clear() {\n    this.cache.clear();\n    this.oldCache.clear();\n    this._size = 0;\n  }\n  resize(newSize) {\n    if (!(newSize && newSize > 0)) {\n      throw new TypeError('`maxSize` must be a number greater than 0');\n    }\n    const items = [...this._entriesAscending()];\n    const removeCount = items.length - newSize;\n    if (removeCount < 0) {\n      this.cache = new Map(items);\n      this.oldCache = new Map();\n      this._size = items.length;\n    } else {\n      if (removeCount > 0) {\n        this._emitEvictions(items.slice(0, removeCount));\n      }\n      this.oldCache = new Map(items.slice(removeCount));\n      this.cache = new Map();\n      this._size = 0;\n    }\n    this.maxSize = newSize;\n  }\n  *keys() {\n    for (const [key] of this) {\n      yield key;\n    }\n  }\n  *values() {\n    for (const [, value] of this) {\n      yield value;\n    }\n  }\n  *[Symbol.iterator]() {\n    for (const item of this.cache) {\n      const [key, value] = item;\n      const deleted = this._deleteIfExpired(key, value);\n      if (deleted === false) {\n        yield [key, value.value];\n      }\n    }\n    for (const item of this.oldCache) {\n      const [key, value] = item;\n      if (!this.cache.has(key)) {\n        const deleted = this._deleteIfExpired(key, value);\n        if (deleted === false) {\n          yield [key, value.value];\n        }\n      }\n    }\n  }\n  *entriesDescending() {\n    let items = [...this.cache];\n    for (let i = items.length - 1; i >= 0; --i) {\n      const item = items[i];\n      const [key, value] = item;\n      const deleted = this._deleteIfExpired(key, value);\n      if (deleted === false) {\n        yield [key, value.value];\n      }\n    }\n    items = [...this.oldCache];\n    for (let i = items.length - 1; i >= 0; --i) {\n      const item = items[i];\n      const [key, value] = item;\n      if (!this.cache.has(key)) {\n        const deleted = this._deleteIfExpired(key, value);\n        if (deleted === false) {\n          yield [key, value.value];\n        }\n      }\n    }\n  }\n  *entriesAscending() {\n    for (const [key, value] of this._entriesAscending()) {\n      yield [key, value.value];\n    }\n  }\n  get size() {\n    if (!this._size) {\n      return this.oldCache.size;\n    }\n    let oldCacheSize = 0;\n    for (const key of this.oldCache.keys()) {\n      if (!this.cache.has(key)) {\n        oldCacheSize++;\n      }\n    }\n    return Math.min(this._size + oldCacheSize, this.maxSize);\n  }\n  entries() {\n    return this.entriesAscending();\n  }\n  forEach(callbackFunction, thisArgument = this) {\n    for (const [key, value] of this.entriesAscending()) {\n      callbackFunction.call(thisArgument, value, key, this);\n    }\n  }\n  get [Symbol.toStringTag]() {\n    return JSON.stringify([...this.entriesAscending()]);\n  }\n}", "export function assign(target, source) {\n  for (const key in source) {\n    if (source.hasOwnProperty(key)) {\n      target[key] = source[key];\n    }\n  }\n}\nexport function chunk(iterable, length) {\n  const results = [];\n  const lengthOfIterable = iterable.length;\n  for (let i = 0; i < lengthOfIterable; i += length) {\n    const chunked = [];\n    for (let ci = i; ci < i + length; ci++) {\n      chunked.push(iterable[ci]);\n    }\n    results.push(chunked);\n  }\n  return results;\n}\nexport function endsWith(string, expectedEnding) {\n  if (string.length < expectedEnding.length) {\n    return false;\n  }\n  const actualEnding = string.substr(string.length - expectedEnding.length);\n  return actualEnding === expectedEnding;\n}\nexport function forEach(iterable, func) {\n  const {\n    length\n  } = iterable;\n  for (let i = 0; i < length; i++) {\n    func(iterable[i], i);\n  }\n}\nexport function invert(oldObj) {\n  const newObj = {};\n  for (const key in oldObj) {\n    if (oldObj.hasOwnProperty(key)) {\n      const value = oldObj[key];\n      newObj[value] = key;\n    }\n  }\n  return newObj;\n}\nexport function range(n) {\n  const results = [];\n  for (let i = 0; i < n; i++) {\n    results.push(i);\n  }\n  return results;\n}\nexport function times(numTimes, func) {\n  const results = [];\n  for (let i = 0; i < numTimes; i++) {\n    results.push(func(i));\n  }\n  return results;\n}\nexport function toArray(iterable) {\n  const results = [];\n  const {\n    length\n  } = iterable;\n  for (let i = 0; i < length; i++) {\n    results.push(iterable[i]);\n  }\n  return results;\n}\nexport function toArrayRecursively(input) {\n  if (input.length) {\n    return toArray(input).map(toArrayRecursively);\n  }\n  return input;\n}\n\n// copied from https://github.com/academia-de-codigo/parse-content-range-header/blob/master/index.js\nexport function parseContentRange(headerValue) {\n  if (!headerValue) {\n    return null;\n  }\n  if (typeof headerValue !== 'string') {\n    throw new Error('invalid argument');\n  }\n  const parseInt = number => Number.parseInt(number, 10);\n\n  // Check for presence of unit\n  let matches = headerValue.match(/^(\\w*) /);\n  const unit = matches && matches[1];\n\n  // check for start-end/size header format\n  matches = headerValue.match(/(\\d+)-(\\d+)\\/(\\d+|\\*)/);\n  if (matches) {\n    return {\n      unit,\n      first: parseInt(matches[1]),\n      last: parseInt(matches[2]),\n      length: matches[3] === '*' ? null : parseInt(matches[3])\n    };\n  }\n\n  // check for size header format\n  matches = headerValue.match(/(\\d+|\\*)/);\n  if (matches) {\n    return {\n      unit,\n      first: null,\n      last: null,\n      length: matches[1] === '*' ? null : parseInt(matches[1])\n    };\n  }\n  return null;\n}\n\n/*\n * Promisified wrapper around 'setTimeout' to allow 'await'\n */\nexport async function wait(milliseconds) {\n  return new Promise(resolve => setTimeout(resolve, milliseconds));\n}\nexport function zip(a, b) {\n  const A = Array.isArray(a) ? a : Array.from(a);\n  const B = Array.isArray(b) ? b : Array.from(b);\n  return A.map((k, i) => [k, B[i]]);\n}\n\n// Based on https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\nexport class AbortError extends Error {\n  constructor(params) {\n    // Pass remaining arguments (including vendor specific ones) to parent constructor\n    super(params);\n\n    // Maintains proper stack trace for where our error was thrown (only available on V8)\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, AbortError);\n    }\n    this.name = 'AbortError';\n  }\n}\nexport class CustomAggregateError extends Error {\n  constructor(errors, message) {\n    super(message);\n    this.errors = errors;\n    this.message = message;\n    this.name = 'AggregateError';\n  }\n}\nexport const AggregateError = CustomAggregateError;", "import QuickLRU from 'quick-lru';\nimport { BaseSource } from './basesource.js';\nimport { AbortError, AggregateError, wait, zip } from '../utils.js';\nclass Block {\n  /**\n   *\n   * @param {number} offset\n   * @param {number} length\n   * @param {ArrayBuffer} [data]\n   */\n  constructor(offset, length, data = null) {\n    this.offset = offset;\n    this.length = length;\n    this.data = data;\n  }\n\n  /**\n   * @returns {number} the top byte border\n   */\n  get top() {\n    return this.offset + this.length;\n  }\n}\nclass BlockGroup {\n  /**\n   *\n   * @param {number} offset\n   * @param {number} length\n   * @param {number[]} blockIds\n   */\n  constructor(offset, length, blockIds) {\n    this.offset = offset;\n    this.length = length;\n    this.blockIds = blockIds;\n  }\n}\nexport class BlockedSource extends BaseSource {\n  /**\n   *\n   * @param {BaseSource} source The underlying source that shall be blocked and cached\n   * @param {object} options\n   * @param {number} [options.blockSize]\n   * @param {number} [options.cacheSize]\n   */\n  constructor(source, {\n    blockSize = 65536,\n    cacheSize = 100\n  } = {}) {\n    super();\n    this.source = source;\n    this.blockSize = blockSize;\n    this.blockCache = new QuickLRU({\n      maxSize: cacheSize,\n      onEviction: (blockId, block) => {\n        this.evictedBlocks.set(blockId, block);\n      }\n    });\n\n    /** @type {Map<number, Block>} */\n    this.evictedBlocks = new Map();\n\n    // mapping blockId -> Block instance\n    this.blockRequests = new Map();\n\n    // set of blockIds missing for the current requests\n    this.blockIdsToFetch = new Set();\n    this.abortedBlockIds = new Set();\n  }\n  get fileSize() {\n    return this.source.fileSize;\n  }\n\n  /**\n   *\n   * @param {import(\"./basesource\").Slice[]} slices\n   */\n  async fetch(slices, signal) {\n    const blockRequests = [];\n    const missingBlockIds = [];\n    const allBlockIds = [];\n    this.evictedBlocks.clear();\n    for (const {\n      offset,\n      length\n    } of slices) {\n      let top = offset + length;\n      const {\n        fileSize\n      } = this;\n      if (fileSize !== null) {\n        top = Math.min(top, fileSize);\n      }\n      const firstBlockOffset = Math.floor(offset / this.blockSize) * this.blockSize;\n      for (let current = firstBlockOffset; current < top; current += this.blockSize) {\n        const blockId = Math.floor(current / this.blockSize);\n        if (!this.blockCache.has(blockId) && !this.blockRequests.has(blockId)) {\n          this.blockIdsToFetch.add(blockId);\n          missingBlockIds.push(blockId);\n        }\n        if (this.blockRequests.has(blockId)) {\n          blockRequests.push(this.blockRequests.get(blockId));\n        }\n        allBlockIds.push(blockId);\n      }\n    }\n\n    // allow additional block requests to accumulate\n    await wait();\n    this.fetchBlocks(signal);\n\n    // Gather all of the new requests that this fetch call is contributing to `fetch`.\n    const missingRequests = [];\n    for (const blockId of missingBlockIds) {\n      // The requested missing block could already be in the cache\n      // instead of having its request still be outstanding.\n      if (this.blockRequests.has(blockId)) {\n        missingRequests.push(this.blockRequests.get(blockId));\n      }\n    }\n\n    // Actually await all pending requests that are needed for this `fetch`.\n    await Promise.allSettled(blockRequests);\n    await Promise.allSettled(missingRequests);\n\n    // Perform retries if a block was interrupted by a previous signal\n    const abortedBlockRequests = [];\n    const abortedBlockIds = allBlockIds.filter(id => this.abortedBlockIds.has(id) || !this.blockCache.has(id));\n    abortedBlockIds.forEach(id => this.blockIdsToFetch.add(id));\n    // start the retry of some blocks if required\n    if (abortedBlockIds.length > 0 && signal && !signal.aborted) {\n      this.fetchBlocks(null);\n      for (const blockId of abortedBlockIds) {\n        const block = this.blockRequests.get(blockId);\n        if (!block) {\n          throw new Error(`Block ${blockId} is not in the block requests`);\n        }\n        abortedBlockRequests.push(block);\n      }\n      await Promise.allSettled(abortedBlockRequests);\n    }\n\n    // throw an  abort error\n    if (signal && signal.aborted) {\n      throw new AbortError('Request was aborted');\n    }\n    const blocks = allBlockIds.map(id => this.blockCache.get(id) || this.evictedBlocks.get(id));\n    const failedBlocks = blocks.filter(i => !i);\n    if (failedBlocks.length) {\n      throw new AggregateError(failedBlocks, 'Request failed');\n    }\n\n    // create a final Map, with all required blocks for this request to satisfy\n    const requiredBlocks = new Map(zip(allBlockIds, blocks));\n\n    // TODO: satisfy each slice\n    return this.readSliceData(slices, requiredBlocks);\n  }\n\n  /**\n   *\n   * @param {AbortSignal} signal\n   */\n  fetchBlocks(signal) {\n    // check if we still need to\n    if (this.blockIdsToFetch.size > 0) {\n      const groups = this.groupBlocks(this.blockIdsToFetch);\n\n      // start requesting slices of data\n      const groupRequests = this.source.fetch(groups, signal);\n      for (let groupIndex = 0; groupIndex < groups.length; ++groupIndex) {\n        const group = groups[groupIndex];\n        for (const blockId of group.blockIds) {\n          // make an async IIFE for each block\n          this.blockRequests.set(blockId, (async () => {\n            try {\n              const response = (await groupRequests)[groupIndex];\n              const blockOffset = blockId * this.blockSize;\n              const o = blockOffset - response.offset;\n              const t = Math.min(o + this.blockSize, response.data.byteLength);\n              const data = response.data.slice(o, t);\n              const block = new Block(blockOffset, data.byteLength, data, blockId);\n              this.blockCache.set(blockId, block);\n              this.abortedBlockIds.delete(blockId);\n            } catch (err) {\n              if (err.name === 'AbortError') {\n                // store the signal here, we need it to determine later if an\n                // error was caused by this signal\n                err.signal = signal;\n                this.blockCache.delete(blockId);\n                this.abortedBlockIds.add(blockId);\n              } else {\n                throw err;\n              }\n            } finally {\n              this.blockRequests.delete(blockId);\n            }\n          })());\n        }\n      }\n      this.blockIdsToFetch.clear();\n    }\n  }\n\n  /**\n   *\n   * @param {Set} blockIds\n   * @returns {BlockGroup[]}\n   */\n  groupBlocks(blockIds) {\n    const sortedBlockIds = Array.from(blockIds).sort((a, b) => a - b);\n    if (sortedBlockIds.length === 0) {\n      return [];\n    }\n    let current = [];\n    let lastBlockId = null;\n    const groups = [];\n    for (const blockId of sortedBlockIds) {\n      if (lastBlockId === null || lastBlockId + 1 === blockId) {\n        current.push(blockId);\n        lastBlockId = blockId;\n      } else {\n        groups.push(new BlockGroup(current[0] * this.blockSize, current.length * this.blockSize, current));\n        current = [blockId];\n        lastBlockId = blockId;\n      }\n    }\n    groups.push(new BlockGroup(current[0] * this.blockSize, current.length * this.blockSize, current));\n    return groups;\n  }\n\n  /**\n   *\n   * @param {import(\"./basesource\").Slice[]} slices\n   * @param {Map} blocks\n   */\n  readSliceData(slices, blocks) {\n    return slices.map(slice => {\n      let top = slice.offset + slice.length;\n      if (this.fileSize !== null) {\n        top = Math.min(this.fileSize, top);\n      }\n      const blockIdLow = Math.floor(slice.offset / this.blockSize);\n      const blockIdHigh = Math.floor(top / this.blockSize);\n      const sliceData = new ArrayBuffer(slice.length);\n      const sliceView = new Uint8Array(sliceData);\n      for (let blockId = blockIdLow; blockId <= blockIdHigh; ++blockId) {\n        const block = blocks.get(blockId);\n        const delta = block.offset - slice.offset;\n        const topDelta = block.top - top;\n        let blockInnerOffset = 0;\n        let rangeInnerOffset = 0;\n        let usedBlockLength;\n        if (delta < 0) {\n          blockInnerOffset = -delta;\n        } else if (delta > 0) {\n          rangeInnerOffset = delta;\n        }\n        if (topDelta < 0) {\n          usedBlockLength = block.length - blockInnerOffset;\n        } else {\n          usedBlockLength = top - block.offset - blockInnerOffset;\n        }\n        const blockView = new Uint8Array(block.data, blockInnerOffset, usedBlockLength);\n        sliceView.set(blockView, rangeInnerOffset);\n      }\n      return sliceData;\n    });\n  }\n}", "export class BaseResponse {\n  /**\n   * Returns whether the response has an ok'ish status code\n   */\n  get ok() {\n    return this.status >= 200 && this.status <= 299;\n  }\n\n  /**\n   * Returns the status code of the response\n   */\n  get status() {\n    throw new Error('not implemented');\n  }\n\n  /**\n   * Returns the value of the specified header\n   * @param {string} headerName the header name\n   * @returns {string} the header value\n   */\n  getHeader(headerName) {\n    // eslint-disable-line no-unused-vars\n    throw new Error('not implemented');\n  }\n\n  /**\n   * @returns {ArrayBuffer} the response data of the request\n   */\n  async getData() {\n    throw new Error('not implemented');\n  }\n}\nexport class BaseClient {\n  constructor(url) {\n    this.url = url;\n  }\n\n  /**\n   * Send a request with the options\n   * @param {{headers: HeadersInit, signal: AbortSignal}} [options={}]\n   * @returns {Promise<BaseResponse>}\n   */\n  async request({\n    headers,\n    signal\n  } = {}) {\n    // eslint-disable-line no-unused-vars\n    throw new Error('request is not implemented');\n  }\n}", "import { BaseClient, BaseResponse } from './base.js';\nclass FetchResponse extends BaseResponse {\n  /**\n   * BaseResponse facade for fetch API Response\n   * @param {Response} response\n   */\n  constructor(response) {\n    super();\n    this.response = response;\n  }\n  get status() {\n    return this.response.status;\n  }\n  getHeader(name) {\n    return this.response.headers.get(name);\n  }\n  async getData() {\n    const data = this.response.arrayBuffer ? await this.response.arrayBuffer() : (await this.response.buffer()).buffer;\n    return data;\n  }\n}\nexport class FetchClient extends BaseClient {\n  constructor(url, credentials) {\n    super(url);\n    this.credentials = credentials;\n  }\n\n  /**\n   * @param {{headers: HeadersInit, signal: AbortSignal}} [options={}]\n   * @returns {Promise<FetchResponse>}\n   */\n  async request({\n    headers,\n    signal\n  } = {}) {\n    const response = await fetch(this.url, {\n      headers,\n      credentials: this.credentials,\n      signal\n    });\n    return new FetchResponse(response);\n  }\n}", "import { BaseClient, BaseResponse } from './base.js';\nimport { AbortError } from '../../utils.js';\nclass XHRResponse extends BaseResponse {\n  /**\n   * BaseResponse facade for XMLHttpRequest\n   * @param {XMLHttpRequest} xhr\n   * @param {ArrayBuffer} data\n   */\n  constructor(xhr, data) {\n    super();\n    this.xhr = xhr;\n    this.data = data;\n  }\n  get status() {\n    return this.xhr.status;\n  }\n  getHeader(name) {\n    return this.xhr.getResponseHeader(name);\n  }\n  async getData() {\n    return this.data;\n  }\n}\nexport class XHRClient extends BaseClient {\n  constructRequest(headers, signal) {\n    return new Promise((resolve, reject) => {\n      const xhr = new XMLHttpRequest();\n      xhr.open('GET', this.url);\n      xhr.responseType = 'arraybuffer';\n      for (const [key, value] of Object.entries(headers)) {\n        xhr.setRequestHeader(key, value);\n      }\n\n      // hook signals\n      xhr.onload = () => {\n        const data = xhr.response;\n        resolve(new XHRResponse(xhr, data));\n      };\n      xhr.onerror = reject;\n      xhr.onabort = () => reject(new AbortError('Request aborted'));\n      xhr.send();\n      if (signal) {\n        if (signal.aborted) {\n          xhr.abort();\n        }\n        signal.addEventListener('abort', () => xhr.abort());\n      }\n    });\n  }\n  async request({\n    headers,\n    signal\n  } = {}) {\n    const response = await this.constructRequest(headers, signal);\n    return response;\n  }\n}", "import http from 'http';\nimport https from 'https';\nimport urlMod from 'url';\nimport { BaseClient, BaseResponse } from './base.js';\nimport { AbortError } from '../../utils.js';\nclass HttpResponse extends BaseResponse {\n  /**\n   * BaseResponse facade for node HTTP/HTTPS API Response\n   * @param {http.ServerResponse} response\n   */\n  constructor(response, dataPromise) {\n    super();\n    this.response = response;\n    this.dataPromise = dataPromise;\n  }\n  get status() {\n    return this.response.statusCode;\n  }\n  getHeader(name) {\n    return this.response.headers[name];\n  }\n  async getData() {\n    const data = await this.dataPromise;\n    return data;\n  }\n}\nexport class HttpClient extends BaseClient {\n  constructor(url) {\n    super(url);\n    this.parsedUrl = urlMod.parse(this.url);\n    this.httpApi = this.parsedUrl.protocol === 'http:' ? http : https;\n  }\n  constructRequest(headers, signal) {\n    return new Promise((resolve, reject) => {\n      const request = this.httpApi.get({\n        ...this.parsedUrl,\n        headers\n      }, response => {\n        const dataPromise = new Promise(resolveData => {\n          const chunks = [];\n\n          // collect chunks\n          response.on('data', chunk => {\n            chunks.push(chunk);\n          });\n\n          // concatenate all chunks and resolve the promise with the resulting buffer\n          response.on('end', () => {\n            const data = Buffer.concat(chunks).buffer;\n            resolveData(data);\n          });\n          response.on('error', reject);\n        });\n        resolve(new HttpResponse(response, dataPromise));\n      });\n      request.on('error', reject);\n      if (signal) {\n        if (signal.aborted) {\n          request.destroy(new AbortError('Request aborted'));\n        }\n        signal.addEventListener('abort', () => request.destroy(new AbortError('Request aborted')));\n      }\n    });\n  }\n  async request({\n    headers,\n    signal\n  } = {}) {\n    const response = await this.constructRequest(headers, signal);\n    return response;\n  }\n}", "import { parseByteRanges, parseContentRange, parseContentType } from './httputils.js';\nimport { BaseSource } from './basesource.js';\nimport { BlockedSource } from './blockedsource.js';\nimport { FetchClient } from './client/fetch.js';\nimport { XHRClient } from './client/xhr.js';\nimport { HttpClient } from './client/http.js';\nclass RemoteSource extends BaseSource {\n  /**\n   *\n   * @param {BaseClient} client\n   * @param {object} headers\n   * @param {numbers} maxRanges\n   * @param {boolean} allowFullFile\n   */\n  constructor(client, headers, maxRanges, allowFullFile) {\n    super();\n    this.client = client;\n    this.headers = headers;\n    this.maxRanges = maxRanges;\n    this.allowFullFile = allowFullFile;\n    this._fileSize = null;\n  }\n\n  /**\n   *\n   * @param {Slice[]} slices\n   */\n  async fetch(slices, signal) {\n    // if we allow multi-ranges, split the incoming request into that many sub-requests\n    // and join them afterwards\n    if (this.maxRanges >= slices.length) {\n      return this.fetchSlices(slices, signal);\n    } else if (this.maxRanges > 0 && slices.length > 1) {\n      // TODO: split into multiple multi-range requests\n\n      // const subSlicesRequests = [];\n      // for (let i = 0; i < slices.length; i += this.maxRanges) {\n      //   subSlicesRequests.push(\n      //     this.fetchSlices(slices.slice(i, i + this.maxRanges), signal),\n      //   );\n      // }\n      // return (await Promise.all(subSlicesRequests)).flat();\n    }\n\n    // otherwise make a single request for each slice\n    return Promise.all(slices.map(slice => this.fetchSlice(slice, signal)));\n  }\n  async fetchSlices(slices, signal) {\n    const response = await this.client.request({\n      headers: {\n        ...this.headers,\n        Range: `bytes=${slices.map(({\n          offset,\n          length\n        }) => `${offset}-${offset + length}`).join(',')}`\n      },\n      signal\n    });\n    if (!response.ok) {\n      throw new Error('Error fetching data.');\n    } else if (response.status === 206) {\n      const {\n        type,\n        params\n      } = parseContentType(response.getHeader('content-type'));\n      if (type === 'multipart/byteranges') {\n        const byteRanges = parseByteRanges(await response.getData(), params.boundary);\n        this._fileSize = byteRanges[0].fileSize || null;\n        return byteRanges;\n      }\n      const data = await response.getData();\n      const {\n        start,\n        end,\n        total\n      } = parseContentRange(response.getHeader('content-range'));\n      this._fileSize = total || null;\n      const first = [{\n        data,\n        offset: start,\n        length: end - start\n      }];\n      if (slices.length > 1) {\n        // we requested more than one slice, but got only the first\n        // unfortunately, some HTTP Servers don't support multi-ranges\n        // and return only the first\n\n        // get the rest of the slices and fetch them iteratively\n        const others = await Promise.all(slices.slice(1).map(slice => this.fetchSlice(slice, signal)));\n        return first.concat(others);\n      }\n      return first;\n    } else {\n      if (!this.allowFullFile) {\n        throw new Error('Server responded with full file');\n      }\n      const data = await response.getData();\n      this._fileSize = data.byteLength;\n      return [{\n        data,\n        offset: 0,\n        length: data.byteLength\n      }];\n    }\n  }\n  async fetchSlice(slice, signal) {\n    const {\n      offset,\n      length\n    } = slice;\n    const response = await this.client.request({\n      headers: {\n        ...this.headers,\n        Range: `bytes=${offset}-${offset + length}`\n      },\n      signal\n    });\n\n    // check the response was okay and if the server actually understands range requests\n    if (!response.ok) {\n      throw new Error('Error fetching data.');\n    } else if (response.status === 206) {\n      const data = await response.getData();\n      const {\n        total\n      } = parseContentRange(response.getHeader('content-range'));\n      this._fileSize = total || null;\n      return {\n        data,\n        offset,\n        length\n      };\n    } else {\n      if (!this.allowFullFile) {\n        throw new Error('Server responded with full file');\n      }\n      const data = await response.getData();\n      this._fileSize = data.byteLength;\n      return {\n        data,\n        offset: 0,\n        length: data.byteLength\n      };\n    }\n  }\n  get fileSize() {\n    return this._fileSize;\n  }\n}\nfunction maybeWrapInBlockedSource(source, {\n  blockSize,\n  cacheSize\n}) {\n  if (blockSize === null) {\n    return source;\n  }\n  return new BlockedSource(source, {\n    blockSize,\n    cacheSize\n  });\n}\nexport function makeFetchSource(url, {\n  headers = {},\n  credentials,\n  maxRanges = 0,\n  allowFullFile = false,\n  ...blockOptions\n} = {}) {\n  const client = new FetchClient(url, credentials);\n  const source = new RemoteSource(client, headers, maxRanges, allowFullFile);\n  return maybeWrapInBlockedSource(source, blockOptions);\n}\nexport function makeXHRSource(url, {\n  headers = {},\n  maxRanges = 0,\n  allowFullFile = false,\n  ...blockOptions\n} = {}) {\n  const client = new XHRClient(url);\n  const source = new RemoteSource(client, headers, maxRanges, allowFullFile);\n  return maybeWrapInBlockedSource(source, blockOptions);\n}\nexport function makeHttpSource(url, {\n  headers = {},\n  maxRanges = 0,\n  allowFullFile = false,\n  ...blockOptions\n} = {}) {\n  const client = new HttpClient(url);\n  const source = new RemoteSource(client, headers, maxRanges, allowFullFile);\n  return maybeWrapInBlockedSource(source, blockOptions);\n}\nexport function makeCustomSource(client, {\n  headers = {},\n  maxRanges = 0,\n  allowFullFile = false,\n  ...blockOptions\n} = {}) {\n  const source = new RemoteSource(client, headers, maxRanges, allowFullFile);\n  return maybeWrapInBlockedSource(source, blockOptions);\n}\n\n/**\n *\n * @param {string} url\n * @param {object} options\n */\nexport function makeRemoteSource(url, {\n  forceXHR = false,\n  ...clientOptions\n} = {}) {\n  if (typeof fetch === 'function' && !forceXHR) {\n    return makeFetchSource(url, clientOptions);\n  }\n  if (typeof XMLHttpRequest !== 'undefined') {\n    return makeXHRSource(url, clientOptions);\n  }\n  return makeHttpSource(url, clientOptions);\n}", "import { BaseSource } from './basesource.js';\nclass FileReaderSource extends BaseSource {\n  constructor(file) {\n    super();\n    this.file = file;\n  }\n  async fetchSlice(slice, signal) {\n    return new Promise((resolve, reject) => {\n      const blob = this.file.slice(slice.offset, slice.offset + slice.length);\n      const reader = new FileReader();\n      reader.onload = event => resolve(event.target.result);\n      reader.onerror = reject;\n      reader.onabort = reject;\n      reader.readAsArrayBuffer(blob);\n      if (signal) {\n        signal.addEventListener('abort', () => reader.abort());\n      }\n    });\n  }\n}\n\n/**\n * Create a new source from a given file/blob.\n * @param {Blob} file The file or blob to read from.\n * @returns The constructed source\n */\nexport function makeFileReaderSource(file) {\n  return new FileReaderSource(file);\n}", "import fs from 'fs';\nimport { BaseSource } from './basesource.js';\nfunction closeAsync(fd) {\n  return new Promise((resolve, reject) => {\n    fs.close(fd, err => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve();\n      }\n    });\n  });\n}\nfunction openAsync(path, flags, mode = undefined) {\n  return new Promise((resolve, reject) => {\n    fs.open(path, flags, mode, (err, fd) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(fd);\n      }\n    });\n  });\n}\nfunction readAsync(...args) {\n  return new Promise((resolve, reject) => {\n    fs.read(...args, (err, bytesRead, buffer) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve({\n          bytesRead,\n          buffer\n        });\n      }\n    });\n  });\n}\nclass FileSource extends BaseSource {\n  constructor(path) {\n    super();\n    this.path = path;\n    this.openRequest = openAsync(path, 'r');\n  }\n  async fetchSlice(slice) {\n    // TODO: use `signal`\n    const fd = await this.openRequest;\n    const {\n      buffer\n    } = await readAsync(fd, Buffer.alloc(slice.length), 0, slice.length, slice.offset);\n    return buffer.buffer;\n  }\n  async close() {\n    const fd = await this.openRequest;\n    await closeAsync(fd);\n  }\n}\nexport function makeFileSource(path) {\n  return new FileSource(path);\n}", "/*\n  Some parts of this file are based on UTIF.js,\n  which was released under the MIT License.\n  You can view that here:\n  https://github.com/photopea/UTIF.js/blob/master/LICENSE\n*/\nimport { fieldTagNames, fieldTagTypes, fieldTypeNames, geoKeyNames } from './globals.js';\nimport { assign, endsWith, forEach, invert, times } from './utils.js';\nconst tagName2Code = invert(fieldTagNames);\nconst geoKeyName2Code = invert(geoKeyNames);\nconst name2code = {};\nassign(name2code, tagName2Code);\nassign(name2code, geoKeyName2Code);\nconst typeName2byte = invert(fieldTypeNames);\n\n// config variables\nconst numBytesInIfd = 1000;\nconst _binBE = {\n  nextZero: (data, o) => {\n    let oincr = o;\n    while (data[oincr] !== 0) {\n      oincr++;\n    }\n    return oincr;\n  },\n  readUshort: (buff, p) => {\n    return buff[p] << 8 | buff[p + 1];\n  },\n  readShort: (buff, p) => {\n    const a = _binBE.ui8;\n    a[0] = buff[p + 1];\n    a[1] = buff[p + 0];\n    return _binBE.i16[0];\n  },\n  readInt: (buff, p) => {\n    const a = _binBE.ui8;\n    a[0] = buff[p + 3];\n    a[1] = buff[p + 2];\n    a[2] = buff[p + 1];\n    a[3] = buff[p + 0];\n    return _binBE.i32[0];\n  },\n  readUint: (buff, p) => {\n    const a = _binBE.ui8;\n    a[0] = buff[p + 3];\n    a[1] = buff[p + 2];\n    a[2] = buff[p + 1];\n    a[3] = buff[p + 0];\n    return _binBE.ui32[0];\n  },\n  readASCII: (buff, p, l) => {\n    return l.map(i => String.fromCharCode(buff[p + i])).join('');\n  },\n  readFloat: (buff, p) => {\n    const a = _binBE.ui8;\n    times(4, i => {\n      a[i] = buff[p + 3 - i];\n    });\n    return _binBE.fl32[0];\n  },\n  readDouble: (buff, p) => {\n    const a = _binBE.ui8;\n    times(8, i => {\n      a[i] = buff[p + 7 - i];\n    });\n    return _binBE.fl64[0];\n  },\n  writeUshort: (buff, p, n) => {\n    buff[p] = n >> 8 & 255;\n    buff[p + 1] = n & 255;\n  },\n  writeUint: (buff, p, n) => {\n    buff[p] = n >> 24 & 255;\n    buff[p + 1] = n >> 16 & 255;\n    buff[p + 2] = n >> 8 & 255;\n    buff[p + 3] = n >> 0 & 255;\n  },\n  writeASCII: (buff, p, s) => {\n    times(s.length, i => {\n      buff[p + i] = s.charCodeAt(i);\n    });\n  },\n  ui8: new Uint8Array(8)\n};\n_binBE.fl64 = new Float64Array(_binBE.ui8.buffer);\n_binBE.writeDouble = (buff, p, n) => {\n  _binBE.fl64[0] = n;\n  times(8, i => {\n    buff[p + i] = _binBE.ui8[7 - i];\n  });\n};\nconst _writeIFD = (bin, data, _offset, ifd) => {\n  let offset = _offset;\n  const keys = Object.keys(ifd).filter(key => {\n    return key !== undefined && key !== null && key !== 'undefined';\n  });\n  bin.writeUshort(data, offset, keys.length);\n  offset += 2;\n  let eoff = offset + 12 * keys.length + 4;\n  for (const key of keys) {\n    let tag = null;\n    if (typeof key === 'number') {\n      tag = key;\n    } else if (typeof key === 'string') {\n      tag = parseInt(key, 10);\n    }\n    const typeName = fieldTagTypes[tag];\n    const typeNum = typeName2byte[typeName];\n    if (typeName == null || typeName === undefined || typeof typeName === 'undefined') {\n      throw new Error(`unknown type of tag: ${tag}`);\n    }\n    let val = ifd[key];\n    if (val === undefined) {\n      throw new Error(`failed to get value for key ${key}`);\n    }\n\n    // ASCIIZ format with trailing 0 character\n    // http://www.fileformat.info/format/tiff/corion.htm\n    // https://stackoverflow.com/questions/7783044/whats-the-difference-between-asciiz-vs-ascii\n    if (typeName === 'ASCII' && typeof val === 'string' && endsWith(val, '\\u0000') === false) {\n      val += '\\u0000';\n    }\n    const num = val.length;\n    bin.writeUshort(data, offset, tag);\n    offset += 2;\n    bin.writeUshort(data, offset, typeNum);\n    offset += 2;\n    bin.writeUint(data, offset, num);\n    offset += 4;\n    let dlen = [-1, 1, 1, 2, 4, 8, 0, 0, 0, 0, 0, 0, 8][typeNum] * num;\n    let toff = offset;\n    if (dlen > 4) {\n      bin.writeUint(data, offset, eoff);\n      toff = eoff;\n    }\n    if (typeName === 'ASCII') {\n      bin.writeASCII(data, toff, val);\n    } else if (typeName === 'SHORT') {\n      times(num, i => {\n        bin.writeUshort(data, toff + 2 * i, val[i]);\n      });\n    } else if (typeName === 'LONG') {\n      times(num, i => {\n        bin.writeUint(data, toff + 4 * i, val[i]);\n      });\n    } else if (typeName === 'RATIONAL') {\n      times(num, i => {\n        bin.writeUint(data, toff + 8 * i, Math.round(val[i] * 10000));\n        bin.writeUint(data, toff + 8 * i + 4, 10000);\n      });\n    } else if (typeName === 'DOUBLE') {\n      times(num, i => {\n        bin.writeDouble(data, toff + 8 * i, val[i]);\n      });\n    }\n    if (dlen > 4) {\n      dlen += dlen & 1;\n      eoff += dlen;\n    }\n    offset += 4;\n  }\n  return [offset, eoff];\n};\nconst encodeIfds = ifds => {\n  const data = new Uint8Array(numBytesInIfd);\n  let offset = 4;\n  const bin = _binBE;\n\n  // set big-endian byte-order\n  // https://en.wikipedia.org/wiki/TIFF#Byte_order\n  data[0] = 77;\n  data[1] = 77;\n\n  // set format-version number\n  // https://en.wikipedia.org/wiki/TIFF#Byte_order\n  data[3] = 42;\n  let ifdo = 8;\n  bin.writeUint(data, offset, ifdo);\n  offset += 4;\n  ifds.forEach((ifd, i) => {\n    const noffs = _writeIFD(bin, data, ifdo, ifd);\n    ifdo = noffs[1];\n    if (i < ifds.length - 1) {\n      bin.writeUint(data, noffs[0], ifdo);\n    }\n  });\n  if (data.slice) {\n    return data.slice(0, ifdo).buffer;\n  }\n\n  // node hasn't implemented slice on Uint8Array yet\n  const result = new Uint8Array(ifdo);\n  for (let i = 0; i < ifdo; i++) {\n    result[i] = data[i];\n  }\n  return result.buffer;\n};\nconst encodeImage = (values, width, height, metadata) => {\n  if (height === undefined || height === null) {\n    throw new Error(`you passed into encodeImage a width of type ${height}`);\n  }\n  if (width === undefined || width === null) {\n    throw new Error(`you passed into encodeImage a width of type ${width}`);\n  }\n  const ifd = {\n    256: [width],\n    // ImageWidth\n    257: [height],\n    // ImageLength\n    273: [numBytesInIfd],\n    // strips offset\n    278: [height],\n    // RowsPerStrip\n    305: 'geotiff.js' // no array for ASCII(Z)\n  };\n  if (metadata) {\n    for (const i in metadata) {\n      if (metadata.hasOwnProperty(i)) {\n        ifd[i] = metadata[i];\n      }\n    }\n  }\n  const prfx = new Uint8Array(encodeIfds([ifd]));\n  const img = new Uint8Array(values);\n  const samplesPerPixel = ifd[277];\n  const data = new Uint8Array(numBytesInIfd + width * height * samplesPerPixel);\n  times(prfx.length, i => {\n    data[i] = prfx[i];\n  });\n  forEach(img, (value, i) => {\n    data[numBytesInIfd + i] = value;\n  });\n  return data.buffer;\n};\nconst convertToTids = input => {\n  const result = {};\n  for (const key in input) {\n    if (key !== 'StripOffsets') {\n      if (!name2code[key]) {\n        console.error(key, 'not in name2code:', Object.keys(name2code));\n      }\n      result[name2code[key]] = input[key];\n    }\n  }\n  return result;\n};\nconst toArray = input => {\n  if (Array.isArray(input)) {\n    return input;\n  }\n  return [input];\n};\nconst metadataDefaults = [['Compression', 1],\n// no compression\n['PlanarConfiguration', 1], ['ExtraSamples', 0]];\nexport function writeGeotiff(data, metadata) {\n  const isFlattened = typeof data[0] === 'number';\n  let height;\n  let numBands;\n  let width;\n  let flattenedValues;\n  if (isFlattened) {\n    height = metadata.height || metadata.ImageLength;\n    width = metadata.width || metadata.ImageWidth;\n    numBands = data.length / (height * width);\n    flattenedValues = data;\n  } else {\n    numBands = data.length;\n    height = data[0].length;\n    width = data[0][0].length;\n    flattenedValues = [];\n    times(height, rowIndex => {\n      times(width, columnIndex => {\n        times(numBands, bandIndex => {\n          flattenedValues.push(data[bandIndex][rowIndex][columnIndex]);\n        });\n      });\n    });\n  }\n  metadata.ImageLength = height;\n  delete metadata.height;\n  metadata.ImageWidth = width;\n  delete metadata.width;\n\n  // consult https://www.loc.gov/preservation/digital/formats/content/tiff_tags.shtml\n\n  if (!metadata.BitsPerSample) {\n    metadata.BitsPerSample = times(numBands, () => 8);\n  }\n  metadataDefaults.forEach(tag => {\n    const key = tag[0];\n    if (!metadata[key]) {\n      const value = tag[1];\n      metadata[key] = value;\n    }\n  });\n\n  // The color space of the image data.\n  // 1=black is zero and 2=RGB.\n  if (!metadata.PhotometricInterpretation) {\n    metadata.PhotometricInterpretation = metadata.BitsPerSample.length === 3 ? 2 : 1;\n  }\n\n  // The number of components per pixel.\n  if (!metadata.SamplesPerPixel) {\n    metadata.SamplesPerPixel = [numBands];\n  }\n  if (!metadata.StripByteCounts) {\n    // we are only writing one strip\n    metadata.StripByteCounts = [numBands * height * width];\n  }\n  if (!metadata.ModelPixelScale) {\n    // assumes raster takes up exactly the whole globe\n    metadata.ModelPixelScale = [360 / width, 180 / height, 0];\n  }\n  if (!metadata.SampleFormat) {\n    metadata.SampleFormat = times(numBands, () => 1);\n  }\n\n  // if didn't pass in projection information, assume the popular 4326 \"geographic projection\"\n  if (!metadata.hasOwnProperty('GeographicTypeGeoKey') && !metadata.hasOwnProperty('ProjectedCSTypeGeoKey')) {\n    metadata.GeographicTypeGeoKey = 4326;\n    metadata.ModelTiepoint = [0, 0, 0, -180, 90, 0]; // raster fits whole globe\n    metadata.GeogCitationGeoKey = 'WGS 84';\n    metadata.GTModelTypeGeoKey = 2;\n  }\n  const geoKeys = Object.keys(metadata).filter(key => endsWith(key, 'GeoKey')).sort((a, b) => name2code[a] - name2code[b]);\n  if (!metadata.GeoAsciiParams) {\n    let geoAsciiParams = '';\n    geoKeys.forEach(name => {\n      const code = Number(name2code[name]);\n      const tagType = fieldTagTypes[code];\n      if (tagType === 'ASCII') {\n        geoAsciiParams += `${metadata[name].toString()}\\u0000`;\n      }\n    });\n    if (geoAsciiParams.length > 0) {\n      metadata.GeoAsciiParams = geoAsciiParams;\n    }\n  }\n  if (!metadata.GeoKeyDirectory) {\n    const NumberOfKeys = geoKeys.length;\n    const GeoKeyDirectory = [1, 1, 0, NumberOfKeys];\n    geoKeys.forEach(geoKey => {\n      const KeyID = Number(name2code[geoKey]);\n      GeoKeyDirectory.push(KeyID);\n      let Count;\n      let TIFFTagLocation;\n      let valueOffset;\n      if (fieldTagTypes[KeyID] === 'SHORT') {\n        Count = 1;\n        TIFFTagLocation = 0;\n        valueOffset = metadata[geoKey];\n      } else if (geoKey === 'GeogCitationGeoKey') {\n        Count = metadata.GeoAsciiParams.length;\n        TIFFTagLocation = Number(name2code.GeoAsciiParams);\n        valueOffset = 0;\n      } else {\n        console.log(`[geotiff.js] couldn't get TIFFTagLocation for ${geoKey}`);\n      }\n      GeoKeyDirectory.push(TIFFTagLocation);\n      GeoKeyDirectory.push(Count);\n      GeoKeyDirectory.push(valueOffset);\n    });\n    metadata.GeoKeyDirectory = GeoKeyDirectory;\n  }\n\n  // delete GeoKeys from metadata, because stored in GeoKeyDirectory tag\n  for (const geoKey of geoKeys) {\n    if (metadata.hasOwnProperty(geoKey)) {\n      delete metadata[geoKey];\n    }\n  }\n  ['Compression', 'ExtraSamples', 'GeographicTypeGeoKey', 'GTModelTypeGeoKey', 'GTRasterTypeGeoKey', 'ImageLength',\n  // synonym of ImageHeight\n  'ImageWidth', 'Orientation', 'PhotometricInterpretation', 'ProjectedCSTypeGeoKey', 'PlanarConfiguration', 'ResolutionUnit', 'SamplesPerPixel', 'XPosition', 'YPosition', 'RowsPerStrip'].forEach(name => {\n    if (metadata[name]) {\n      metadata[name] = toArray(metadata[name]);\n    }\n  });\n  const encodedMetadata = convertToTids(metadata);\n  const outputImage = encodeImage(flattenedValues, width, height, encodedMetadata);\n  return outputImage;\n}", "/**\n * A no-op logger\n */\nclass DummyLogger {\n  log() {}\n  debug() {}\n  info() {}\n  warn() {}\n  error() {}\n  time() {}\n  timeEnd() {}\n}\nlet LOGGER = new DummyLogger();\n\n/**\n *\n * @param {object} logger the new logger. e.g `console`\n */\nexport function setLogger(logger = new DummyLogger()) {\n  LOGGER = logger;\n}\nexport function debug(...args) {\n  return LOGGER.debug(...args);\n}\nexport function log(...args) {\n  return LOGGER.log(...args);\n}\nexport function info(...args) {\n  return LOGGER.info(...args);\n}\nexport function warn(...args) {\n  return LOGGER.warn(...args);\n}\nexport function error(...args) {\n  return LOGGER.error(...args);\n}\nexport function time(...args) {\n  return LOGGER.time(...args);\n}\nexport function timeEnd(...args) {\n  return LOGGER.timeEnd(...args);\n}", "/** @module geotiff */\nimport GeoTIFFImage from './geotiffimage.js';\nimport DataView64 from './dataview64.js';\nimport DataSlice from './dataslice.js';\nimport Pool from './pool.js';\nimport { makeRemoteSource, makeCustomSource } from './source/remote.js';\nimport { makeBufferSource } from './source/arraybuffer.js';\nimport { makeFileReaderSource } from './source/filereader.js';\nimport { makeFileSource } from './source/file.js';\nimport { BaseClient, BaseResponse } from './source/client/base.js';\nimport { fieldTypes, fieldTagNames, arrayFields, geoKeyNames } from './globals.js';\nimport { writeGeotiff } from './geotiffwriter.js';\nimport * as globals from './globals.js';\nimport * as rgb from './rgb.js';\nimport { getDecoder, addDecoder } from './compression/index.js';\nimport { setLogger } from './logging.js';\nexport { globals };\nexport { rgb };\nexport { default as BaseDecoder } from './compression/basedecoder.js';\nexport { getDecoder, addDecoder };\nexport { setLogger };\n\n/**\n * @typedef {Uint8Array | Int8Array | Uint16Array | Int16Array | Uint32Array | Int32Array | Float32Array | Float64Array}\n * TypedArray\n */\n\n/**\n * @typedef {{ height:number, width: number }} Dimensions\n */\n\n/**\n * The autogenerated docs are a little confusing here. The effective type is:\n *\n * `TypedArray & { height: number; width: number}`\n * @typedef {TypedArray & Dimensions} TypedArrayWithDimensions\n */\n\n/**\n * The autogenerated docs are a little confusing here. The effective type is:\n *\n * `TypedArray[] & { height: number; width: number}`\n * @typedef {TypedArray[] & Dimensions} TypedArrayArrayWithDimensions\n */\n\n/**\n *  The autogenerated docs are a little confusing here. The effective type is:\n *\n * `(TypedArray | TypedArray[]) & { height: number; width: number}`\n * @typedef {TypedArrayWithDimensions | TypedArrayArrayWithDimensions} ReadRasterResult\n */\n\nfunction getFieldTypeLength(fieldType) {\n  switch (fieldType) {\n    case fieldTypes.BYTE:\n    case fieldTypes.ASCII:\n    case fieldTypes.SBYTE:\n    case fieldTypes.UNDEFINED:\n      return 1;\n    case fieldTypes.SHORT:\n    case fieldTypes.SSHORT:\n      return 2;\n    case fieldTypes.LONG:\n    case fieldTypes.SLONG:\n    case fieldTypes.FLOAT:\n    case fieldTypes.IFD:\n      return 4;\n    case fieldTypes.RATIONAL:\n    case fieldTypes.SRATIONAL:\n    case fieldTypes.DOUBLE:\n    case fieldTypes.LONG8:\n    case fieldTypes.SLONG8:\n    case fieldTypes.IFD8:\n      return 8;\n    default:\n      throw new RangeError(`Invalid field type: ${fieldType}`);\n  }\n}\nfunction parseGeoKeyDirectory(fileDirectory) {\n  const rawGeoKeyDirectory = fileDirectory.GeoKeyDirectory;\n  if (!rawGeoKeyDirectory) {\n    return null;\n  }\n  const geoKeyDirectory = {};\n  for (let i = 4; i <= rawGeoKeyDirectory[3] * 4; i += 4) {\n    const key = geoKeyNames[rawGeoKeyDirectory[i]];\n    const location = rawGeoKeyDirectory[i + 1] ? fieldTagNames[rawGeoKeyDirectory[i + 1]] : null;\n    const count = rawGeoKeyDirectory[i + 2];\n    const offset = rawGeoKeyDirectory[i + 3];\n    let value = null;\n    if (!location) {\n      value = offset;\n    } else {\n      value = fileDirectory[location];\n      if (typeof value === 'undefined' || value === null) {\n        throw new Error(`Could not get value of geoKey '${key}'.`);\n      } else if (typeof value === 'string') {\n        value = value.substring(offset, offset + count - 1);\n      } else if (value.subarray) {\n        value = value.subarray(offset, offset + count);\n        if (count === 1) {\n          value = value[0];\n        }\n      }\n    }\n    geoKeyDirectory[key] = value;\n  }\n  return geoKeyDirectory;\n}\nfunction getValues(dataSlice, fieldType, count, offset) {\n  let values = null;\n  let readMethod = null;\n  const fieldTypeLength = getFieldTypeLength(fieldType);\n  switch (fieldType) {\n    case fieldTypes.BYTE:\n    case fieldTypes.ASCII:\n    case fieldTypes.UNDEFINED:\n      values = new Uint8Array(count);\n      readMethod = dataSlice.readUint8;\n      break;\n    case fieldTypes.SBYTE:\n      values = new Int8Array(count);\n      readMethod = dataSlice.readInt8;\n      break;\n    case fieldTypes.SHORT:\n      values = new Uint16Array(count);\n      readMethod = dataSlice.readUint16;\n      break;\n    case fieldTypes.SSHORT:\n      values = new Int16Array(count);\n      readMethod = dataSlice.readInt16;\n      break;\n    case fieldTypes.LONG:\n    case fieldTypes.IFD:\n      values = new Uint32Array(count);\n      readMethod = dataSlice.readUint32;\n      break;\n    case fieldTypes.SLONG:\n      values = new Int32Array(count);\n      readMethod = dataSlice.readInt32;\n      break;\n    case fieldTypes.LONG8:\n    case fieldTypes.IFD8:\n      values = new Array(count);\n      readMethod = dataSlice.readUint64;\n      break;\n    case fieldTypes.SLONG8:\n      values = new Array(count);\n      readMethod = dataSlice.readInt64;\n      break;\n    case fieldTypes.RATIONAL:\n      values = new Uint32Array(count * 2);\n      readMethod = dataSlice.readUint32;\n      break;\n    case fieldTypes.SRATIONAL:\n      values = new Int32Array(count * 2);\n      readMethod = dataSlice.readInt32;\n      break;\n    case fieldTypes.FLOAT:\n      values = new Float32Array(count);\n      readMethod = dataSlice.readFloat32;\n      break;\n    case fieldTypes.DOUBLE:\n      values = new Float64Array(count);\n      readMethod = dataSlice.readFloat64;\n      break;\n    default:\n      throw new RangeError(`Invalid field type: ${fieldType}`);\n  }\n\n  // normal fields\n  if (!(fieldType === fieldTypes.RATIONAL || fieldType === fieldTypes.SRATIONAL)) {\n    for (let i = 0; i < count; ++i) {\n      values[i] = readMethod.call(dataSlice, offset + i * fieldTypeLength);\n    }\n  } else {\n    // RATIONAL or SRATIONAL\n    for (let i = 0; i < count; i += 2) {\n      values[i] = readMethod.call(dataSlice, offset + i * fieldTypeLength);\n      values[i + 1] = readMethod.call(dataSlice, offset + (i * fieldTypeLength + 4));\n    }\n  }\n  if (fieldType === fieldTypes.ASCII) {\n    return new TextDecoder('utf-8').decode(values);\n  }\n  return values;\n}\n\n/**\n * Data class to store the parsed file directory, geo key directory and\n * offset to the next IFD\n */\nclass ImageFileDirectory {\n  constructor(fileDirectory, geoKeyDirectory, nextIFDByteOffset) {\n    this.fileDirectory = fileDirectory;\n    this.geoKeyDirectory = geoKeyDirectory;\n    this.nextIFDByteOffset = nextIFDByteOffset;\n  }\n}\n\n/**\n * Error class for cases when an IFD index was requested, that does not exist\n * in the file.\n */\nclass GeoTIFFImageIndexError extends Error {\n  constructor(index) {\n    super(`No image at index ${index}`);\n    this.index = index;\n  }\n}\nclass GeoTIFFBase {\n  /**\n   * (experimental) Reads raster data from the best fitting image. This function uses\n   * the image with the lowest resolution that is still a higher resolution than the\n   * requested resolution.\n   * When specified, the `bbox` option is translated to the `window` option and the\n   * `resX` and `resY` to `width` and `height` respectively.\n   * Then, the [readRasters]{@link GeoTIFFImage#readRasters} method of the selected\n   * image is called and the result returned.\n   * @see GeoTIFFImage.readRasters\n   * @param {import('./geotiffimage').ReadRasterOptions} [options={}] optional parameters\n   * @returns {Promise<ReadRasterResult>} the decoded array(s), with `height` and `width`, as a promise\n   */\n  async readRasters(options = {}) {\n    const {\n      window: imageWindow,\n      width,\n      height\n    } = options;\n    let {\n      resX,\n      resY,\n      bbox\n    } = options;\n    const firstImage = await this.getImage();\n    let usedImage = firstImage;\n    const imageCount = await this.getImageCount();\n    const imgBBox = firstImage.getBoundingBox();\n    if (imageWindow && bbox) {\n      throw new Error('Both \"bbox\" and \"window\" passed.');\n    }\n\n    // if width/height is passed, transform it to resolution\n    if (width || height) {\n      // if we have an image window (pixel coordinates), transform it to a BBox\n      // using the origin/resolution of the first image.\n      if (imageWindow) {\n        const [oX, oY] = firstImage.getOrigin();\n        const [rX, rY] = firstImage.getResolution();\n        bbox = [oX + imageWindow[0] * rX, oY + imageWindow[1] * rY, oX + imageWindow[2] * rX, oY + imageWindow[3] * rY];\n      }\n\n      // if we have a bbox (or calculated one)\n\n      const usedBBox = bbox || imgBBox;\n      if (width) {\n        if (resX) {\n          throw new Error('Both width and resX passed');\n        }\n        resX = (usedBBox[2] - usedBBox[0]) / width;\n      }\n      if (height) {\n        if (resY) {\n          throw new Error('Both width and resY passed');\n        }\n        resY = (usedBBox[3] - usedBBox[1]) / height;\n      }\n    }\n\n    // if resolution is set or calculated, try to get the image with the worst acceptable resolution\n    if (resX || resY) {\n      const allImages = [];\n      for (let i = 0; i < imageCount; ++i) {\n        const image = await this.getImage(i);\n        const {\n          SubfileType: subfileType,\n          NewSubfileType: newSubfileType\n        } = image.fileDirectory;\n        if (i === 0 || subfileType === 2 || newSubfileType & 1) {\n          allImages.push(image);\n        }\n      }\n      allImages.sort((a, b) => a.getWidth() - b.getWidth());\n      for (let i = 0; i < allImages.length; ++i) {\n        const image = allImages[i];\n        const imgResX = (imgBBox[2] - imgBBox[0]) / image.getWidth();\n        const imgResY = (imgBBox[3] - imgBBox[1]) / image.getHeight();\n        usedImage = image;\n        if (resX && resX > imgResX || resY && resY > imgResY) {\n          break;\n        }\n      }\n    }\n    let wnd = imageWindow;\n    if (bbox) {\n      const [oX, oY] = firstImage.getOrigin();\n      const [imageResX, imageResY] = usedImage.getResolution(firstImage);\n      wnd = [Math.round((bbox[0] - oX) / imageResX), Math.round((bbox[1] - oY) / imageResY), Math.round((bbox[2] - oX) / imageResX), Math.round((bbox[3] - oY) / imageResY)];\n      wnd = [Math.min(wnd[0], wnd[2]), Math.min(wnd[1], wnd[3]), Math.max(wnd[0], wnd[2]), Math.max(wnd[1], wnd[3])];\n    }\n    return usedImage.readRasters({\n      ...options,\n      window: wnd\n    });\n  }\n}\n\n/**\n * @typedef {Object} GeoTIFFOptions\n * @property {boolean} [cache=false] whether or not decoded tiles shall be cached.\n */\n\n/**\n * The abstraction for a whole GeoTIFF file.\n * @augments GeoTIFFBase\n */\nclass GeoTIFF extends GeoTIFFBase {\n  /**\n   * @constructor\n   * @param {*} source The datasource to read from.\n   * @param {boolean} littleEndian Whether the image uses little endian.\n   * @param {boolean} bigTiff Whether the image uses bigTIFF conventions.\n   * @param {number} firstIFDOffset The numeric byte-offset from the start of the image\n   *                                to the first IFD.\n   * @param {GeoTIFFOptions} [options] further options.\n   */\n  constructor(source, littleEndian, bigTiff, firstIFDOffset, options = {}) {\n    super();\n    this.source = source;\n    this.littleEndian = littleEndian;\n    this.bigTiff = bigTiff;\n    this.firstIFDOffset = firstIFDOffset;\n    this.cache = options.cache || false;\n    this.ifdRequests = [];\n    this.ghostValues = null;\n  }\n  async getSlice(offset, size) {\n    const fallbackSize = this.bigTiff ? 4048 : 1024;\n    return new DataSlice((await this.source.fetch([{\n      offset,\n      length: typeof size !== 'undefined' ? size : fallbackSize\n    }]))[0], offset, this.littleEndian, this.bigTiff);\n  }\n\n  /**\n   * Instructs to parse an image file directory at the given file offset.\n   * As there is no way to ensure that a location is indeed the start of an IFD,\n   * this function must be called with caution (e.g only using the IFD offsets from\n   * the headers or other IFDs).\n   * @param {number} offset the offset to parse the IFD at\n   * @returns {Promise<ImageFileDirectory>} the parsed IFD\n   */\n  async parseFileDirectoryAt(offset) {\n    const entrySize = this.bigTiff ? 20 : 12;\n    const offsetSize = this.bigTiff ? 8 : 2;\n    let dataSlice = await this.getSlice(offset);\n    const numDirEntries = this.bigTiff ? dataSlice.readUint64(offset) : dataSlice.readUint16(offset);\n\n    // if the slice does not cover the whole IFD, request a bigger slice, where the\n    // whole IFD fits: num of entries + n x tag length + offset to next IFD\n    const byteSize = numDirEntries * entrySize + (this.bigTiff ? 16 : 6);\n    if (!dataSlice.covers(offset, byteSize)) {\n      dataSlice = await this.getSlice(offset, byteSize);\n    }\n    const fileDirectory = {};\n\n    // loop over the IFD and create a file directory object\n    let i = offset + (this.bigTiff ? 8 : 2);\n    for (let entryCount = 0; entryCount < numDirEntries; i += entrySize, ++entryCount) {\n      const fieldTag = dataSlice.readUint16(i);\n      const fieldType = dataSlice.readUint16(i + 2);\n      const typeCount = this.bigTiff ? dataSlice.readUint64(i + 4) : dataSlice.readUint32(i + 4);\n      let fieldValues;\n      let value;\n      const fieldTypeLength = getFieldTypeLength(fieldType);\n      const valueOffset = i + (this.bigTiff ? 12 : 8);\n\n      // check whether the value is directly encoded in the tag or refers to a\n      // different external byte range\n      if (fieldTypeLength * typeCount <= (this.bigTiff ? 8 : 4)) {\n        fieldValues = getValues(dataSlice, fieldType, typeCount, valueOffset);\n      } else {\n        // resolve the reference to the actual byte range\n        const actualOffset = dataSlice.readOffset(valueOffset);\n        const length = getFieldTypeLength(fieldType) * typeCount;\n\n        // check, whether we actually cover the referenced byte range; if not,\n        // request a new slice of bytes to read from it\n        if (dataSlice.covers(actualOffset, length)) {\n          fieldValues = getValues(dataSlice, fieldType, typeCount, actualOffset);\n        } else {\n          const fieldDataSlice = await this.getSlice(actualOffset, length);\n          fieldValues = getValues(fieldDataSlice, fieldType, typeCount, actualOffset);\n        }\n      }\n\n      // unpack single values from the array\n      if (typeCount === 1 && arrayFields.indexOf(fieldTag) === -1 && !(fieldType === fieldTypes.RATIONAL || fieldType === fieldTypes.SRATIONAL)) {\n        value = fieldValues[0];\n      } else {\n        value = fieldValues;\n      }\n\n      // write the tags value to the file directly\n      fileDirectory[fieldTagNames[fieldTag]] = value;\n    }\n    const geoKeyDirectory = parseGeoKeyDirectory(fileDirectory);\n    const nextIFDByteOffset = dataSlice.readOffset(offset + offsetSize + entrySize * numDirEntries);\n    return new ImageFileDirectory(fileDirectory, geoKeyDirectory, nextIFDByteOffset);\n  }\n  async requestIFD(index) {\n    // see if we already have that IFD index requested.\n    if (this.ifdRequests[index]) {\n      // attach to an already requested IFD\n      return this.ifdRequests[index];\n    } else if (index === 0) {\n      // special case for index 0\n      this.ifdRequests[index] = this.parseFileDirectoryAt(this.firstIFDOffset);\n      return this.ifdRequests[index];\n    } else if (!this.ifdRequests[index - 1]) {\n      // if the previous IFD was not yet loaded, load that one first\n      // this is the recursive call.\n      try {\n        this.ifdRequests[index - 1] = this.requestIFD(index - 1);\n      } catch (e) {\n        // if the previous one already was an index error, rethrow\n        // with the current index\n        if (e instanceof GeoTIFFImageIndexError) {\n          throw new GeoTIFFImageIndexError(index);\n        }\n        // rethrow anything else\n        throw e;\n      }\n    }\n    // if the previous IFD was loaded, we can finally fetch the one we are interested in.\n    // we need to wrap this in an IIFE, otherwise this.ifdRequests[index] would be delayed\n    this.ifdRequests[index] = (async () => {\n      const previousIfd = await this.ifdRequests[index - 1];\n      if (previousIfd.nextIFDByteOffset === 0) {\n        throw new GeoTIFFImageIndexError(index);\n      }\n      return this.parseFileDirectoryAt(previousIfd.nextIFDByteOffset);\n    })();\n    return this.ifdRequests[index];\n  }\n\n  /**\n   * Get the n-th internal subfile of an image. By default, the first is returned.\n   *\n   * @param {number} [index=0] the index of the image to return.\n   * @returns {Promise<GeoTIFFImage>} the image at the given index\n   */\n  async getImage(index = 0) {\n    const ifd = await this.requestIFD(index);\n    return new GeoTIFFImage(ifd.fileDirectory, ifd.geoKeyDirectory, this.dataView, this.littleEndian, this.cache, this.source);\n  }\n\n  /**\n   * Returns the count of the internal subfiles.\n   *\n   * @returns {Promise<number>} the number of internal subfile images\n   */\n  async getImageCount() {\n    let index = 0;\n    // loop until we run out of IFDs\n    let hasNext = true;\n    while (hasNext) {\n      try {\n        await this.requestIFD(index);\n        ++index;\n      } catch (e) {\n        if (e instanceof GeoTIFFImageIndexError) {\n          hasNext = false;\n        } else {\n          throw e;\n        }\n      }\n    }\n    return index;\n  }\n\n  /**\n   * Get the values of the COG ghost area as a parsed map.\n   * See https://gdal.org/drivers/raster/cog.html#header-ghost-area for reference\n   * @returns {Promise<Object>} the parsed ghost area or null, if no such area was found\n   */\n  async getGhostValues() {\n    const offset = this.bigTiff ? 16 : 8;\n    if (this.ghostValues) {\n      return this.ghostValues;\n    }\n    const detectionString = 'GDAL_STRUCTURAL_METADATA_SIZE=';\n    const heuristicAreaSize = detectionString.length + 100;\n    let slice = await this.getSlice(offset, heuristicAreaSize);\n    if (detectionString === getValues(slice, fieldTypes.ASCII, detectionString.length, offset)) {\n      const valuesString = getValues(slice, fieldTypes.ASCII, heuristicAreaSize, offset);\n      const firstLine = valuesString.split('\\n')[0];\n      const metadataSize = Number(firstLine.split('=')[1].split(' ')[0]) + firstLine.length;\n      if (metadataSize > heuristicAreaSize) {\n        slice = await this.getSlice(offset, metadataSize);\n      }\n      const fullString = getValues(slice, fieldTypes.ASCII, metadataSize, offset);\n      this.ghostValues = {};\n      fullString.split('\\n').filter(line => line.length > 0).map(line => line.split('=')).forEach(([key, value]) => {\n        this.ghostValues[key] = value;\n      });\n    }\n    return this.ghostValues;\n  }\n\n  /**\n   * Parse a (Geo)TIFF file from the given source.\n   *\n   * @param {*} source The source of data to parse from.\n   * @param {GeoTIFFOptions} [options] Additional options.\n   * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n   *                               to be aborted\n   */\n  static async fromSource(source, options, signal) {\n    const headerData = (await source.fetch([{\n      offset: 0,\n      length: 1024\n    }], signal))[0];\n    const dataView = new DataView64(headerData);\n    const BOM = dataView.getUint16(0, 0);\n    let littleEndian;\n    if (BOM === 0x4949) {\n      littleEndian = true;\n    } else if (BOM === 0x4D4D) {\n      littleEndian = false;\n    } else {\n      throw new TypeError('Invalid byte order value.');\n    }\n    const magicNumber = dataView.getUint16(2, littleEndian);\n    let bigTiff;\n    if (magicNumber === 42) {\n      bigTiff = false;\n    } else if (magicNumber === 43) {\n      bigTiff = true;\n      const offsetByteSize = dataView.getUint16(4, littleEndian);\n      if (offsetByteSize !== 8) {\n        throw new Error('Unsupported offset byte-size.');\n      }\n    } else {\n      throw new TypeError('Invalid magic number.');\n    }\n    const firstIFDOffset = bigTiff ? dataView.getUint64(8, littleEndian) : dataView.getUint32(4, littleEndian);\n    return new GeoTIFF(source, littleEndian, bigTiff, firstIFDOffset, options);\n  }\n\n  /**\n   * Closes the underlying file buffer\n   * N.B. After the GeoTIFF has been completely processed it needs\n   * to be closed but only if it has been constructed from a file.\n   */\n  close() {\n    if (typeof this.source.close === 'function') {\n      return this.source.close();\n    }\n    return false;\n  }\n}\nexport { GeoTIFF };\nexport default GeoTIFF;\n\n/**\n * Wrapper for GeoTIFF files that have external overviews.\n * @augments GeoTIFFBase\n */\nclass MultiGeoTIFF extends GeoTIFFBase {\n  /**\n   * Construct a new MultiGeoTIFF from a main and several overview files.\n   * @param {GeoTIFF} mainFile The main GeoTIFF file.\n   * @param {GeoTIFF[]} overviewFiles An array of overview files.\n   */\n  constructor(mainFile, overviewFiles) {\n    super();\n    this.mainFile = mainFile;\n    this.overviewFiles = overviewFiles;\n    this.imageFiles = [mainFile].concat(overviewFiles);\n    this.fileDirectoriesPerFile = null;\n    this.fileDirectoriesPerFileParsing = null;\n    this.imageCount = null;\n  }\n  async parseFileDirectoriesPerFile() {\n    const requests = [this.mainFile.parseFileDirectoryAt(this.mainFile.firstIFDOffset)].concat(this.overviewFiles.map(file => file.parseFileDirectoryAt(file.firstIFDOffset)));\n    this.fileDirectoriesPerFile = await Promise.all(requests);\n    return this.fileDirectoriesPerFile;\n  }\n\n  /**\n   * Get the n-th internal subfile of an image. By default, the first is returned.\n   *\n   * @param {number} [index=0] the index of the image to return.\n   * @returns {Promise<GeoTIFFImage>} the image at the given index\n   */\n  async getImage(index = 0) {\n    await this.getImageCount();\n    await this.parseFileDirectoriesPerFile();\n    let visited = 0;\n    let relativeIndex = 0;\n    for (let i = 0; i < this.imageFiles.length; i++) {\n      const imageFile = this.imageFiles[i];\n      for (let ii = 0; ii < this.imageCounts[i]; ii++) {\n        if (index === visited) {\n          const ifd = await imageFile.requestIFD(relativeIndex);\n          return new GeoTIFFImage(ifd.fileDirectory, ifd.geoKeyDirectory, imageFile.dataView, imageFile.littleEndian, imageFile.cache, imageFile.source);\n        }\n        visited++;\n        relativeIndex++;\n      }\n      relativeIndex = 0;\n    }\n    throw new RangeError('Invalid image index');\n  }\n\n  /**\n   * Returns the count of the internal subfiles.\n   *\n   * @returns {Promise<number>} the number of internal subfile images\n   */\n  async getImageCount() {\n    if (this.imageCount !== null) {\n      return this.imageCount;\n    }\n    const requests = [this.mainFile.getImageCount()].concat(this.overviewFiles.map(file => file.getImageCount()));\n    this.imageCounts = await Promise.all(requests);\n    this.imageCount = this.imageCounts.reduce((count, ifds) => count + ifds, 0);\n    return this.imageCount;\n  }\n}\nexport { MultiGeoTIFF };\n\n/**\n * Creates a new GeoTIFF from a remote URL.\n * @param {string} url The URL to access the image from\n * @param {object} [options] Additional options to pass to the source.\n *                           See {@link makeRemoteSource} for details.\n * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n *                               to be aborted\n * @returns {Promise<GeoTIFF>} The resulting GeoTIFF file.\n */\nexport async function fromUrl(url, options = {}, signal) {\n  return GeoTIFF.fromSource(makeRemoteSource(url, options), signal);\n}\n\n/**\n * Creates a new GeoTIFF from a custom {@link BaseClient}.\n * @param {BaseClient} client The client.\n * @param {object} [options] Additional options to pass to the source.\n *                           See {@link makeRemoteSource} for details.\n * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n *                               to be aborted\n * @returns {Promise<GeoTIFF>} The resulting GeoTIFF file.\n */\nexport async function fromCustomClient(client, options = {}, signal) {\n  return GeoTIFF.fromSource(makeCustomSource(client, options), signal);\n}\n\n/**\n * Construct a new GeoTIFF from an\n * [ArrayBuffer]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer}.\n * @param {ArrayBuffer} arrayBuffer The data to read the file from.\n * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n *                               to be aborted\n * @returns {Promise<GeoTIFF>} The resulting GeoTIFF file.\n */\nexport async function fromArrayBuffer(arrayBuffer, signal) {\n  return GeoTIFF.fromSource(makeBufferSource(arrayBuffer), signal);\n}\n\n/**\n * Construct a GeoTIFF from a local file path. This uses the node\n * [filesystem API]{@link https://nodejs.org/api/fs.html} and is\n * not available on browsers.\n *\n * N.B. After the GeoTIFF has been completely processed it needs\n * to be closed but only if it has been constructed from a file.\n * @param {string} path The file path to read from.\n * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n *                               to be aborted\n * @returns {Promise<GeoTIFF>} The resulting GeoTIFF file.\n */\nexport async function fromFile(path, signal) {\n  return GeoTIFF.fromSource(makeFileSource(path), signal);\n}\n\n/**\n * Construct a GeoTIFF from an HTML\n * [Blob]{@link https://developer.mozilla.org/en-US/docs/Web/API/Blob} or\n * [File]{@link https://developer.mozilla.org/en-US/docs/Web/API/File}\n * object.\n * @param {Blob|File} blob The Blob or File object to read from.\n * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n *                               to be aborted\n * @returns {Promise<GeoTIFF>} The resulting GeoTIFF file.\n */\nexport async function fromBlob(blob, signal) {\n  return GeoTIFF.fromSource(makeFileReaderSource(blob), signal);\n}\n\n/**\n * Construct a MultiGeoTIFF from the given URLs.\n * @param {string} mainUrl The URL for the main file.\n * @param {string[]} overviewUrls An array of URLs for the overview images.\n * @param {Object} [options] Additional options to pass to the source.\n *                           See [makeRemoteSource]{@link module:source.makeRemoteSource}\n *                           for details.\n * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n *                               to be aborted\n * @returns {Promise<MultiGeoTIFF>} The resulting MultiGeoTIFF file.\n */\nexport async function fromUrls(mainUrl, overviewUrls = [], options = {}, signal) {\n  const mainFile = await GeoTIFF.fromSource(makeRemoteSource(mainUrl, options), signal);\n  const overviewFiles = await Promise.all(overviewUrls.map(url => GeoTIFF.fromSource(makeRemoteSource(url, options))));\n  return new MultiGeoTIFF(mainFile, overviewFiles);\n}\n\n/**\n * Main creating function for GeoTIFF files.\n * @param {(Array)} array of pixel values\n * @returns {metadata} metadata\n */\nexport function writeArrayBuffer(values, metadata) {\n  return writeGeotiff(values, metadata);\n}\nexport { Pool };\nexport { GeoTIFFImage };\nexport { BaseClient, BaseResponse };", "/**\n * @module ol/source/GeoTIFF\n */\nimport DataTile from './DataTile.js';\nimport TileGrid from '../tilegrid/TileGrid.js';\nimport { Pool, globals as geotiffGlobals, fromBlob as tiffFromBlob, fromUrl as tiffFromUrl, fromUrls as tiffFromUrls } from 'geotiff';\nimport { Projection, createTransformFromCoordinateTransform, get as getCachedProjection, toUserCoordinate, toUserExtent } from '../proj.js';\nimport { apply as applyMatrix, create as createMatrix, makeInverse, multiply as multiplyTransform } from '../transform.js';\nimport { applyTransform, getCenter, getIntersection } from '../extent.js';\nimport { clamp } from '../math.js';\nimport { error as logError } from '../console.js';\nimport { fromCode as unitsFromCode } from '../proj/Units.js';\n\n/**\n * Determine if an image type is a mask.\n * See https://www.awaresystems.be/imaging/tiff/tifftags/newsubfiletype.html\n * @param {GeoTIFFImage} image The image.\n * @return {boolean} The image is a mask.\n */\nfunction isMask(image) {\n  const fileDirectory = image.fileDirectory;\n  const type = fileDirectory.NewSubfileType || 0;\n  return (type & 4) === 4;\n}\n\n/**\n * @param {true|false|'auto'} preference The convertToRGB option.\n * @param {GeoTIFFImage} image The image.\n * @return {boolean} Use the `image.readRGB()` method.\n */\nfunction readRGB(preference, image) {\n  if (!preference) {\n    return false;\n  }\n  if (preference === true) {\n    return true;\n  }\n  if (image.getSamplesPerPixel() !== 3) {\n    return false;\n  }\n  const interpretation = image.fileDirectory.PhotometricInterpretation;\n  const interpretations = geotiffGlobals.photometricInterpretations;\n  return interpretation === interpretations.CMYK || interpretation === interpretations.YCbCr || interpretation === interpretations.CIELab || interpretation === interpretations.ICCLab;\n}\n\n/**\n * @typedef {Object} SourceInfo\n * @property {string} [url] URL for the source GeoTIFF.\n * @property {Array<string>} [overviews] List of any overview URLs, only applies if the url parameter is given.\n * @property {Blob} [blob] Blob containing the source GeoTIFF. `blob` and `url` are mutually exclusive.\n * @property {number} [min=0] The minimum source data value.  Rendered values are scaled from 0 to 1 based on\n * the configured min and max.  If not provided and raster statistics are available, those will be used instead.\n * If neither are available, the minimum for the data type will be used.  To disable this behavior, set\n * the `normalize` option to `false` in the constructor.\n * @property {number} [max] The maximum source data value.  Rendered values are scaled from 0 to 1 based on\n * the configured min and max.  If not provided and raster statistics are available, those will be used instead.\n * If neither are available, the maximum for the data type will be used.  To disable this behavior, set\n * the `normalize` option to `false` in the constructor.\n * @property {number} [nodata] Values to discard (overriding any nodata values in the metadata).\n * When provided, an additional alpha band will be added to the data.  Often the GeoTIFF metadata\n * will include information about nodata values, so you should only need to set this property if\n * you find that it is not already extracted from the metadata.\n * @property {Array<number>} [bands] Band numbers to be read from (where the first band is `1`). If not provided, all bands will\n * be read. For example, if a GeoTIFF has blue (1), green (2), red (3), and near-infrared (4) bands, and you only need the\n * near-infrared band, configure `bands: [4]`.\n */\n\n/**\n * @typedef {Object} GeoKeys\n * @property {number} GTModelTypeGeoKey Model type.\n * @property {number} GTRasterTypeGeoKey Raster type.\n * @property {number} GeogAngularUnitsGeoKey Angular units.\n * @property {number} GeogInvFlatteningGeoKey Inverse flattening.\n * @property {number} GeogSemiMajorAxisGeoKey Semi-major axis.\n * @property {number} GeographicTypeGeoKey Geographic coordinate system code.\n * @property {number} ProjLinearUnitsGeoKey Projected linear unit code.\n * @property {number} ProjectedCSTypeGeoKey Projected coordinate system code.\n */\n\n/**\n * @typedef {import(\"geotiff\").GeoTIFF} GeoTIFF\n */\n\n/**\n * @typedef {import(\"geotiff\").MultiGeoTIFF} MultiGeoTIFF\n */\n\n/**\n * @typedef {Object} GDALMetadata\n * @property {string} STATISTICS_MINIMUM The minimum value (as a string).\n * @property {string} STATISTICS_MAXIMUM The maximum value (as a string).\n */\n\nconst STATISTICS_MAXIMUM = 'STATISTICS_MAXIMUM';\nconst STATISTICS_MINIMUM = 'STATISTICS_MINIMUM';\nconst defaultTileSize = 256;\n\n/**\n * @typedef {import(\"geotiff\").GeoTIFFImage} GeoTIFFImage\n */\n\nlet workerPool;\nfunction getWorkerPool() {\n  if (!workerPool) {\n    workerPool = new Pool();\n  }\n  return workerPool;\n}\n\n/**\n * Get the bounding box of an image.  If the image does not have an affine transform,\n * the pixel bounds are returned.\n * @param {GeoTIFFImage} image The image.\n * @return {Array<number>} The image bounding box.\n */\nfunction getBoundingBox(image) {\n  try {\n    return image.getBoundingBox(true);\n  } catch (_) {\n    return [0, 0, image.getWidth(), image.getHeight()];\n  }\n}\n\n/**\n * Get the origin of an image.  If the image does not have an affine transform,\n * the top-left corner of the pixel bounds is returned.\n * @param {GeoTIFFImage} image The image.\n * @return {Array<number>} The image origin.\n */\nfunction getOrigin(image) {\n  try {\n    return image.getOrigin().slice(0, 2);\n  } catch (_) {\n    return [0, image.getHeight()];\n  }\n}\n\n/**\n * Get the resolution of an image.  If the image does not have an affine transform,\n * the width of the image is compared with the reference image.\n * @param {GeoTIFFImage} image The image.\n * @param {GeoTIFFImage} referenceImage The reference image.\n * @return {Array<number>} The map x and y units per pixel.\n */\nfunction getResolutions(image, referenceImage) {\n  try {\n    return image.getResolution(referenceImage);\n  } catch (_) {\n    return [referenceImage.getWidth() / image.getWidth(), referenceImage.getHeight() / image.getHeight()];\n  }\n}\n\n/**\n * @param {GeoTIFFImage} image A GeoTIFF.\n * @return {import(\"../proj/Projection.js\").default} The image projection.\n */\nfunction getProjection(image) {\n  const geoKeys = image.geoKeys;\n  if (!geoKeys) {\n    return null;\n  }\n  if (geoKeys.ProjectedCSTypeGeoKey && geoKeys.ProjectedCSTypeGeoKey !== 32767) {\n    const code = 'EPSG:' + geoKeys.ProjectedCSTypeGeoKey;\n    let projection = getCachedProjection(code);\n    if (!projection) {\n      const units = unitsFromCode(geoKeys.ProjLinearUnitsGeoKey);\n      if (units) {\n        projection = new Projection({\n          code: code,\n          units: units\n        });\n      }\n    }\n    return projection;\n  }\n  if (geoKeys.GeographicTypeGeoKey && geoKeys.GeographicTypeGeoKey !== 32767) {\n    const code = 'EPSG:' + geoKeys.GeographicTypeGeoKey;\n    let projection = getCachedProjection(code);\n    if (!projection) {\n      const units = unitsFromCode(geoKeys.GeogAngularUnitsGeoKey);\n      if (units) {\n        projection = new Projection({\n          code: code,\n          units: units\n        });\n      }\n    }\n    return projection;\n  }\n  return null;\n}\n\n/**\n * @param {GeoTIFF|MultiGeoTIFF} tiff A GeoTIFF.\n * @return {Promise<Array<GeoTIFFImage>>} Resolves to a list of images.\n */\nfunction getImagesForTIFF(tiff) {\n  return tiff.getImageCount().then(function (count) {\n    const requests = new Array(count);\n    for (let i = 0; i < count; ++i) {\n      requests[i] = tiff.getImage(i);\n    }\n    return Promise.all(requests);\n  });\n}\n\n/**\n * @param {SourceInfo} source The GeoTIFF source.\n * @param {Object} options Options for the GeoTIFF source.\n * @return {Promise<Array<GeoTIFFImage>>} Resolves to a list of images.\n */\nfunction getImagesForSource(source, options) {\n  let request;\n  if (source.blob) {\n    request = tiffFromBlob(source.blob);\n  } else if (source.overviews) {\n    request = tiffFromUrls(source.url, source.overviews, options);\n  } else {\n    request = tiffFromUrl(source.url, options);\n  }\n  return request.then(getImagesForTIFF);\n}\n\n/**\n * @param {number|Array<number>|Array<Array<number>>} expected Expected value.\n * @param {number|Array<number>|Array<Array<number>>} got Actual value.\n * @param {number} tolerance Accepted tolerance in fraction of expected between expected and got.\n * @param {string} message The error message.\n * @param {function(Error):void} rejector A function to be called with any error.\n */\nfunction assertEqual(expected, got, tolerance, message, rejector) {\n  if (Array.isArray(expected)) {\n    const length = expected.length;\n    if (!Array.isArray(got) || length != got.length) {\n      const error = new Error(message);\n      rejector(error);\n      throw error;\n    }\n    for (let i = 0; i < length; ++i) {\n      assertEqual(expected[i], got[i], tolerance, message, rejector);\n    }\n    return;\n  }\n  got = /** @type {number} */got;\n  if (Math.abs(expected - got) > tolerance * expected) {\n    throw new Error(message);\n  }\n}\n\n/**\n * @param {Array} array The data array.\n * @return {number} The minimum value.\n */\nfunction getMinForDataType(array) {\n  if (array instanceof Int8Array) {\n    return -128;\n  }\n  if (array instanceof Int16Array) {\n    return -32768;\n  }\n  if (array instanceof Int32Array) {\n    return -2147483648;\n  }\n  if (array instanceof Float32Array) {\n    return 1.2e-38;\n  }\n  return 0;\n}\n\n/**\n * @param {Array} array The data array.\n * @return {number} The maximum value.\n */\nfunction getMaxForDataType(array) {\n  if (array instanceof Int8Array) {\n    return 127;\n  }\n  if (array instanceof Uint8Array) {\n    return 255;\n  }\n  if (array instanceof Uint8ClampedArray) {\n    return 255;\n  }\n  if (array instanceof Int16Array) {\n    return 32767;\n  }\n  if (array instanceof Uint16Array) {\n    return 65535;\n  }\n  if (array instanceof Int32Array) {\n    return 2147483647;\n  }\n  if (array instanceof Uint32Array) {\n    return 4294967295;\n  }\n  if (array instanceof Float32Array) {\n    return 3.4e38;\n  }\n  return 255;\n}\n\n/**\n * @typedef {Object} GeoTIFFSourceOptions\n * @property {boolean} [forceXHR=false] Whether to force the usage of the browsers XMLHttpRequest API.\n * @property {Object<string, string>} [headers] additional key-value pairs of headers to be passed with each request. Key is the header name, value the header value.\n * @property {string} [credentials] How credentials shall be handled. See\n * https://developer.mozilla.org/en-US/docs/Web/API/fetch for reference and possible values\n * @property {number} [maxRanges] The maximum amount of ranges to request in a single multi-range request.\n * By default only a single range is used.\n * @property {boolean} [allowFullFile=false] Whether or not a full file is accepted when only a portion is\n * requested. Only use this when you know the source image to be small enough to fit in memory.\n * @property {number} [blockSize=65536] The block size to use.\n * @property {number} [cacheSize=100] The number of blocks that shall be held in a LRU cache.\n */\n\n/**\n * @typedef {Object} Options\n * @property {Array<SourceInfo>} sources List of information about GeoTIFF sources.\n * Multiple sources can be combined when their resolution sets are equal after applying a scale.\n * The list of sources defines a mapping between input bands as they are read from each GeoTIFF and\n * the output bands that are provided by data tiles. To control which bands to read from each GeoTIFF,\n * use the {@link import(\"./GeoTIFF.js\").SourceInfo bands} property. If, for example, you specify two\n * sources, one with 3 bands and {@link import(\"./GeoTIFF.js\").SourceInfo nodata} configured, and\n * another with 1 band, the resulting data tiles will have 5 bands: 3 from the first source, 1 alpha\n * band from the first source, and 1 band from the second source.\n * @property {GeoTIFFSourceOptions} [sourceOptions] Additional options to be passed to [geotiff.js](https://geotiffjs.github.io/geotiff.js/module-geotiff.html)'s `fromUrl` or `fromUrls` methods.\n * @property {true|false|'auto'} [convertToRGB=false] By default, bands from the sources are read as-is. When\n * reading GeoTIFFs with the purpose of displaying them as RGB images, setting this to `true` will\n * convert other color spaces (YCbCr, CMYK) to RGB.  Setting the option to `'auto'` will make it so CMYK, YCbCr,\n * CIELab, and ICCLab images will automatically be converted to RGB.\n * @property {boolean} [normalize=true] By default, the source data is normalized to values between\n * 0 and 1 with scaling factors based on the raster statistics or `min` and `max` properties of each source.\n * If instead you want to work with the raw values in a style expression, set this to `false`.  Setting this option\n * to `false` will make it so any `min` and `max` properties on sources are ignored.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Source projection.  If not provided, the GeoTIFF metadata\n * will be read for projection information.\n * @property {number} [transition=250] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {boolean} [wrapX=false] Render tiles beyond the tile grid extent.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * the linear interpolation is used to resample the data.  If false, nearest neighbor is used.\n */\n\n/**\n * @classdesc\n * A source for working with GeoTIFF data.\n * **Note for users of the full build**: The `GeoTIFF` source requires the\n * [geotiff.js](https://github.com/geotiffjs/geotiff.js) library to be loaded as well.\n *\n * @api\n */\nclass GeoTIFFSource extends DataTile {\n  /**\n   * @param {Options} options Data tile options.\n   */\n  constructor(options) {\n    super({\n      state: 'loading',\n      tileGrid: null,\n      projection: options.projection || null,\n      transition: options.transition,\n      interpolate: options.interpolate !== false,\n      wrapX: options.wrapX\n    });\n\n    /**\n     * @type {Array<SourceInfo>}\n     * @private\n     */\n    this.sourceInfo_ = options.sources;\n    const numSources = this.sourceInfo_.length;\n\n    /**\n     * @type {Object}\n     * @private\n     */\n    this.sourceOptions_ = options.sourceOptions;\n\n    /**\n     * @type {Array<Array<GeoTIFFImage>>}\n     * @private\n     */\n    this.sourceImagery_ = new Array(numSources);\n\n    /**\n     * @type {Array<Array<GeoTIFFImage>>}\n     * @private\n     */\n    this.sourceMasks_ = new Array(numSources);\n\n    /**\n     * @type {Array<number>}\n     * @private\n     */\n    this.resolutionFactors_ = new Array(numSources);\n\n    /**\n     * @type {Array<number>}\n     * @private\n     */\n    this.samplesPerPixel_;\n\n    /**\n     * @type {Array<Array<number>>}\n     * @private\n     */\n    this.nodataValues_;\n\n    /**\n     * @type {Array<Array<GDALMetadata>>}\n     * @private\n     */\n    this.metadata_;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.normalize_ = options.normalize !== false;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.addAlpha_ = false;\n\n    /**\n     * @type {Error}\n     * @private\n     */\n    this.error_ = null;\n\n    /**\n     * @type {true|false|'auto'}\n     * @private\n     */\n    this.convertToRGB_ = options.convertToRGB || false;\n    this.setKey(this.sourceInfo_.map(source => source.url).join(','));\n    const self = this;\n    const requests = new Array(numSources);\n    for (let i = 0; i < numSources; ++i) {\n      requests[i] = getImagesForSource(this.sourceInfo_[i], this.sourceOptions_);\n    }\n    Promise.all(requests).then(function (sources) {\n      self.configure_(sources);\n    }).catch(function (error) {\n      logError(error);\n      self.error_ = error;\n      self.setState('error');\n    });\n  }\n\n  /**\n   * @return {Error} A source loading error. When the source state is `error`, use this function\n   * to get more information about the error. To debug a faulty configuration, you may want to use\n   * a listener like\n   * ```js\n   * geotiffSource.on('change', () => {\n   *   if (geotiffSource.getState() === 'error') {\n   *     console.error(geotiffSource.getError());\n   *   }\n   * });\n   * ```\n   */\n  getError() {\n    return this.error_;\n  }\n\n  /**\n   * Determine the projection of the images in this GeoTIFF.\n   * The default implementation looks at the ProjectedCSTypeGeoKey and the GeographicTypeGeoKey\n   * of each image in turn.\n   * You can override this method in a subclass to support more projections.\n   *\n   * @param {Array<Array<GeoTIFFImage>>} sources Each source is a list of images\n   * from a single GeoTIFF.\n   */\n  determineProjection(sources) {\n    const firstSource = sources[0];\n    for (let i = firstSource.length - 1; i >= 0; --i) {\n      const image = firstSource[i];\n      const projection = getProjection(image);\n      if (projection) {\n        this.projection = projection;\n        break;\n      }\n    }\n  }\n\n  /**\n   * Determine any transform matrix for the images in this GeoTIFF.\n   *\n   * @param {Array<Array<GeoTIFFImage>>} sources Each source is a list of images\n   * from a single GeoTIFF.\n   */\n  determineTransformMatrix(sources) {\n    const firstSource = sources[0];\n    for (let i = firstSource.length - 1; i >= 0; --i) {\n      const image = firstSource[i];\n      const modelTransformation = image.fileDirectory.ModelTransformation;\n      if (modelTransformation) {\n        // eslint-disable-next-line no-unused-vars\n        const [a, b, c, d, e, f, g, h] = modelTransformation;\n        const matrix = multiplyTransform(multiplyTransform([1 / Math.sqrt(a * a + e * e), 0, 0, -1 / Math.sqrt(b * b + f * f), d, h], [a, e, b, f, 0, 0]), [1, 0, 0, 1, -d, -h]);\n        this.transformMatrix = matrix;\n        this.addAlpha_ = true;\n        break;\n      }\n    }\n  }\n\n  /**\n   * Configure the tile grid based on images within the source GeoTIFFs.  Each GeoTIFF\n   * must have the same internal tiled structure.\n   * @param {Array<Array<GeoTIFFImage>>} sources Each source is a list of images\n   * from a single GeoTIFF.\n   * @private\n   */\n  configure_(sources) {\n    let extent;\n    let origin;\n    let commonRenderTileSizes;\n    let commonSourceTileSizes;\n    let resolutions;\n    const samplesPerPixel = new Array(sources.length);\n    const nodataValues = new Array(sources.length);\n    const metadata = new Array(sources.length);\n    let minZoom = 0;\n    const sourceCount = sources.length;\n    for (let sourceIndex = 0; sourceIndex < sourceCount; ++sourceIndex) {\n      const images = [];\n      const masks = [];\n      sources[sourceIndex].forEach(item => {\n        if (isMask(item)) {\n          masks.push(item);\n        } else {\n          images.push(item);\n        }\n      });\n      const imageCount = images.length;\n      if (masks.length > 0 && masks.length !== imageCount) {\n        throw new Error(`Expected one mask per image found ${masks.length} masks and ${imageCount} images`);\n      }\n      let sourceExtent;\n      let sourceOrigin;\n      const sourceTileSizes = new Array(imageCount);\n      const renderTileSizes = new Array(imageCount);\n      const sourceResolutions = new Array(imageCount);\n      nodataValues[sourceIndex] = new Array(imageCount);\n      metadata[sourceIndex] = new Array(imageCount);\n      for (let imageIndex = 0; imageIndex < imageCount; ++imageIndex) {\n        const image = images[imageIndex];\n        const nodataValue = image.getGDALNoData();\n        metadata[sourceIndex][imageIndex] = image.getGDALMetadata(0);\n        nodataValues[sourceIndex][imageIndex] = nodataValue;\n        const wantedSamples = this.sourceInfo_[sourceIndex].bands;\n        samplesPerPixel[sourceIndex] = wantedSamples ? wantedSamples.length : image.getSamplesPerPixel();\n        const level = imageCount - (imageIndex + 1);\n        if (!sourceExtent) {\n          sourceExtent = getBoundingBox(image);\n        }\n        if (!sourceOrigin) {\n          sourceOrigin = getOrigin(image);\n        }\n        const imageResolutions = getResolutions(image, images[0]);\n        sourceResolutions[level] = imageResolutions[0];\n        const sourceTileSize = [image.getTileWidth(), image.getTileHeight()];\n\n        // request larger blocks for untiled layouts\n        if (sourceTileSize[0] !== sourceTileSize[1] && sourceTileSize[1] < defaultTileSize) {\n          sourceTileSize[0] = defaultTileSize;\n          sourceTileSize[1] = defaultTileSize;\n        }\n        sourceTileSizes[level] = sourceTileSize;\n        const aspectRatio = imageResolutions[0] / Math.abs(imageResolutions[1]);\n        renderTileSizes[level] = [sourceTileSize[0], sourceTileSize[1] / aspectRatio];\n      }\n      if (!extent) {\n        extent = sourceExtent;\n      } else {\n        getIntersection(extent, sourceExtent, extent);\n      }\n      if (!origin) {\n        origin = sourceOrigin;\n      } else {\n        const message = `Origin mismatch for source ${sourceIndex}, got [${sourceOrigin}] but expected [${origin}]`;\n        assertEqual(origin, sourceOrigin, 0, message, this.viewRejector);\n      }\n      if (!resolutions) {\n        resolutions = sourceResolutions;\n        this.resolutionFactors_[sourceIndex] = 1;\n      } else {\n        if (resolutions.length - minZoom > sourceResolutions.length) {\n          minZoom = resolutions.length - sourceResolutions.length;\n        }\n        const resolutionFactor = resolutions[resolutions.length - 1] / sourceResolutions[sourceResolutions.length - 1];\n        this.resolutionFactors_[sourceIndex] = resolutionFactor;\n        const scaledSourceResolutions = sourceResolutions.map(resolution => resolution *= resolutionFactor);\n        const message = `Resolution mismatch for source ${sourceIndex}, got [${scaledSourceResolutions}] but expected [${resolutions}]`;\n        assertEqual(resolutions.slice(minZoom, resolutions.length), scaledSourceResolutions, 0.02, message, this.viewRejector);\n      }\n      if (!commonRenderTileSizes) {\n        commonRenderTileSizes = renderTileSizes;\n      } else {\n        assertEqual(commonRenderTileSizes.slice(minZoom, commonRenderTileSizes.length), renderTileSizes, 0.01, `Tile size mismatch for source ${sourceIndex}`, this.viewRejector);\n      }\n      if (!commonSourceTileSizes) {\n        commonSourceTileSizes = sourceTileSizes;\n      } else {\n        assertEqual(commonSourceTileSizes.slice(minZoom, commonSourceTileSizes.length), sourceTileSizes, 0, `Tile size mismatch for source ${sourceIndex}`, this.viewRejector);\n      }\n      this.sourceImagery_[sourceIndex] = images.reverse();\n      this.sourceMasks_[sourceIndex] = masks.reverse();\n    }\n    for (let i = 0, ii = this.sourceImagery_.length; i < ii; ++i) {\n      const sourceImagery = this.sourceImagery_[i];\n      while (sourceImagery.length < resolutions.length) {\n        sourceImagery.unshift(undefined);\n      }\n    }\n    if (!this.getProjection()) {\n      this.determineProjection(sources);\n    }\n    this.determineTransformMatrix(sources);\n    this.samplesPerPixel_ = samplesPerPixel;\n    this.nodataValues_ = nodataValues;\n    this.metadata_ = metadata;\n\n    // decide if we need to add an alpha band to handle nodata\n    outer: for (let sourceIndex = 0; sourceIndex < sourceCount; ++sourceIndex) {\n      // option 1: source is configured with a nodata value\n      if (this.sourceInfo_[sourceIndex].nodata !== undefined) {\n        this.addAlpha_ = true;\n        break;\n      }\n      if (this.sourceMasks_[sourceIndex].length) {\n        this.addAlpha_ = true;\n        break;\n      }\n      const values = nodataValues[sourceIndex];\n\n      // option 2: check image metadata for limited bands\n      const bands = this.sourceInfo_[sourceIndex].bands;\n      if (bands) {\n        for (let i = 0; i < bands.length; ++i) {\n          if (values[bands[i] - 1] !== null) {\n            this.addAlpha_ = true;\n            break outer;\n          }\n        }\n        continue;\n      }\n\n      // option 3: check image metadata for all bands\n      for (let imageIndex = 0; imageIndex < values.length; ++imageIndex) {\n        if (values[imageIndex] !== null) {\n          this.addAlpha_ = true;\n          break outer;\n        }\n      }\n    }\n    let bandCount = this.addAlpha_ ? 1 : 0;\n    for (let sourceIndex = 0; sourceIndex < sourceCount; ++sourceIndex) {\n      bandCount += samplesPerPixel[sourceIndex];\n    }\n    this.bandCount = bandCount;\n    const tileGrid = new TileGrid({\n      extent: extent,\n      minZoom: minZoom,\n      origin: origin,\n      resolutions: resolutions,\n      tileSizes: commonRenderTileSizes\n    });\n    this.tileGrid = tileGrid;\n    this.setTileSizes(commonSourceTileSizes);\n    this.setLoader(this.loadTile_.bind(this));\n    this.setState('ready');\n    const zoom = 1;\n    if (resolutions.length === 2) {\n      resolutions = [resolutions[0], resolutions[1], resolutions[1] / 2];\n    } else if (resolutions.length === 1) {\n      resolutions = [resolutions[0] * 2, resolutions[0], resolutions[0] / 2];\n    }\n    let viewExtent = extent;\n    if (this.transformMatrix) {\n      const matrix = makeInverse(createMatrix(), this.transformMatrix.slice());\n      const transformFn = createTransformFromCoordinateTransform(input => applyMatrix(matrix, input));\n      viewExtent = applyTransform(extent, transformFn);\n    }\n    this.viewResolver({\n      showFullExtent: true,\n      projection: this.projection,\n      resolutions: resolutions,\n      center: toUserCoordinate(getCenter(viewExtent), this.projection),\n      extent: toUserExtent(viewExtent, this.projection),\n      zoom: zoom\n    });\n  }\n\n  /**\n   * @param {number} z The z tile index.\n   * @param {number} x The x tile index.\n   * @param {number} y The y tile index.\n   * @param {import('./DataTile.js').LoaderOptions} options The loader options.\n   * @return {Promise} The composed tile data.\n   * @private\n   */\n  loadTile_(z, x, y, options) {\n    const sourceTileSize = this.getTileSize(z);\n    const sourceCount = this.sourceImagery_.length;\n    const requests = new Array(sourceCount * 2);\n    const nodataValues = this.nodataValues_;\n    const sourceInfo = this.sourceInfo_;\n    const pool = getWorkerPool();\n    for (let sourceIndex = 0; sourceIndex < sourceCount; ++sourceIndex) {\n      const source = sourceInfo[sourceIndex];\n      const resolutionFactor = this.resolutionFactors_[sourceIndex];\n      const pixelBounds = [Math.round(x * (sourceTileSize[0] * resolutionFactor)), Math.round(y * (sourceTileSize[1] * resolutionFactor)), Math.round((x + 1) * (sourceTileSize[0] * resolutionFactor)), Math.round((y + 1) * (sourceTileSize[1] * resolutionFactor))];\n      const image = this.sourceImagery_[sourceIndex][z];\n      let samples;\n      if (source.bands) {\n        samples = source.bands.map(function (bandNumber) {\n          return bandNumber - 1;\n        });\n      }\n\n      /** @type {number|Array<number>} */\n      let fillValue;\n      if ('nodata' in source && source.nodata !== null) {\n        fillValue = source.nodata;\n      } else {\n        if (!samples) {\n          fillValue = nodataValues[sourceIndex];\n        } else {\n          fillValue = samples.map(function (sampleIndex) {\n            return nodataValues[sourceIndex][sampleIndex];\n          });\n        }\n      }\n      const readOptions = {\n        window: pixelBounds,\n        width: sourceTileSize[0],\n        height: sourceTileSize[1],\n        samples: samples,\n        fillValue: fillValue,\n        pool: pool,\n        interleave: false,\n        signal: options.signal\n      };\n      if (readRGB(this.convertToRGB_, image)) {\n        requests[sourceIndex] = image.readRGB(readOptions);\n      } else {\n        requests[sourceIndex] = image.readRasters(readOptions);\n      }\n\n      // requests after `sourceCount` are for mask data (if any)\n      const maskIndex = sourceCount + sourceIndex;\n      const mask = this.sourceMasks_[sourceIndex][z];\n      if (!mask) {\n        requests[maskIndex] = Promise.resolve(null);\n        continue;\n      }\n      requests[maskIndex] = mask.readRasters({\n        window: pixelBounds,\n        width: sourceTileSize[0],\n        height: sourceTileSize[1],\n        samples: [0],\n        pool: pool,\n        interleave: false\n      });\n    }\n    return Promise.all(requests).then(this.composeTile_.bind(this, sourceTileSize)).catch(function (error) {\n      logError(error);\n      throw error;\n    });\n  }\n\n  /**\n   * @param {import(\"../size.js\").Size} sourceTileSize The source tile size.\n   * @param {Array} sourceSamples The source samples.\n   * @return {import(\"../DataTile.js\").Data} The composed tile data.\n   * @private\n   */\n  composeTile_(sourceTileSize, sourceSamples) {\n    const metadata = this.metadata_;\n    const sourceInfo = this.sourceInfo_;\n    const sourceCount = this.sourceImagery_.length;\n    const bandCount = this.bandCount;\n    const samplesPerPixel = this.samplesPerPixel_;\n    const nodataValues = this.nodataValues_;\n    const normalize = this.normalize_;\n    const addAlpha = this.addAlpha_;\n    const pixelCount = sourceTileSize[0] * sourceTileSize[1];\n    const dataLength = pixelCount * bandCount;\n\n    /** @type {Uint8Array|Float32Array} */\n    let data;\n    if (normalize) {\n      data = new Uint8Array(dataLength);\n    } else {\n      data = new Float32Array(dataLength);\n    }\n    let dataIndex = 0;\n    for (let pixelIndex = 0; pixelIndex < pixelCount; ++pixelIndex) {\n      let transparent = addAlpha;\n      for (let sourceIndex = 0; sourceIndex < sourceCount; ++sourceIndex) {\n        const source = sourceInfo[sourceIndex];\n        let min = source.min;\n        let max = source.max;\n        let gain, bias;\n        if (normalize) {\n          const stats = metadata[sourceIndex][0];\n          if (min === undefined) {\n            if (stats && STATISTICS_MINIMUM in stats) {\n              min = parseFloat(stats[STATISTICS_MINIMUM]);\n            } else {\n              min = getMinForDataType(sourceSamples[sourceIndex][0]);\n            }\n          }\n          if (max === undefined) {\n            if (stats && STATISTICS_MAXIMUM in stats) {\n              max = parseFloat(stats[STATISTICS_MAXIMUM]);\n            } else {\n              max = getMaxForDataType(sourceSamples[sourceIndex][0]);\n            }\n          }\n          gain = 255 / (max - min);\n          bias = -min * gain;\n        }\n        for (let sampleIndex = 0; sampleIndex < samplesPerPixel[sourceIndex]; ++sampleIndex) {\n          const sourceValue = sourceSamples[sourceIndex][sampleIndex][pixelIndex];\n          let value;\n          if (normalize) {\n            value = clamp(gain * sourceValue + bias, 0, 255);\n          } else {\n            value = sourceValue;\n          }\n          if (!addAlpha) {\n            data[dataIndex] = value;\n          } else {\n            let nodata = source.nodata;\n            if (nodata === undefined) {\n              let bandIndex;\n              if (source.bands) {\n                bandIndex = source.bands[sampleIndex] - 1;\n              } else {\n                bandIndex = sampleIndex;\n              }\n              nodata = nodataValues[sourceIndex][bandIndex];\n            }\n            const nodataIsNaN = isNaN(nodata);\n            if (!nodataIsNaN && sourceValue !== nodata || nodataIsNaN && !isNaN(sourceValue)) {\n              transparent = false;\n              data[dataIndex] = value;\n            }\n          }\n          dataIndex++;\n        }\n        if (!transparent) {\n          const maskIndex = sourceCount + sourceIndex;\n          const mask = sourceSamples[maskIndex];\n          if (mask && !mask[0][pixelIndex]) {\n            transparent = true;\n          }\n        }\n      }\n      if (addAlpha) {\n        if (!transparent) {\n          data[dataIndex] = 255;\n        }\n        dataIndex++;\n      }\n    }\n    return data;\n  }\n}\n\n/**\n * Get a promise for view properties based on the source.  Use the result of this function\n * as the `view` option in a map constructor.\n *\n *     const source = new GeoTIFF(options);\n *\n *     const map = new Map({\n *       target: 'map',\n *       layers: [\n *         new TileLayer({\n *           source: source,\n *         }),\n *       ],\n *       view: source.getView(),\n *     });\n *\n * @function\n * @return {Promise<import(\"../View.js\").ViewOptions>} A promise for view-related properties.\n * @api\n *\n */\nGeoTIFFSource.prototype.getView;\nexport default GeoTIFFSource;", "/**\n * @module ol/source/Google\n */\n\nimport TileImage from './TileImage.js';\nimport ViewHint from '../ViewHint.js';\nimport { createXYZ, extentFromProjection } from '../tilegrid.js';\nimport { getBottomLeft, getTopRight } from '../extent.js';\nimport { toLonLat } from '../proj.js';\nconst createSessionUrl = 'https://tile.googleapis.com/v1/createSession';\nconst tileUrl = 'https://tile.googleapis.com/v1/2dtiles';\nconst attributionUrl = 'https://tile.googleapis.com/tile/v1/viewport';\nconst maxZoom = 22;\n\n/**\n * @typedef {Object} Options\n * @property {string} key Google Map Tiles API key. Get yours at https://developers.google.com/maps/documentation/tile/get-api-key.\n * @property {string} [mapType='roadmap'] The type of [base map](https://developers.google.com/maps/documentation/tile/session_tokens#required_fields).\n * @property {string} [language='en-US'] An [IETF language tag](https://en.wikipedia.org/wiki/IETF_language_tag) for information displayed on the tiles.\n * @property {string} [region='US'] A [Common Locale Data Repository](https://cldr.unicode.org/) (CLDR) region identifier that represents the user location.\n * @property {string} [imageFormat] The image format used for the map tiles (e.g. `'jpeg'`, or `'png'`).\n * @property {string} [scale] Scale for map elements (`'scaleFactor1x'`, `'scaleFactor2x'`, or `'scaleFactor4x'`).\n * @property {boolean} [highDpi=false] Use high-resolution tiles.\n * @property {Array<string>} [layerTypes] The layer types added to the map (e.g. `'layerRoadmap'`, `'layerStreetview'`, or `'layerTraffic'`).\n * @property {boolean} [overlay=false] Display only the `layerTypes` and not the underlying `mapType` (only works if `layerTypes` is provided).\n * @property {Array<Object>} [styles] [Custom styles](https://developers.google.com/maps/documentation/tile/style-reference) applied to the map.\n * @property {boolean} [attributionsCollapsible=true] Allow the attributions to be collapsed.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {Array<string>} [apiOptions] An array of values specifying additional options to apply.\n * @property {boolean} [wrapX=true] Wrap the world horizontally.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @typedef {Object} SessionTokenRequest\n * @property {string} mapType The map type.\n * @property {string} language The language.\n * @property {string} region The region.\n * @property {string} [imageFormat] The image format.\n * @property {string} [scale] The scale.\n * @property {boolean} [highDpi] Use high resolution tiles.\n * @property {Array<string>} [layerTypes] The layer types.\n * @property {boolean} [overlay] The overlay.\n * @property {Array<Object>} [styles] The styles.\n * @property {Array<string>} [apiOptions] An array of values specifying additional options to apply.\n */\n\n/**\n * @typedef {Object} SessionTokenResponse\n * @property {string} session The session token.\n * @property {string} expiry The session token expiry (seconds since the epoch as a string).\n * @property {number} tileWidth The tile width.\n * @property {number} tileHeight The tile height.\n * @property {string} imageFormat The image format.\n */\n\n/**\n * @classdesc\n * A tile layer source that renders tiles from the Google [Map Tiles API](https://developers.google.com/maps/documentation/tile/overview).\n * The constructor takes options that are passed to the request to create a session token.  Refer to the\n * [documentation](https://developers.google.com/maps/documentation/tile/session_tokens#required_fields)\n * for additional details.\n * @api\n */\nclass Google extends TileImage {\n  /**\n   * @param {Options} options Google Maps options.\n   */\n  constructor(options) {\n    const highDpi = !!options.highDpi;\n    super({\n      attributionsCollapsible: options.attributionsCollapsible,\n      cacheSize: options.cacheSize,\n      crossOrigin: 'anonymous',\n      interpolate: options.interpolate,\n      projection: 'EPSG:3857',\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      state: 'loading',\n      tileLoadFunction: options.tileLoadFunction,\n      tilePixelRatio: highDpi ? 2 : 1,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n      transition: options.transition,\n      zDirection: options.zDirection\n    });\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.apiKey_ = options.key;\n\n    /**\n     * @type {Error|null}\n     * @private\n     */\n    this.error_ = null;\n\n    /**\n     * @type {SessionTokenRequest}\n     */\n    const sessionTokenRequest = {\n      mapType: options.mapType || 'roadmap',\n      language: options.language || 'en-US',\n      region: options.region || 'US'\n    };\n    if (options.imageFormat) {\n      sessionTokenRequest.imageFormat = options.imageFormat;\n    }\n    if (options.scale) {\n      sessionTokenRequest.scale = options.scale;\n    }\n    if (highDpi) {\n      sessionTokenRequest.highDpi = true;\n    }\n    if (options.layerTypes) {\n      sessionTokenRequest.layerTypes = options.layerTypes;\n    }\n    if (options.styles) {\n      sessionTokenRequest.styles = options.styles;\n    }\n    if (options.overlay === true) {\n      sessionTokenRequest.overlay = true;\n    }\n    if (options.apiOptions) {\n      sessionTokenRequest.apiOptions = options.apiOptions;\n    }\n\n    /**\n     * @type {SessionTokenRequest}\n     * @private\n     */\n    this.sessionTokenRequest_ = sessionTokenRequest;\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.sessionTokenValue_;\n\n    /**\n     * @type {ReturnType<typeof setTimeout>}\n     * @private\n     */\n    this.sessionRefreshId_;\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.previousViewportAttribution_;\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.previousViewportExtent_;\n    this.createSession_();\n  }\n\n  /**\n   * @return {Error|null} A source loading error. When the source state is `error`, use this function\n   * to get more information about the error. To debug a faulty configuration, you may want to use\n   * a listener like\n   * ```js\n   * source.on('change', () => {\n   *   if (source.getState() === 'error') {\n   *     console.error(source.getError());\n   *   }\n   * });\n   * ```\n   */\n  getError() {\n    return this.error_;\n  }\n\n  /**\n   * Exposed here so it can be overridden in the tests.\n   * @param {string} url The URL.\n   * @param {RequestInit} config The config.\n   * @return {Promise<Response>} A promise that resolves with the response.\n   */\n  fetchSessionToken(url, config) {\n    return fetch(url, config);\n  }\n\n  /**\n   * Get or renew a session token for use with tile requests.\n   * @private\n   */\n  async createSession_() {\n    const url = createSessionUrl + '?key=' + this.apiKey_;\n    const config = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(this.sessionTokenRequest_)\n    };\n    const response = await this.fetchSessionToken(url, config);\n    if (!response.ok) {\n      try {\n        const body = await response.json();\n        this.error_ = new Error(body.error.message);\n      } catch {\n        this.error_ = new Error('Error fetching session token');\n      }\n      this.setState('error');\n      return;\n    }\n\n    /**\n     * @type {SessionTokenResponse}\n     */\n    const sessionTokenResponse = await response.json();\n    const tilePixelRatio = this.getTilePixelRatio(1);\n    const tileSize = [sessionTokenResponse.tileWidth / tilePixelRatio, sessionTokenResponse.tileHeight / tilePixelRatio];\n    this.tileGrid = createXYZ({\n      extent: extentFromProjection(this.getProjection()),\n      maxZoom: maxZoom,\n      tileSize: tileSize\n    });\n    const session = sessionTokenResponse.session;\n    this.sessionTokenValue_ = session;\n    const key = this.apiKey_;\n    this.tileUrlFunction = function (tileCoord, pixelRatio, projection) {\n      const z = tileCoord[0];\n      const x = tileCoord[1];\n      const y = tileCoord[2];\n      const url = `${tileUrl}/${z}/${x}/${y}?session=${session}&key=${key}`;\n      return url;\n    };\n    const expiry = parseInt(sessionTokenResponse.expiry, 10) * 1000;\n    const timeout = Math.max(expiry - Date.now() - 60 * 1000, 1);\n    this.sessionRefreshId_ = setTimeout(() => this.createSession_(), timeout);\n    this.setAttributions(this.fetchAttributions_.bind(this));\n    // even if the state is already ready, we want the change event\n    this.setState('ready');\n  }\n\n  /**\n   * @param {import('../Map.js').FrameState} frameState The frame state.\n   * @return {Promise<string>} The attributions.\n   * @private\n   */\n  async fetchAttributions_(frameState) {\n    if (frameState.viewHints[ViewHint.ANIMATING] || frameState.viewHints[ViewHint.INTERACTING] || frameState.animate) {\n      return this.previousViewportAttribution_;\n    }\n    const [west, south] = toLonLat(getBottomLeft(frameState.extent), frameState.viewState.projection);\n    const [east, north] = toLonLat(getTopRight(frameState.extent), frameState.viewState.projection);\n    const tileGrid = this.getTileGrid();\n    const zoom = tileGrid.getZForResolution(frameState.viewState.resolution, this.zDirection);\n    const viewportExtent = `zoom=${zoom}&north=${north}&south=${south}&east=${east}&west=${west}`;\n    // check if the extent or zoom has actually changed to avoid unnecessary requests\n    if (this.previousViewportExtent_ == viewportExtent) {\n      return this.previousViewportAttribution_;\n    }\n    this.previousViewportExtent_ = viewportExtent;\n    const session = this.sessionTokenValue_;\n    const key = this.apiKey_;\n    const url = `${attributionUrl}?session=${session}&key=${key}&${viewportExtent}`;\n    this.previousViewportAttribution_ = await fetch(url).then(response => response.json()).then(json => json.copyright);\n    return this.previousViewportAttribution_;\n  }\n\n  /**\n   * @override\n   */\n  disposeInternal() {\n    clearTimeout(this.sessionRefreshId_);\n    super.disposeInternal();\n  }\n}\nexport default Google;", "/**\n * @module ol/source/Zoomify\n */\nimport { DEFAULT_TILE_SIZE } from '../tilegrid/common.js';\nimport ImageTile from '../ImageTile.js';\nimport TileGrid from '../tilegrid/TileGrid.js';\nimport TileImage from './TileImage.js';\nimport TileState from '../TileState.js';\nimport { createCanvasContext2D } from '../dom.js';\nimport { createFromTileUrlFunctions } from '../tileurlfunction.js';\nimport { expandUrl } from '../uri.js';\nimport { getCenter } from '../extent.js';\nimport { toSize } from '../size.js';\n\n/**\n * @typedef {'default' | 'truncated'} TierSizeCalculation\n */\n\nexport class CustomTile extends ImageTile {\n  /**\n   * @param {import(\"../size.js\").Size} tileSize Full tile size.\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../TileState.js\").default} state State.\n   * @param {string} src Image source URI.\n   * @param {?string} crossOrigin Cross origin.\n   * @param {import(\"../Tile.js\").LoadFunction} tileLoadFunction Tile load function.\n   * @param {import(\"../Tile.js\").Options} [options] Tile options.\n   */\n  constructor(tileSize, tileCoord, state, src, crossOrigin, tileLoadFunction, options) {\n    super(tileCoord, state, src, crossOrigin, tileLoadFunction, options);\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement}\n     */\n    this.zoomifyImage_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.tileSize_ = tileSize;\n  }\n\n  /**\n   * Get the image element for this tile.\n   * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.\n   * @override\n   */\n  getImage() {\n    if (this.zoomifyImage_) {\n      return this.zoomifyImage_;\n    }\n    const image = super.getImage();\n    if (this.state == TileState.LOADED) {\n      const tileSize = this.tileSize_;\n      if (image.width == tileSize[0] && image.height == tileSize[1]) {\n        this.zoomifyImage_ = image;\n        return image;\n      }\n      const context = createCanvasContext2D(tileSize[0], tileSize[1]);\n      context.drawImage(image, 0, 0);\n      this.zoomifyImage_ = context.canvas;\n      return context.canvas;\n    }\n    return image;\n  }\n}\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value  you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\n * @property {number} [tilePixelRatio] The pixel ratio used by the tile service. For example, if the tile service advertizes 256px by 256px tiles but actually sends 512px by 512px images (for retina/hidpi devices) then `tilePixelRatio` should be set to `2`\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {string} url URL template or base URL of the Zoomify service.\n * A base URL is the fixed part\n * of the URL, excluding the tile group, z, x, and y folder structure, e.g.\n * `http://my.zoomify.info/IMAGE.TIF/`. A URL template must include\n * `{TileGroup}`, `{x}`, `{y}`, and `{z}` placeholders, e.g.\n * `http://my.zoomify.info/IMAGE.TIF/{TileGroup}/{z}-{x}-{y}.jpg`.\n * Internet Imaging Protocol (IIP) with JTL extension can be also used with\n * `{tileIndex}` and `{z}` placeholders, e.g.\n * `http://my.zoomify.info?FIF=IMAGE.TIF&JTL={z},{tileIndex}`.\n * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be\n * used instead of defining each one separately in the `urls` option.\n * @property {TierSizeCalculation} [tierSizeCalculation] Tier size calculation method: `default` or `truncated`.\n * @property {import(\"../size.js\").Size} size Size.\n * @property {import(\"../extent.js\").Extent} [extent] Extent for the TileGrid that is created.\n * Default sets the TileGrid in the\n * fourth quadrant, meaning extent is `[0, -height, width, 0]`. To change the\n * extent to the first quadrant (the default for OpenLayers 2) set the extent\n * as `[0, 0, width, height]`.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {number} [tileSize=256] Tile size. Same tile size is used for all zoom levels.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Layer source for tile data in Zoomify format (both Zoomify and Internet\n * Imaging Protocol are supported).\n * @api\n */\nclass Zoomify extends TileImage {\n  /**\n   * @param {Options} options Options.\n   */\n  constructor(options) {\n    const size = options.size;\n    const tierSizeCalculation = options.tierSizeCalculation !== undefined ? options.tierSizeCalculation : 'default';\n    const tilePixelRatio = options.tilePixelRatio || 1;\n    const imageWidth = size[0];\n    const imageHeight = size[1];\n    const tierSizeInTiles = [];\n    const tileSize = options.tileSize || DEFAULT_TILE_SIZE;\n    let tileSizeForTierSizeCalculation = tileSize * tilePixelRatio;\n    switch (tierSizeCalculation) {\n      case 'default':\n        while (imageWidth > tileSizeForTierSizeCalculation || imageHeight > tileSizeForTierSizeCalculation) {\n          tierSizeInTiles.push([Math.ceil(imageWidth / tileSizeForTierSizeCalculation), Math.ceil(imageHeight / tileSizeForTierSizeCalculation)]);\n          tileSizeForTierSizeCalculation += tileSizeForTierSizeCalculation;\n        }\n        break;\n      case 'truncated':\n        let width = imageWidth;\n        let height = imageHeight;\n        while (width > tileSizeForTierSizeCalculation || height > tileSizeForTierSizeCalculation) {\n          tierSizeInTiles.push([Math.ceil(width / tileSizeForTierSizeCalculation), Math.ceil(height / tileSizeForTierSizeCalculation)]);\n          width >>= 1;\n          height >>= 1;\n        }\n        break;\n      default:\n        throw new Error('Unknown `tierSizeCalculation` configured');\n    }\n    tierSizeInTiles.push([1, 1]);\n    tierSizeInTiles.reverse();\n    const resolutions = [tilePixelRatio];\n    const tileCountUpToTier = [0];\n    for (let i = 1, ii = tierSizeInTiles.length; i < ii; i++) {\n      resolutions.push(tilePixelRatio << i);\n      tileCountUpToTier.push(tierSizeInTiles[i - 1][0] * tierSizeInTiles[i - 1][1] + tileCountUpToTier[i - 1]);\n    }\n    resolutions.reverse();\n    const tileGrid = new TileGrid({\n      tileSize: tileSize,\n      extent: options.extent || [0, -imageHeight, imageWidth, 0],\n      resolutions: resolutions\n    });\n    let url = options.url;\n    if (url && !url.includes('{TileGroup}') && !url.includes('{tileIndex}')) {\n      url += '{TileGroup}/{z}-{x}-{y}.jpg';\n    }\n    const urls = expandUrl(url);\n    let tileWidth = tileSize * tilePixelRatio;\n\n    /**\n     * @param {string} template Template.\n     * @return {import(\"../Tile.js\").UrlFunction} Tile URL function.\n     */\n    function createFromTemplate(template) {\n      return (\n        /**\n         * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile Coordinate.\n         * @param {number} pixelRatio Pixel ratio.\n         * @param {import(\"../proj/Projection.js\").default} projection Projection.\n         * @return {string|undefined} Tile URL.\n         */\n        function (tileCoord, pixelRatio, projection) {\n          if (!tileCoord) {\n            return undefined;\n          }\n          const tileCoordZ = tileCoord[0];\n          const tileCoordX = tileCoord[1];\n          const tileCoordY = tileCoord[2];\n          const tileIndex = tileCoordX + tileCoordY * tierSizeInTiles[tileCoordZ][0];\n          const tileGroup = (tileIndex + tileCountUpToTier[tileCoordZ]) / tileWidth | 0;\n          const localContext = {\n            'z': tileCoordZ,\n            'x': tileCoordX,\n            'y': tileCoordY,\n            'tileIndex': tileIndex,\n            'TileGroup': 'TileGroup' + tileGroup\n          };\n          return template.replace(/\\{(\\w+?)\\}/g, function (m, p) {\n            return localContext[p];\n          });\n        }\n      );\n    }\n    const tileUrlFunction = createFromTileUrlFunctions(urls.map(createFromTemplate));\n    const ZoomifyTileClass = CustomTile.bind(null, toSize(tileSize * tilePixelRatio));\n    super({\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      interpolate: options.interpolate,\n      projection: options.projection,\n      tilePixelRatio: tilePixelRatio,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      tileClass: ZoomifyTileClass,\n      tileGrid: tileGrid,\n      tileUrlFunction: tileUrlFunction,\n      transition: options.transition\n    });\n\n    /**\n     * @type {number|import(\"../array.js\").NearestDirectionFunction}\n     */\n    this.zDirection = options.zDirection;\n\n    // Server retina tile detection (non-standard):\n    // Try loading the center tile for the highest resolution. If it is not\n    // available, we are dealing with retina tiles, and need to adjust the\n    // tile url calculation.\n    const tileUrl = tileGrid.getTileCoordForCoordAndResolution(getCenter(tileGrid.getExtent()), resolutions[resolutions.length - 1]);\n    const testTileUrl = tileUrlFunction(tileUrl, 1, null);\n    const image = new Image();\n    image.addEventListener('error', () => {\n      tileWidth = tileSize;\n      this.changed();\n    });\n    image.src = testTileUrl;\n  }\n}\nexport default Zoomify;", "/**\n * @module ol/source/IIIF\n */\n\nimport TileGrid from '../tilegrid/TileGrid.js';\nimport TileImage from './TileImage.js';\nimport { CustomTile } from './Zoomify.js';\nimport { DEFAULT_TILE_SIZE } from '../tilegrid/common.js';\nimport { Versions } from '../format/IIIFInfo.js';\nimport { assert } from '../asserts.js';\nimport { getTopLeft } from '../extent.js';\nimport { toSize } from '../size.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.\n * @property {null|string} [crossOrigin] The value for the crossOrigin option of the request.\n * @property {import(\"../extent.js\").Extent} [extent=[0, -height, width, 0]] The extent.\n * @property {string} [format='jpg'] Requested image format.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\n * @property {string} [quality] Requested IIIF image quality. Default is 'native'\n * for version 1, 'default' for versions 2 and 3.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {Array<number>} [resolutions] Supported resolutions as given in IIIF 'scaleFactors'\n * @property {import(\"../size.js\").Size} size Size of the image [width, height].\n * @property {Array<import(\"../size.js\").Size>} [sizes] Supported scaled image sizes.\n * Content of the IIIF info.json 'sizes' property, but as array of Size objects.\n * @property {import(\"./Source.js\").State} [state] Source state.\n * @property {Array<string>} [supports=[]] Supported IIIF region and size calculation\n * features.\n * @property {number} [tilePixelRatio] Tile pixel ratio.\n * @property {number|import(\"../size.js\").Size} [tileSize] Tile size.\n * Same tile size is used for all zoom levels. If tile size is a number,\n * a square tile is assumed. If the IIIF image service supports arbitrary\n * tiling (sizeByH, sizeByW, sizeByWh or sizeByPct as well as regionByPx or regionByPct\n * are supported), the default tilesize is 256.\n * @property {number} [transition] Transition.\n * @property {string} [url] Base URL of the IIIF Image service.\n * This should be the same as the IIIF Image ID.\n * @property {import(\"../format/IIIFInfo.js\").Versions} [version=Versions.VERSION2] Service's IIIF Image API version.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\nfunction formatPercentage(percentage) {\n  return percentage.toLocaleString('en', {\n    maximumFractionDigits: 10\n  });\n}\n\n/**\n * @classdesc\n * Layer source for IIIF Image API services.\n * @api\n */\nclass IIIF extends TileImage {\n  /**\n   * @param {Options} [options] Tile source options. Use {@link import(\"../format/IIIFInfo.js\").IIIFInfo}\n   * to parse Image API service information responses into constructor options.\n   * @api\n   */\n  constructor(options) {\n    /**\n     * @type {Partial<Options>}\n     */\n    const partialOptions = options || {};\n    let baseUrl = partialOptions.url || '';\n    baseUrl = baseUrl + (baseUrl.lastIndexOf('/') === baseUrl.length - 1 || baseUrl === '' ? '' : '/');\n    const version = partialOptions.version || Versions.VERSION2;\n    const sizes = partialOptions.sizes || [];\n    const size = partialOptions.size;\n    assert(size != undefined && Array.isArray(size) && size.length == 2 && !isNaN(size[0]) && size[0] > 0 && !isNaN(size[1]) && size[1] > 0, 'Missing or invalid `size`');\n    const width = size[0];\n    const height = size[1];\n    const tileSize = partialOptions.tileSize;\n    const tilePixelRatio = partialOptions.tilePixelRatio || 1;\n    const format = partialOptions.format || 'jpg';\n    const quality = partialOptions.quality || (partialOptions.version == Versions.VERSION1 ? 'native' : 'default');\n    let resolutions = partialOptions.resolutions || [];\n    const supports = partialOptions.supports || [];\n    const extent = partialOptions.extent || [0, -height, width, 0];\n    const supportsListedSizes = sizes != undefined && Array.isArray(sizes) && sizes.length > 0;\n    const supportsListedTiles = tileSize !== undefined && (typeof tileSize === 'number' && Number.isInteger(tileSize) && tileSize > 0 || Array.isArray(tileSize) && tileSize.length > 0);\n    const supportsArbitraryTiling = supports != undefined && Array.isArray(supports) && (supports.includes('regionByPx') || supports.includes('regionByPct')) && (supports.includes('sizeByWh') || supports.includes('sizeByH') || supports.includes('sizeByW') || supports.includes('sizeByPct'));\n    let tileWidth, tileHeight, maxZoom;\n    resolutions.sort(function (a, b) {\n      return b - a;\n    });\n    if (supportsListedTiles || supportsArbitraryTiling) {\n      if (tileSize != undefined) {\n        if (typeof tileSize === 'number' && Number.isInteger(tileSize) && tileSize > 0) {\n          tileWidth = tileSize;\n          tileHeight = tileSize;\n        } else if (Array.isArray(tileSize) && tileSize.length > 0) {\n          if (tileSize.length == 1 || tileSize[1] == undefined && Number.isInteger(tileSize[0])) {\n            tileWidth = tileSize[0];\n            tileHeight = tileSize[0];\n          }\n          if (tileSize.length == 2) {\n            if (Number.isInteger(tileSize[0]) && Number.isInteger(tileSize[1])) {\n              tileWidth = tileSize[0];\n              tileHeight = tileSize[1];\n            } else if (tileSize[0] == undefined && Number.isInteger(tileSize[1])) {\n              tileWidth = tileSize[1];\n              tileHeight = tileSize[1];\n            }\n          }\n        }\n      }\n      if (tileWidth === undefined || tileHeight === undefined) {\n        tileWidth = DEFAULT_TILE_SIZE;\n        tileHeight = DEFAULT_TILE_SIZE;\n      }\n      if (resolutions.length == 0) {\n        maxZoom = Math.max(Math.ceil(Math.log(width / tileWidth) / Math.LN2), Math.ceil(Math.log(height / tileHeight) / Math.LN2));\n        for (let i = maxZoom; i >= 0; i--) {\n          resolutions.push(Math.pow(2, i));\n        }\n      } else {\n        const maxScaleFactor = Math.max(...resolutions);\n        // TODO maxScaleFactor might not be a power to 2\n        maxZoom = Math.round(Math.log(maxScaleFactor) / Math.LN2);\n      }\n    } else {\n      // No tile support.\n      tileWidth = width;\n      tileHeight = height;\n      resolutions = [];\n      if (supportsListedSizes) {\n        /*\n         * 'sizes' provided. Use full region in different resolutions. Every\n         * resolution has only one tile.\n         */\n        sizes.sort(function (a, b) {\n          return a[0] - b[0];\n        });\n        maxZoom = -1;\n        const ignoredSizesIndex = [];\n        for (let i = 0; i < sizes.length; i++) {\n          const resolution = width / sizes[i][0];\n          if (resolutions.length > 0 && resolutions[resolutions.length - 1] == resolution) {\n            ignoredSizesIndex.push(i);\n            continue;\n          }\n          resolutions.push(resolution);\n          maxZoom++;\n        }\n        if (ignoredSizesIndex.length > 0) {\n          for (let i = 0; i < ignoredSizesIndex.length; i++) {\n            sizes.splice(ignoredSizesIndex[i] - i, 1);\n          }\n        }\n      } else {\n        // No useful image information at all. Try pseudo tile with full image.\n        resolutions.push(1);\n        sizes.push([width, height]);\n        maxZoom = 0;\n      }\n    }\n    const tileGrid = new TileGrid({\n      tileSize: [tileWidth, tileHeight],\n      extent: extent,\n      origin: getTopLeft(extent),\n      resolutions: resolutions\n    });\n    const tileUrlFunction = function (tileCoord, pixelRatio, projection) {\n      let regionParam, sizeParam;\n      const zoom = tileCoord[0];\n      if (zoom > maxZoom) {\n        return;\n      }\n      const tileX = tileCoord[1],\n        tileY = tileCoord[2],\n        scale = resolutions[zoom];\n      if (tileX === undefined || tileY === undefined || scale === undefined || tileX < 0 || Math.ceil(width / scale / tileWidth) <= tileX || tileY < 0 || Math.ceil(height / scale / tileHeight) <= tileY) {\n        return;\n      }\n      if (supportsArbitraryTiling || supportsListedTiles) {\n        const regionX = tileX * tileWidth * scale,\n          regionY = tileY * tileHeight * scale;\n        let regionW = tileWidth * scale,\n          regionH = tileHeight * scale,\n          sizeW = tileWidth,\n          sizeH = tileHeight;\n        if (regionX + regionW > width) {\n          regionW = width - regionX;\n        }\n        if (regionY + regionH > height) {\n          regionH = height - regionY;\n        }\n        if (regionX + tileWidth * scale > width) {\n          sizeW = Math.floor((width - regionX + scale - 1) / scale);\n        }\n        if (regionY + tileHeight * scale > height) {\n          sizeH = Math.floor((height - regionY + scale - 1) / scale);\n        }\n        if (regionX == 0 && regionW == width && regionY == 0 && regionH == height) {\n          // canonical full image region parameter is 'full', not 'x,y,w,h'\n          regionParam = 'full';\n        } else if (!supportsArbitraryTiling || supports.includes('regionByPx')) {\n          regionParam = regionX + ',' + regionY + ',' + regionW + ',' + regionH;\n        } else if (supports.includes('regionByPct')) {\n          const pctX = formatPercentage(regionX / width * 100),\n            pctY = formatPercentage(regionY / height * 100),\n            pctW = formatPercentage(regionW / width * 100),\n            pctH = formatPercentage(regionH / height * 100);\n          regionParam = 'pct:' + pctX + ',' + pctY + ',' + pctW + ',' + pctH;\n        }\n        if (version == Versions.VERSION3 && (!supportsArbitraryTiling || supports.includes('sizeByWh'))) {\n          sizeParam = sizeW + ',' + sizeH;\n        } else if (!supportsArbitraryTiling || supports.includes('sizeByW')) {\n          sizeParam = sizeW + ',';\n        } else if (supports.includes('sizeByH')) {\n          sizeParam = ',' + sizeH;\n        } else if (supports.includes('sizeByWh')) {\n          sizeParam = sizeW + ',' + sizeH;\n        } else if (supports.includes('sizeByPct')) {\n          sizeParam = 'pct:' + formatPercentage(100 / scale);\n        }\n      } else {\n        regionParam = 'full';\n        if (supportsListedSizes) {\n          const regionWidth = sizes[zoom][0],\n            regionHeight = sizes[zoom][1];\n          if (version == Versions.VERSION3) {\n            if (regionWidth == width && regionHeight == height) {\n              sizeParam = 'max';\n            } else {\n              sizeParam = regionWidth + ',' + regionHeight;\n            }\n          } else {\n            if (regionWidth == width) {\n              sizeParam = 'full';\n            } else {\n              sizeParam = regionWidth + ',';\n            }\n          }\n        } else {\n          sizeParam = version == Versions.VERSION3 ? 'max' : 'full';\n        }\n      }\n      return baseUrl + regionParam + '/' + sizeParam + '/0/' + quality + '.' + format;\n    };\n    const IiifTileClass = CustomTile.bind(null, toSize(tileSize || 256).map(function (size) {\n      return size * tilePixelRatio;\n    }));\n    super({\n      attributions: partialOptions.attributions,\n      attributionsCollapsible: partialOptions.attributionsCollapsible,\n      cacheSize: partialOptions.cacheSize,\n      crossOrigin: partialOptions.crossOrigin,\n      interpolate: partialOptions.interpolate,\n      projection: partialOptions.projection,\n      reprojectionErrorThreshold: partialOptions.reprojectionErrorThreshold,\n      state: partialOptions.state,\n      tileClass: IiifTileClass,\n      tileGrid: tileGrid,\n      tilePixelRatio: partialOptions.tilePixelRatio,\n      tileUrlFunction: tileUrlFunction,\n      transition: partialOptions.transition\n    });\n\n    /**\n     * @type {number|import(\"../array.js\").NearestDirectionFunction}\n     */\n    this.zDirection = partialOptions.zDirection;\n  }\n}\nexport default IIIF;", "/**\n * @module ol/source/arcgisRest\n */\n\nimport { DECIMALS } from './common.js';\nimport { appendParams } from '../uri.js';\nimport { decode } from '../Image.js';\nimport { getHeight, getWidth } from '../extent.js';\nimport { get as getProjection } from '../proj.js';\nimport { getRequestExtent } from './Image.js';\nimport { round } from '../math.js';\n\n/**\n * @param {string} baseUrl Base URL for the ArcGIS Rest service.\n * @param {import(\"../extent.js\").Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @param {number} pixelRatio Pixel ratio.\n * @param {import(\"../proj/Projection.js\").default} projection Projection.\n * @param {Object} params Params.\n * @return {string} Request URL.\n */\nexport function getRequestUrl(baseUrl, extent, resolution, pixelRatio, projection, params) {\n  // ArcGIS Server only wants the numeric portion of the projection ID.\n  // (if there is no numeric portion the entire projection code must\n  // form a valid ArcGIS SpatialReference definition).\n  const srid = projection.getCode().split(/:(?=\\d+$)/).pop();\n  const imageResolution = resolution / pixelRatio;\n  const imageSize = [round(getWidth(extent) / imageResolution, DECIMALS), round(getHeight(extent) / imageResolution, DECIMALS)];\n  params['SIZE'] = imageSize[0] + ',' + imageSize[1];\n  params['BBOX'] = extent.join(',');\n  params['BBOXSR'] = srid;\n  params['IMAGESR'] = srid;\n  params['DPI'] = Math.round(params['DPI'] ? params['DPI'] * pixelRatio : 90 * pixelRatio);\n  const modifiedUrl = baseUrl.replace(/MapServer\\/?$/, 'MapServer/export').replace(/ImageServer\\/?$/, 'ImageServer/exportImage');\n  return appendParams(modifiedUrl, params);\n}\n\n/**\n * @typedef {Object} LoaderOptions\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting the image from\n * the remote server.\n * @property {Object<string,*>} [params] ArcGIS Rest parameters. This field is optional. Service\n * defaults will be used for any fields not specified. `FORMAT` is `PNG32` by default. `F` is\n * `IMAGE` by default. `TRANSPARENT` is `true` by default.  `BBOX`, `SIZE`, `BBOXSR`, and `IMAGESR`\n * will be set dynamically. Set `LAYERS` to override the default service layer visibility. See\n * https://developers.arcgis.com/rest/services-reference/export-map.htm\n * for further reference.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is 'EPSG:3857'.\n * The projection code must contain a numeric end portion separated by :\n * or the entire code must form a valid ArcGIS SpatialReference definition.\n * @property {number} [ratio=1.5] Ratio. `1` means image requests are the size of the map viewport,\n * `2` means twice the size of the map viewport, and so on.\n * @property {string} url ArcGIS Rest service URL for a Map Service or Image Service. The url\n * should include /MapServer or /ImageServer.\n * @property {function(HTMLImageElement, string): Promise<import('../DataTile.js').ImageLike>} [load] Function\n * to perform loading of the image. Receives the created `HTMLImageElement` and the desired `src` as argument and\n * returns a promise resolving to the loaded or decoded image. Default is {@link module:ol/Image.decode}.\n */\n\n/**\n * Creates a loader for ArcGIS Rest images.\n * @param {LoaderOptions} options Image ArcGIS Rest Options.\n * @return {import('../Image.js').ImageObjectPromiseLoader} ArcGIS Rest image.\n * @api\n */\nexport function createLoader(options) {\n  const load = options.load ? options.load : decode;\n  const projection = getProjection(options.projection || 'EPSG:3857');\n  const ratio = options.ratio ?? 1.5;\n  const crossOrigin = options.crossOrigin ?? null;\n\n  /** @type {import('../Image.js').ImageObjectPromiseLoader} */\n  return function (extent, resolution, pixelRatio) {\n    pixelRatio = options.hidpi ? pixelRatio : 1;\n    const params = {\n      'F': 'image',\n      'FORMAT': 'PNG32',\n      'TRANSPARENT': true\n    };\n    Object.assign(params, options.params);\n    extent = getRequestExtent(extent, resolution, pixelRatio, ratio);\n    const src = getRequestUrl(options.url, extent, resolution, pixelRatio, projection, params);\n    const image = new Image();\n    image.crossOrigin = crossOrigin;\n    return load(image, src).then(image => {\n      // Update resolution, because the server may return a smaller size than requested\n      const resolution = getWidth(extent) / image.width * pixelRatio;\n      return {\n        image,\n        extent,\n        resolution,\n        pixelRatio\n      };\n    });\n  };\n}", "/**\n * @module ol/source/ImageArcGISRest\n */\n\nimport ImageSource, { defaultImageLoadFunction } from './Image.js';\nimport { createLoader } from './arcgisRest.js';\nimport { decode } from '../Image.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting the image from\n * the remote server.\n * @property {import(\"../Image.js\").LoadFunction} [imageLoadFunction] Optional function to load an image given\n * a URL.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {Object<string,*>} [params] ArcGIS Rest parameters. This field is optional. Service\n * defaults will be used for any fields not specified. `FORMAT` is `PNG32` by default. `F` is\n * `IMAGE` by default. `TRANSPARENT` is `true` by default.  `BBOX`, `SIZE`, `BBOXSR`, and `IMAGESR`\n * will be set dynamically. Set `LAYERS` to override the default service layer visibility. See\n * https://developers.arcgis.com/rest/services-reference/export-map.htm\n * for further reference.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * The projection code must contain a numeric end portion separated by :\n * or the entire code must form a valid ArcGIS SpatialReference definition.\n * @property {number} [ratio=1.5] Ratio. `1` means image requests are the size of the map viewport,\n * `2` means twice the size of the map viewport, and so on.\n * @property {Array<number>} [resolutions] Resolutions. If specified, requests will be made for\n * these resolutions only.\n * @property {string} [url] ArcGIS Rest service URL for a Map Service or Image Service. The url\n * should include /MapServer or /ImageServer.\n */\n\n/**\n * @classdesc\n * Source for data from ArcGIS Rest services providing single, untiled images.\n * Useful when underlying map service has labels.\n *\n * If underlying map service is not using labels,\n * take advantage of ol image caching and use\n * {@link module:ol/source/TileArcGISRest~TileArcGISRest} data source.\n *\n * @fires module:ol/source/Image.ImageSourceEvent\n * @api\n */\nclass ImageArcGISRest extends ImageSource {\n  /**\n   * @param {Options} [options] Image ArcGIS Rest Options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n    super({\n      attributions: options.attributions,\n      interpolate: options.interpolate,\n      projection: options.projection,\n      resolutions: options.resolutions\n    });\n\n    /**\n     * @private\n     * @type {?string}\n     */\n    this.crossOrigin_ = options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.url_ = options.url;\n\n    /**\n     * @private\n     * @type {import(\"../Image.js\").LoadFunction}\n     */\n    this.imageLoadFunction_ = options.imageLoadFunction !== undefined ? options.imageLoadFunction : defaultImageLoadFunction;\n\n    /**\n     * @private\n     * @type {!Object}\n     */\n    this.params_ = Object.assign({}, options.params);\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.imageSize_ = [0, 0];\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedRevision_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.ratio_ = options.ratio !== undefined ? options.ratio : 1.5;\n\n    /**\n     * @private\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n    this.loaderProjection_ = null;\n  }\n\n  /**\n   * Get the user-provided params, i.e. those passed to the constructor through\n   * the \"params\" option, and possibly updated using the updateParams method.\n   * @return {Object} Params.\n   * @api\n   */\n  getParams() {\n    return this.params_;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../Image.js\").default} Single image.\n   * @override\n   */\n  getImageInternal(extent, resolution, pixelRatio, projection) {\n    if (this.url_ === undefined) {\n      return null;\n    }\n    if (!this.loader || this.loaderProjection_ !== projection) {\n      // Lazily create loader to pick up the view projection and to allow `params` updates\n      this.loaderProjection_ = projection;\n      this.loader = createLoader({\n        crossOrigin: this.crossOrigin_,\n        params: this.params_,\n        projection: projection,\n        hidpi: this.hidpi_,\n        url: this.url_,\n        ratio: this.ratio_,\n        load: (image, src) => {\n          this.image.setImage(image);\n          this.imageLoadFunction_(this.image, src);\n          return decode(image);\n        }\n      });\n    }\n    return super.getImageInternal(extent, resolution, pixelRatio, projection);\n  }\n\n  /**\n   * Return the image load function of the source.\n   * @return {import(\"../Image.js\").LoadFunction} The image load function.\n   * @api\n   */\n  getImageLoadFunction() {\n    return this.imageLoadFunction_;\n  }\n\n  /**\n   * Return the URL used for this ArcGIS source.\n   * @return {string|undefined} URL.\n   * @api\n   */\n  getUrl() {\n    return this.url_;\n  }\n\n  /**\n   * Set the image load function of the source.\n   * @param {import(\"../Image.js\").LoadFunction} imageLoadFunction Image load function.\n   * @api\n   */\n  setImageLoadFunction(imageLoadFunction) {\n    this.imageLoadFunction_ = imageLoadFunction;\n    this.changed();\n  }\n\n  /**\n   * Set the URL to use for requests.\n   * @param {string|undefined} url URL.\n   * @api\n   */\n  setUrl(url) {\n    if (url != this.url_) {\n      this.url_ = url;\n      this.loader = null;\n      this.changed();\n    }\n  }\n\n  /**\n   * Update the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n  updateParams(params) {\n    Object.assign(this.params_, params);\n    this.changed();\n  }\n\n  /**\n   * @override\n   */\n  changed() {\n    this.image = null;\n    super.changed();\n  }\n}\nexport default ImageArcGISRest;", "/**\n * @module ol/source/ImageCanvas\n */\n\nimport ImageCanvas from '../ImageCanvas.js';\nimport ImageSource from './Image.js';\nimport { containsExtent, getHeight, getWidth, scaleFromCenter } from '../extent.js';\n\n/**\n * A function returning the canvas element (`{HTMLCanvasElement}`)\n * used by the source as an image. The arguments passed to the function are:\n * {@link module:ol/extent~Extent} the image extent, `{number}` the image resolution,\n * `{number}` the pixel ratio of the map, {@link module:ol/size~Size} the image size,\n * and {@link module:ol/proj/Projection~Projection} the image projection. The canvas returned by\n * this function is cached by the source. The this keyword inside the function\n * references the {@link module:ol/source/ImageCanvas~ImageCanvasSource}.\n *\n * @typedef {function(this:import(\"../ImageCanvas.js\").default, import(\"../extent.js\").Extent, number,\n *     number, import(\"../size.js\").Size, import(\"../proj/Projection.js\").default): HTMLCanvasElement} FunctionType\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {FunctionType} [canvasFunction] Canvas function.\n * The function returning the canvas element used by the source\n * as an image. The arguments passed to the function are: {@link import(\"../extent.js\").Extent} the\n * image extent, `{number}` the image resolution, `{number}` the pixel ratio of the map,\n * {@link import(\"../size.js\").Size} the image size, and {@link import(\"../proj/Projection.js\").default} the image\n * projection. The canvas returned by this function is cached by the source. If\n * the value returned by the function is later changed then\n * `changed` should be called on the source for the source to\n * invalidate the current cached image. See: {@link module:ol/Observable~Observable#changed}\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [ratio=1.5] Ratio. 1 means canvases are the size of the map viewport, 2 means twice the\n * width and height of the map viewport, and so on. Must be `1` or higher.\n * @property {Array<number>} [resolutions] Resolutions.\n * If specified, new canvases will be created for these resolutions\n * @property {import(\"./Source.js\").State} [state] Source state.\n */\n\n/**\n * @classdesc\n * Base class for image sources where a canvas element is the image.\n * @api\n */\nclass ImageCanvasSource extends ImageSource {\n  /**\n   * @param {Options} [options] ImageCanvas options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n    super({\n      attributions: options.attributions,\n      interpolate: options.interpolate,\n      projection: options.projection,\n      resolutions: options.resolutions,\n      state: options.state\n    });\n\n    /**\n     * @private\n     * @type {FunctionType}\n     */\n    this.canvasFunction_ = options.canvasFunction;\n\n    /**\n     * @private\n     * @type {import(\"../ImageCanvas.js\").default}\n     */\n    this.canvas_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedRevision_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.ratio_ = options.ratio !== undefined ? options.ratio : 1.5;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../ImageCanvas.js\").default} Single image.\n   * @override\n   */\n  getImageInternal(extent, resolution, pixelRatio, projection) {\n    resolution = this.findNearestResolution(resolution);\n    let canvas = this.canvas_;\n    if (canvas && this.renderedRevision_ == this.getRevision() && canvas.getResolution() == resolution && canvas.getPixelRatio() == pixelRatio && containsExtent(canvas.getExtent(), extent)) {\n      return canvas;\n    }\n    extent = extent.slice();\n    scaleFromCenter(extent, this.ratio_);\n    const width = getWidth(extent) / resolution;\n    const height = getHeight(extent) / resolution;\n    const size = [width * pixelRatio, height * pixelRatio];\n    const canvasElement = this.canvasFunction_.call(this, extent, resolution, pixelRatio, size, projection);\n    if (canvasElement) {\n      canvas = new ImageCanvas(extent, resolution, pixelRatio, canvasElement);\n    }\n    this.canvas_ = canvas;\n    this.renderedRevision_ = this.getRevision();\n    return canvas;\n  }\n}\nexport default ImageCanvasSource;", "/**\n * @module ol/source/mapguide\n */\n\nimport { appendParams } from '../uri.js';\nimport { decode } from '../Image.js';\nimport { getCenter, getHeight, getWidth } from '../extent.js';\nimport { getRequestExtent } from './Image.js';\n\n/**\n * @typedef {Object} LoaderOptions\n * @property {string} url The mapagent url.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {number} [displayDpi=96] The display resolution.\n * @property {number} [metersPerUnit=1] The meters-per-unit value.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\n * the image from the remote server.\n * @property {boolean} [useOverlay] If `true`, will use `GETDYNAMICMAPOVERLAYIMAGE`.\n * @property {number} [ratio=1] Ratio. `1` means image requests are the size of the map viewport, `2` means\n * twice the width and height of the map viewport, and so on. Must be `1` or higher.\n * @property {Object} [params] Additional query parameters.\n * @property {function(HTMLImageElement, string): Promise<import('../DataTile.js').ImageLike>} [load] Function\n * to perform loading of the image. Receives the created `HTMLImageElement` and the desired `src` as argument and\n * returns a promise resolving to the loaded or decoded image. Default is {@link module:ol/Image.decode}.\n */\n\n/**\n * @param {import(\"../extent.js\").Extent} extent The map extents.\n * @param {import(\"../size.js\").Size} size The viewport size.\n * @param {number} metersPerUnit The meters-per-unit value.\n * @param {number} dpi The display resolution.\n * @return {number} The computed map scale.\n */\nfunction getScale(extent, size, metersPerUnit, dpi) {\n  const mcsW = getWidth(extent);\n  const mcsH = getHeight(extent);\n  const devW = size[0];\n  const devH = size[1];\n  const mpp = 0.0254 / dpi;\n  if (devH * mcsW > devW * mcsH) {\n    return mcsW * metersPerUnit / (devW * mpp); // width limited\n  }\n  return mcsH * metersPerUnit / (devH * mpp); // height limited\n}\n\n/**\n * @param {string} baseUrl The mapagent url.\n * @param {Object<string, string|number>} params Request parameters.\n * @param {import(\"../extent.js\").Extent} extent Extent.\n * @param {import(\"../size.js\").Size} size Size.\n * @param {boolean} useOverlay If `true`, will use `GETDYNAMICMAPOVERLAYIMAGE`.\n * @param {number} metersPerUnit The meters-per-unit value.\n * @param {number} displayDpi The display resolution.\n * @return {string} The mapagent map image request URL.\n */\nfunction getUrl(baseUrl, params, extent, size, useOverlay, metersPerUnit, displayDpi) {\n  const scale = getScale(extent, size, metersPerUnit, displayDpi);\n  const center = getCenter(extent);\n  const baseParams = {\n    'OPERATION': useOverlay ? 'GETDYNAMICMAPOVERLAYIMAGE' : 'GETMAPIMAGE',\n    'VERSION': '2.0.0',\n    'LOCALE': 'en',\n    'CLIENTAGENT': 'ol/source/ImageMapGuide source',\n    'CLIP': '1',\n    'SETDISPLAYDPI': displayDpi,\n    'SETDISPLAYWIDTH': Math.round(size[0]),\n    'SETDISPLAYHEIGHT': Math.round(size[1]),\n    'SETVIEWSCALE': scale,\n    'SETVIEWCENTERX': center[0],\n    'SETVIEWCENTERY': center[1]\n  };\n  Object.assign(baseParams, params);\n  return appendParams(baseUrl, baseParams);\n}\n\n/**\n * Creates a loader for MapGuide images.\n * @param {LoaderOptions} options Image ArcGIS Rest Options.\n * @return {import('../Image.js').ImageObjectPromiseLoader} ArcGIS Rest image.\n * @api\n */\nexport function createLoader(options) {\n  const load = options.load || decode;\n  const useOverlay = options.useOverlay ?? false;\n  const metersPerUnit = options.metersPerUnit || 1;\n  const displayDpi = options.displayDpi || 96;\n  const ratio = options.ratio ?? 1;\n  const crossOrigin = options.crossOrigin ?? null;\n\n  /** @type {import('../Image.js').ImageObjectPromiseLoader} */\n  return function (extent, resolution, pixelRatio) {\n    const image = new Image();\n    image.crossOrigin = crossOrigin;\n    extent = getRequestExtent(extent, resolution, pixelRatio, ratio);\n    const width = getWidth(extent) / resolution;\n    const height = getHeight(extent) / resolution;\n    const size = [width * pixelRatio, height * pixelRatio];\n    const src = getUrl(options.url, options.params, extent, size, useOverlay, metersPerUnit, displayDpi);\n    return load(image, src).then(image => ({\n      image,\n      extent,\n      pixelRatio\n    }));\n  };\n}", "/**\n * @module ol/source/ImageMapGuide\n */\n\nimport ImageSource, { defaultImageLoadFunction } from './Image.js';\nimport { createLoader } from './mapguide.js';\nimport { decode } from '../Image.js';\n\n/**\n * @typedef {Object} Options\n * @property {string} [url] The mapagent url.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {number} [displayDpi=96] The display resolution.\n * @property {number} [metersPerUnit=1] The meters-per-unit value.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\n * the image from the remote server.\n * @property {boolean} [useOverlay] If `true`, will use `GETDYNAMICMAPOVERLAYIMAGE`.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [ratio=1] Ratio. `1` means image requests are the size of the map viewport, `2` means\n * twice the width and height of the map viewport, and so on. Must be `1` or higher.\n * @property {Array<number>} [resolutions] Resolutions.\n * If specified, requests will be made for these resolutions only.\n * @property {import(\"../Image.js\").LoadFunction} [imageLoadFunction] Optional function to load an image given a URL.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {Object} [params] Additional parameters.\n */\n\n/**\n * @classdesc\n * Source for images from Mapguide servers\n *\n * @fires module:ol/source/Image.ImageSourceEvent\n * @api\n */\nclass ImageMapGuide extends ImageSource {\n  /**\n   * @param {Options} options ImageMapGuide options.\n   */\n  constructor(options) {\n    super({\n      interpolate: options.interpolate,\n      projection: options.projection,\n      resolutions: options.resolutions\n    });\n\n    /**\n     * @private\n     * @type {?string}\n     */\n    this.crossOrigin_ = options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.displayDpi_ = options.displayDpi !== undefined ? options.displayDpi : 96;\n\n    /**\n     * @private\n     * @type {!Object}\n     */\n    this.params_ = Object.assign({}, options.params);\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.url_ = options.url;\n\n    /**\n     * @private\n     * @type {import(\"../Image.js\").LoadFunction}\n     */\n    this.imageLoadFunction_ = options.imageLoadFunction !== undefined ? options.imageLoadFunction : defaultImageLoadFunction;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.metersPerUnit_ = options.metersPerUnit !== undefined ? options.metersPerUnit : 1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.ratio_ = options.ratio !== undefined ? options.ratio : 1;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.useOverlay_ = options.useOverlay !== undefined ? options.useOverlay : false;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedRevision_ = 0;\n\n    /**\n     * @private\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n    this.loaderProjection_ = null;\n  }\n\n  /**\n   * Get the user-provided params, i.e. those passed to the constructor through\n   * the \"params\" option, and possibly updated using the updateParams method.\n   * @return {Object} Params.\n   * @api\n   */\n  getParams() {\n    return this.params_;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../Image.js\").default} Single image.\n   * @override\n   */\n  getImageInternal(extent, resolution, pixelRatio, projection) {\n    if (this.url_ === undefined) {\n      return null;\n    }\n    if (!this.loader || this.loaderProjection_ !== projection) {\n      // Lazily create loader to pick up the view projection and to allow `params` updates\n      this.loaderProjection_ = projection;\n      this.loader = createLoader({\n        crossOrigin: this.crossOrigin_,\n        params: this.params_,\n        hidpi: this.hidpi_,\n        metersPerUnit: this.metersPerUnit_,\n        url: this.url_,\n        useOverlay: this.useOverlay_,\n        ratio: this.ratio_,\n        load: (image, src) => {\n          this.image.setImage(image);\n          this.imageLoadFunction_(this.image, src);\n          return decode(image);\n        }\n      });\n    }\n    return super.getImageInternal(extent, resolution, pixelRatio, projection);\n  }\n\n  /**\n   * Return the image load function of the source.\n   * @return {import(\"../Image.js\").LoadFunction} The image load function.\n   * @api\n   */\n  getImageLoadFunction() {\n    return this.imageLoadFunction_;\n  }\n\n  /**\n   * Update the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n  updateParams(params) {\n    Object.assign(this.params_, params);\n    this.changed();\n  }\n\n  /**\n   * Set the image load function of the MapGuide source.\n   * @param {import(\"../Image.js\").LoadFunction} imageLoadFunction Image load function.\n   * @api\n   */\n  setImageLoadFunction(imageLoadFunction) {\n    this.imageLoadFunction_ = imageLoadFunction;\n    this.changed();\n  }\n\n  /**\n   * @override\n   */\n  changed() {\n    this.image = null;\n    super.changed();\n  }\n}\nexport default ImageMapGuide;", "/**\n * @module ol/source/static\n */\n\nimport { decode } from '../Image.js';\nimport { getHeight, getWidth } from '../extent.js';\n\n/**\n * @typedef {Object} LoaderOptions\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {import(\"../extent.js\").Extent} imageExtent Extent of the image in map coordinates.\n * This is the [left, bottom, right, top] map coordinates of your image. When using this loader with an\n * `ol/source/Image`, the same extent must be set as `extent` of the `ol/layer/Image`.\n * @property {string} url Image URL.\n * @property {function(HTMLImageElement, string): Promise<import('../DataTile.js').ImageLike>} [load] Function\n * to perform loading of the image. Receives the created `HTMLImageElement` and the desired `src` as argument and\n * returns a promise resolving to the loaded or decoded image. Default is {@link module:ol/Image.decode}.\n */\n\n/**\n * Creates a loader for static images.\n * @param {LoaderOptions} options Loader options.\n * @return {import(\"../Image.js\").ImageObjectPromiseLoader} Loader.\n * @api\n */\nexport function createLoader(options) {\n  const load = options.load || decode;\n  const extent = options.imageExtent;\n  const crossOrigin = options.crossOrigin ?? null;\n  return () => {\n    const image = new Image();\n    image.crossOrigin = crossOrigin;\n    return load(image, options.url).then(image => {\n      const resolutionX = getWidth(extent) / image.width;\n      const resolutionY = getHeight(extent) / image.height;\n      const resolution = resolutionX !== resolutionY ? [resolutionX, resolutionY] : resolutionY;\n      return {\n        image,\n        extent,\n        resolution,\n        pixelRatio: 1\n      };\n    });\n  };\n}", "/**\n * @module ol/source/ImageStatic\n */\n\nimport EventType from '../events/EventType.js';\nimport ImageSource, { defaultImageLoadFunction } from './Image.js';\nimport ImageWrapper, { decode } from '../Image.js';\nimport { createLoader } from './static.js';\nimport { get as getProjection } from '../proj.js';\nimport { intersects } from '../extent.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {import(\"../extent.js\").Extent} imageExtent Extent of the image in map coordinates.\n * This is the [left, bottom, right, top] map coordinates of your image.\n * @property {import(\"../Image.js\").LoadFunction} [imageLoadFunction] Optional function to load an image given a URL.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {string} url Image URL.\n */\n\n/**\n * @classdesc\n * A layer source for displaying a single, static image.\n * @api\n */\nclass Static extends ImageSource {\n  /**\n   * @param {Options} options ImageStatic options.\n   */\n  constructor(options) {\n    const crossOrigin = options.crossOrigin !== undefined ? options.crossOrigin : null;\n    const /** @type {import(\"../Image.js\").LoadFunction} */imageLoadFunction = options.imageLoadFunction !== undefined ? options.imageLoadFunction : defaultImageLoadFunction;\n    super({\n      attributions: options.attributions,\n      interpolate: options.interpolate,\n      projection: getProjection(options.projection)\n    });\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.url_ = options.url;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.imageExtent_ = options.imageExtent;\n\n    /**\n     * @private\n     * @type {import(\"../Image.js\").default}\n     */\n    this.image = null;\n    this.image = new ImageWrapper(this.imageExtent_, undefined, 1, createLoader({\n      url: options.url,\n      imageExtent: options.imageExtent,\n      crossOrigin,\n      load: (image, src) => {\n        this.image.setImage(image);\n        imageLoadFunction(this.image, src);\n        return decode(image);\n      }\n    }));\n    this.image.addEventListener(EventType.CHANGE, this.handleImageChange.bind(this));\n  }\n\n  /**\n   * Returns the image extent\n   * @return {import(\"../extent.js\").Extent} image extent.\n   * @api\n   */\n  getImageExtent() {\n    return this.imageExtent_;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../Image.js\").default} Single image.\n   * @override\n   */\n  getImageInternal(extent, resolution, pixelRatio, projection) {\n    if (intersects(extent, this.image.getExtent())) {\n      return this.image;\n    }\n    return null;\n  }\n\n  /**\n   * Return the URL used for this image source.\n   * @return {string} URL.\n   * @api\n   */\n  getUrl() {\n    return this.url_;\n  }\n}\nexport default Static;", "/**\n * @module ol/source/ImageTile\n */\nimport DataTileSource from './DataTile.js';\nimport { expandUrl, pickUrl, renderXYZTemplate } from '../uri.js';\n\n/**\n * Image tile loading function.  The function is called with z, x, and y tile coordinates and\n * returns an {@link import(\"../DataTile.js\").ImageLike image} or a promise for the same.\n *\n * @typedef {function(number, number, number, import(\"./DataTile.js\").LoaderOptions):(import(\"../DataTile.js\").ImageLike|Promise<import(\"../DataTile.js\").ImageLike>)} Loader\n */\n\n/**\n * @typedef {function(number, number, number, import(\"./DataTile.js\").LoaderOptions):string} UrlGetter\n */\n\n/**\n * @typedef {string | Array<string> | UrlGetter} UrlLike\n */\n\n/**\n * @typedef {Object} Options\n * @property {UrlLike} [url] The image URL template.  In addition to a single URL template, an array of URL templates or a function\n * can be provided.  If a function is provided, it will be called with z, x, y tile coordinates and loader options and should\n * return a URL.\n * @property {Loader} [loader] Data loader.  Called with z, x, and y tile coordinates.\n * Returns an {@link import(\"../DataTile.js\").ImageLike image} for a tile or a promise for the same.\n * The promise should not resolve until the image is loaded.  If the `url` option is provided, a loader will be created.\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [maxZoom=42] Optional max zoom level. Not used if `tileGrid` is provided.\n * @property {number} [minZoom=0] Optional min zoom level. Not used if `tileGrid` is provided.\n * @property {number|import(\"../size.js\").Size} [tileSize=[256, 256]] The pixel width and height of the source tiles.\n * This may be different than the rendered pixel size if a `tileGrid` is provided.\n * @property {number} [gutter=0] The size in pixels of the gutter around data tiles to ignore.\n * This allows artifacts of rendering at tile edges to be ignored.\n * Supported data should be wider and taller than the tile size by a value of `2 x gutter`.\n * @property {number} [maxResolution] Optional tile grid resolution at level zero. Not used if `tileGrid` is provided.\n * @property {import(\"../proj.js\").ProjectionLike} [projection='EPSG:3857'] Tile projection.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid.\n * @property {import(\"./Source.js\").State} [state] The source state.\n * @property {boolean} [wrapX=true] Render tiles beyond the antimeridian.\n * @property {number} [transition] Transition time when fading in new tiles (in miliseconds).\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.\n * @property {import('./DataTile.js').CrossOriginAttribute} [crossOrigin='anonymous'] The crossOrigin property to pass to loaders for image data.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\nconst loadError = new Error('Image failed to load');\n\n/**\n * @param {string} template The image url template.\n * @param {number} z The tile z coordinate.\n * @param {number} x The tile x coordinate.\n * @param {number} y The tile y coordinate.\n * @param {import('./DataTile.js').LoaderOptions} options The loader options.\n * @return {Promise<HTMLImageElement>} Resolves with a loaded image.\n */\nfunction loadImage(template, z, x, y, options) {\n  return new Promise((resolve, reject) => {\n    const image = new Image();\n    image.crossOrigin = options.crossOrigin ?? null;\n    image.addEventListener('load', () => resolve(image));\n    image.addEventListener('error', () => reject(loadError));\n    image.src = renderXYZTemplate(template, z, x, y, options.maxY);\n  });\n}\n\n/**\n * @param {Array<string>} templates The url templates.\n * @return {Loader} The image loader.\n */\nfunction makeLoaderFromTemplates(templates) {\n  return function (z, x, y, options) {\n    const template = pickUrl(templates, z, x, y);\n    return loadImage(template, z, x, y, options);\n  };\n}\n\n/**\n * @param {UrlGetter} getter The url getter.\n * @return {Loader} The image loader.\n */\nfunction makeLoaderFromGetter(getter) {\n  return function (z, x, y, options) {\n    const url = getter(z, x, y, options);\n    return loadImage(url, z, x, y, options);\n  };\n}\n\n/**\n * @param {UrlLike} url The URL-like option.\n * @return {Loader} The tile loader.\n */\nfunction makeLoaderFromUrlLike(url) {\n  /**\n   * @type {Loader}\n   */\n  let loader;\n  if (Array.isArray(url)) {\n    loader = makeLoaderFromTemplates(url);\n  } else if (typeof url === 'string') {\n    const urls = expandUrl(url);\n    loader = makeLoaderFromTemplates(urls);\n  } else if (typeof url === 'function') {\n    loader = makeLoaderFromGetter(url);\n  } else {\n    throw new Error('The url option must be a single template, an array of templates, or a function for getting a URL');\n  }\n  return loader;\n}\nlet keyCount = 0;\n\n/**\n * @param {UrlLike} url The URL-like option.\n * @return {string} A key for the URL.\n */\nfunction keyFromUrlLike(url) {\n  if (Array.isArray(url)) {\n    return url.join('\\n');\n  }\n  if (typeof url === 'string') {\n    return url;\n  }\n  ++keyCount;\n  return 'url-function-key-' + keyCount;\n}\n\n/**\n * @classdesc\n * A source for typed array data tiles.\n *\n * @extends DataTileSource<import(\"../ImageTile.js\").default>\n * @fires import(\"./Tile.js\").TileSourceEvent\n * @api\n */\nclass ImageTileSource extends DataTileSource {\n  /**\n   * @param {Options} [options] DataTile source options.\n   */\n  constructor(options) {\n    options = options || {};\n\n    /**\n     * @type {Loader}\n     */\n    let loader = options.loader;\n\n    /**\n     * @type {string}\n     */\n    let key;\n    if (options.url) {\n      loader = makeLoaderFromUrlLike(options.url);\n      key = keyFromUrlLike(options.url);\n    }\n\n    /**\n     * @type {import('./Source.js').State}\n     */\n    const state = !loader ? 'loading' : options.state;\n    const wrapX = options.wrapX === undefined ? true : options.wrapX;\n    super({\n      loader: loader,\n      key: key,\n      attributions: options.attributions,\n      attributionsCollapsible: options.attributionsCollapsible,\n      maxZoom: options.maxZoom,\n      minZoom: options.minZoom,\n      tileSize: options.tileSize,\n      gutter: options.gutter,\n      maxResolution: options.maxResolution,\n      projection: options.projection,\n      tileGrid: options.tileGrid,\n      state: state,\n      wrapX: wrapX,\n      transition: options.transition,\n      interpolate: options.interpolate !== false,\n      crossOrigin: options.crossOrigin,\n      zDirection: options.zDirection\n    });\n  }\n\n  /**\n   * @param {UrlLike} url The new URL.\n   * @api\n   */\n  setUrl(url) {\n    const loader = makeLoaderFromUrlLike(url);\n    this.setLoader(loader);\n    this.setKey(keyFromUrlLike(url));\n    if (this.getState() !== 'ready') {\n      this.setState('ready');\n    }\n  }\n}\nexport default ImageTileSource;", "/**\n * @module ol/source/ogcTileUtil\n */\n\nimport TileGrid from '../tilegrid/TileGrid.js';\nimport { getJSON, resolveUrl } from '../net.js';\nimport { get as getProjection } from '../proj.js';\nimport { getIntersection as intersectExtents } from '../extent.js';\nimport { error as logError } from '../console.js';\n\n/**\n * See https://ogcapi.ogc.org/tiles/.\n */\n\n/**\n * @typedef {'map' | 'vector'} TileType\n */\n\n/**\n * @typedef {'topLeft' | 'bottomLeft'} CornerOfOrigin\n */\n\n/**\n * @typedef {Object} TileSet\n * @property {TileType} dataType Type of data represented in the tileset.\n * @property {string} [tileMatrixSetDefinition] Reference to a tile matrix set definition.\n * @property {TileMatrixSet} [tileMatrixSet] Tile matrix set definition.\n * @property {Array<TileMatrixSetLimit>} [tileMatrixSetLimits] Tile matrix set limits.\n * @property {Array<Link>} links Tileset links.\n */\n\n/**\n * @typedef {Object} Link\n * @property {string} rel The link rel attribute.\n * @property {string} href The link URL.\n * @property {string} type The link type.\n */\n\n/**\n * @typedef {Object} TileMatrixSetLimit\n * @property {string} tileMatrix The tile matrix id.\n * @property {number} minTileRow The minimum tile row.\n * @property {number} maxTileRow The maximum tile row.\n * @property {number} minTileCol The minimum tile column.\n * @property {number} maxTileCol The maximum tile column.\n */\n\n/**\n * @typedef {Object} TileMatrixSet\n * @property {string} id The tile matrix set identifier.\n * @property {string|CrsUri|CrsWkt|CrsReferenceSystem} crs The coordinate reference system.\n * @property {Array<string>} [orderedAxes] Axis order.\n * @property {Array<TileMatrix>} tileMatrices Array of tile matrices.\n */\n\n/**\n * @typedef {Object} CrsUri\n * @property {string} uri Reference to one coordinate reference system (CRS).\n */\n\n/**\n * @typedef {Object} CrsWkt\n * @property {Object} wkt JSON encoding for WKT representation of CRS 2.0.\n */\n\n/**\n * @typedef {Object} CrsReferenceSystem\n * @property {Object} referenceSystem Data structure as defined in the MD_ReferenceSystem of the ISO 19115.\n */\n\n/**\n * @typedef {Object} TileMatrix\n * @property {string} id The tile matrix identifier.\n * @property {number} cellSize The pixel resolution (map units per pixel).\n * @property {Array<number>} pointOfOrigin The map location of the matrix origin.\n * @property {CornerOfOrigin} [cornerOfOrigin='topLeft'] The corner of the matrix that represents the origin ('topLeft' or 'bottomLeft').\n * @property {number} matrixWidth The number of columns.\n * @property {number} matrixHeight The number of rows.\n * @property {number} tileWidth The pixel width of a tile.\n * @property {number} tileHeight The pixel height of a tile.\n */\n\n/**\n * @type {Object<string, boolean>}\n */\nconst knownMapMediaTypes = {\n  'image/png': true,\n  'image/jpeg': true,\n  'image/gif': true,\n  'image/webp': true\n};\n\n/**\n * @type {Object<string, boolean>}\n */\nconst knownVectorMediaTypes = {\n  'application/vnd.mapbox-vector-tile': true,\n  'application/geo+json': true\n};\n\n/**\n * @typedef {Object} TileSetInfo\n * @property {string} urlTemplate The tile URL template.\n * @property {import(\"../proj/Projection.js\").default} projection The source projection.\n * @property {import(\"../tilegrid/TileGrid.js\").default} grid The tile grid.\n * @property {import(\"../Tile.js\").UrlFunction} urlFunction The tile URL function.\n */\n\n/**\n * @typedef {Object} SourceInfo\n * @property {string} url The tile set URL.\n * @property {string} mediaType The preferred tile media type.\n * @property {Array<string>} [supportedMediaTypes] The supported media types.\n * @property {import(\"../proj/Projection.js\").default} projection The source projection.\n * @property {Object} [context] Optional context for constructing the URL.\n * @property {Array<string>} [collections] Optional collections to append the URL with.\n */\n\n/**\n * @param {string} tileUrlTemplate Tile URL template.\n * @param {Array<string>} collections List of collections to include as query parameter.\n * @return {string} The tile URL template with appended collections query parameter.\n */\nexport function appendCollectionsQueryParam(tileUrlTemplate, collections) {\n  if (!collections.length) {\n    return tileUrlTemplate;\n  }\n\n  // making sure we can always construct a URL instance.\n  const url = new URL(tileUrlTemplate, 'file:/');\n  if (url.pathname.split('/').includes('collections')) {\n    logError('The \"collections\" query parameter cannot be added to collection endpoints');\n    return tileUrlTemplate;\n  }\n  // According to conformance class\n  // http://www.opengis.net/spec/ogcapi-tiles-1/1.0/conf/collections-selection\n  // commata in the identifiers of the `collections` query parameter\n  // need to be URLEncoded, while the commata separating the identifiers\n  // should not.\n  const encodedCollections = collections.map(c => encodeURIComponent(c)).join(',');\n  url.searchParams.append('collections', encodedCollections);\n  const baseUrl = tileUrlTemplate.split('?')[0];\n  const queryParams = decodeURIComponent(url.searchParams.toString());\n  return `${baseUrl}?${queryParams}`;\n}\n\n/**\n * @param {Array<Link>} links Tileset links.\n * @param {string} [mediaType] The preferred media type.\n * @param {Array<string>} [collections] Optional collections to append the URL with.\n * @return {string} The tile URL template.\n */\nexport function getMapTileUrlTemplate(links, mediaType, collections) {\n  let tileUrlTemplate;\n  let fallbackUrlTemplate;\n  for (let i = 0; i < links.length; ++i) {\n    const link = links[i];\n    if (link.rel === 'item') {\n      if (link.type === mediaType) {\n        tileUrlTemplate = link.href;\n        break;\n      }\n      if (knownMapMediaTypes[link.type]) {\n        fallbackUrlTemplate = link.href;\n      } else if (!fallbackUrlTemplate && link.type.startsWith('image/')) {\n        fallbackUrlTemplate = link.href;\n      }\n    }\n  }\n  if (!tileUrlTemplate) {\n    if (fallbackUrlTemplate) {\n      tileUrlTemplate = fallbackUrlTemplate;\n    } else {\n      throw new Error('Could not find \"item\" link');\n    }\n  }\n  if (collections) {\n    tileUrlTemplate = appendCollectionsQueryParam(tileUrlTemplate, collections);\n  }\n  return tileUrlTemplate;\n}\n\n/**\n * @param {Array<Link>} links Tileset links.\n * @param {string} [mediaType] The preferred media type.\n * @param {Array<string>} [supportedMediaTypes] The media types supported by the parser.\n * @param {Array<string>} [collections] Optional collections to append the URL with.\n * @return {string} The tile URL template.\n */\nexport function getVectorTileUrlTemplate(links, mediaType, supportedMediaTypes, collections) {\n  let tileUrlTemplate;\n  let fallbackUrlTemplate;\n\n  /**\n   * Lookup of URL by media type.\n   * @type {Object<string, string>}\n   */\n  const hrefLookup = {};\n  for (let i = 0; i < links.length; ++i) {\n    const link = links[i];\n    hrefLookup[link.type] = link.href;\n    if (link.rel === 'item') {\n      if (link.type === mediaType) {\n        tileUrlTemplate = link.href;\n        break;\n      }\n      if (knownVectorMediaTypes[link.type]) {\n        fallbackUrlTemplate = link.href;\n      }\n    }\n  }\n  if (!tileUrlTemplate && supportedMediaTypes) {\n    for (let i = 0; i < supportedMediaTypes.length; ++i) {\n      const supportedMediaType = supportedMediaTypes[i];\n      if (hrefLookup[supportedMediaType]) {\n        tileUrlTemplate = hrefLookup[supportedMediaType];\n        break;\n      }\n    }\n  }\n  if (!tileUrlTemplate) {\n    if (fallbackUrlTemplate) {\n      tileUrlTemplate = fallbackUrlTemplate;\n    } else {\n      throw new Error('Could not find \"item\" link');\n    }\n  }\n  if (collections) {\n    tileUrlTemplate = appendCollectionsQueryParam(tileUrlTemplate, collections);\n  }\n  return tileUrlTemplate;\n}\n\n/**\n * @param {SourceInfo} sourceInfo The source info.\n * @param {TileMatrixSet} tileMatrixSet Tile matrix set.\n * @param {string} tileUrlTemplate Tile URL template.\n * @param {Array<TileMatrixSetLimit>} [tileMatrixSetLimits] Tile matrix set limits.\n * @return {TileSetInfo} Tile set info.\n */\nfunction parseTileMatrixSet(sourceInfo, tileMatrixSet, tileUrlTemplate, tileMatrixSetLimits) {\n  let projection = sourceInfo.projection;\n  if (!projection) {\n    if (typeof tileMatrixSet.crs === 'string') {\n      projection = getProjection(tileMatrixSet.crs);\n    } else if ('uri' in tileMatrixSet.crs) {\n      projection = getProjection(tileMatrixSet.crs.uri);\n    }\n    if (!projection) {\n      throw new Error(`Unsupported CRS: ${JSON.stringify(tileMatrixSet.crs)}`);\n    }\n  }\n  const orderedAxes = tileMatrixSet.orderedAxes;\n  const axisOrientation = orderedAxes ? orderedAxes.slice(0, 2).map(s => s.replace(/E|X|Lon/i, 'e').replace(/N|Y|Lat/i, 'n')).join('') : projection.getAxisOrientation();\n  const backwards = !axisOrientation.startsWith('en');\n  const matrices = tileMatrixSet.tileMatrices;\n\n  /**\n   * @type {Object<string, TileMatrix>}\n   */\n  const matrixLookup = {};\n  for (let i = 0; i < matrices.length; ++i) {\n    const matrix = matrices[i];\n    matrixLookup[matrix.id] = matrix;\n  }\n\n  /**\n   * @type {Object<string, TileMatrixSetLimit>}\n   */\n  const limitLookup = {};\n\n  /**\n   * @type {Array<string>}\n   */\n  const matrixIds = [];\n  if (tileMatrixSetLimits) {\n    for (let i = 0; i < tileMatrixSetLimits.length; ++i) {\n      const limit = tileMatrixSetLimits[i];\n      const id = limit.tileMatrix;\n      matrixIds.push(id);\n      limitLookup[id] = limit;\n    }\n  } else {\n    for (let i = 0; i < matrices.length; ++i) {\n      const id = matrices[i].id;\n      matrixIds.push(id);\n    }\n  }\n  const length = matrixIds.length;\n  const origins = new Array(length);\n  const resolutions = new Array(length);\n  const sizes = new Array(length);\n  const tileSizes = new Array(length);\n  const extent = [-Infinity, -Infinity, Infinity, Infinity];\n  for (let i = 0; i < length; ++i) {\n    const id = matrixIds[i];\n    const matrix = matrixLookup[id];\n    const origin = matrix.pointOfOrigin;\n    if (backwards) {\n      origins[i] = [origin[1], origin[0]];\n    } else {\n      origins[i] = origin;\n    }\n    resolutions[i] = matrix.cellSize;\n    sizes[i] = [matrix.matrixWidth, matrix.matrixHeight];\n    tileSizes[i] = [matrix.tileWidth, matrix.tileHeight];\n    const limit = limitLookup[id];\n    if (limit) {\n      const tileMapWidth = matrix.cellSize * matrix.tileWidth;\n      const minX = origins[i][0] + limit.minTileCol * tileMapWidth;\n      const maxX = origins[i][0] + (limit.maxTileCol + 1) * tileMapWidth;\n      const tileMapHeight = matrix.cellSize * matrix.tileHeight;\n      const upsideDown = matrix.cornerOfOrigin === 'bottomLeft';\n      let minY;\n      let maxY;\n      if (upsideDown) {\n        minY = origins[i][1] + limit.minTileRow * tileMapHeight;\n        maxY = origins[i][1] + (limit.maxTileRow + 1) * tileMapHeight;\n      } else {\n        minY = origins[i][1] - (limit.maxTileRow + 1) * tileMapHeight;\n        maxY = origins[i][1] - limit.minTileRow * tileMapHeight;\n      }\n      intersectExtents(extent, [minX, minY, maxX, maxY], extent);\n    }\n  }\n  const tileGrid = new TileGrid({\n    origins: origins,\n    resolutions: resolutions,\n    sizes: sizes,\n    tileSizes: tileSizes,\n    extent: tileMatrixSetLimits ? extent : undefined\n  });\n  const context = sourceInfo.context;\n  const base = sourceInfo.url;\n\n  /** @type {import('../Tile.js').UrlFunction} */\n  function tileUrlFunction(tileCoord, pixelRatio, projection) {\n    if (!tileCoord) {\n      return undefined;\n    }\n    const id = matrixIds[tileCoord[0]];\n    const matrix = matrixLookup[id];\n    const upsideDown = matrix.cornerOfOrigin === 'bottomLeft';\n    const localContext = {\n      tileMatrix: id,\n      tileCol: tileCoord[1],\n      tileRow: upsideDown ? -tileCoord[2] - 1 : tileCoord[2]\n    };\n    if (tileMatrixSetLimits) {\n      const limit = limitLookup[matrix.id];\n      if (localContext.tileCol < limit.minTileCol || localContext.tileCol > limit.maxTileCol || localContext.tileRow < limit.minTileRow || localContext.tileRow > limit.maxTileRow) {\n        return undefined;\n      }\n    }\n    Object.assign(localContext, context);\n    const url = tileUrlTemplate.replace(/\\{(\\w+?)\\}/g, function (m, p) {\n      return localContext[p];\n    });\n    return resolveUrl(base, url);\n  }\n  return {\n    grid: tileGrid,\n    projection: projection,\n    urlTemplate: tileUrlTemplate,\n    urlFunction: tileUrlFunction\n  };\n}\n\n/**\n * @param {SourceInfo} sourceInfo The source info.\n * @param {TileSet} tileSet Tile set.\n * @return {TileSetInfo|Promise<TileSetInfo>} Tile set info.\n */\nfunction parseTileSetMetadata(sourceInfo, tileSet) {\n  const tileMatrixSetLimits = tileSet.tileMatrixSetLimits;\n  /** @type {string} */\n  let tileUrlTemplate;\n  if (tileSet.dataType === 'map') {\n    tileUrlTemplate = getMapTileUrlTemplate(tileSet.links, sourceInfo.mediaType, sourceInfo.collections);\n  } else if (tileSet.dataType === 'vector') {\n    tileUrlTemplate = getVectorTileUrlTemplate(tileSet.links, sourceInfo.mediaType, sourceInfo.supportedMediaTypes, sourceInfo.collections);\n  } else {\n    throw new Error('Expected tileset data type to be \"map\" or \"vector\"');\n  }\n  if (tileSet.tileMatrixSet) {\n    return parseTileMatrixSet(sourceInfo, tileSet.tileMatrixSet, tileUrlTemplate, tileMatrixSetLimits);\n  }\n  const tileMatrixSetLink = tileSet.links.find(link => link.rel === 'http://www.opengis.net/def/rel/ogc/1.0/tiling-scheme');\n  if (!tileMatrixSetLink) {\n    throw new Error('Expected http://www.opengis.net/def/rel/ogc/1.0/tiling-scheme link or tileMatrixSet');\n  }\n  const tileMatrixSetDefinition = tileMatrixSetLink.href;\n  const url = resolveUrl(sourceInfo.url, tileMatrixSetDefinition);\n  return getJSON(url).then(function (tileMatrixSet) {\n    return parseTileMatrixSet(sourceInfo, tileMatrixSet, tileUrlTemplate, tileMatrixSetLimits);\n  });\n}\n\n/**\n * @param {SourceInfo} sourceInfo Source info.\n * @return {Promise<TileSetInfo>} Tile set info.\n */\nexport function getTileSetInfo(sourceInfo) {\n  return getJSON(sourceInfo.url).then(function (tileSet) {\n    return parseTileSetMetadata(sourceInfo, tileSet);\n  });\n}", "/**\n * @module ol/source/OGCMapTile\n */\nimport TileImage from './TileImage.js';\nimport { getTileSetInfo } from './ogcTileUtil.js';\nimport { error as logError } from '../console.js';\n\n/**\n * @typedef {Object} Options\n * @property {string} url URL to the OGC Map Tileset endpoint.\n * @property {Object} [context] A lookup of values to use in the tile URL template.  The `{tileMatrix}`\n * (zoom level), `{tileRow}`, and `{tileCol}` variables in the URL will always be provided by the source.\n * @property {string} [mediaType] The content type for the tiles (e.g. \"image/png\").  If not provided,\n * the source will try to find a link with rel=\"item\" that uses a supported image type.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. By default, the projection\n * will be derived from the `crs` of the `tileMatrixSet`.  You can override this by supplying\n * a projection to the constructor.\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(tile, src) {\n *   tile.getImage().src = src;\n * };\n * ```\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {Array<string>} [collections] A list of geospatial data sub-resources to include. If not provided, the entire dataset will\n * be included. This option is not applicable when requesting the tileset for a single collection.\n */\n\n/**\n * @classdesc\n * Layer source for map tiles from an [OGC API - Tiles](https://ogcapi.ogc.org/tiles/) service that provides \"map\" type tiles.\n * The service must conform to at least the core (http://www.opengis.net/spec/ogcapi-tiles-1/1.0/conf/core)\n * and tileset (http://www.opengis.net/spec/ogcapi-tiles-1/1.0/conf/tileset) conformance classes. For supporting the `collections`\n * option, the service must conform to the collections selection\n * (http://www.opengis.net/spec/ogcapi-tiles-1/1.0/conf/collections-selection) conformance class.\n * @api\n */\nclass OGCMapTile extends TileImage {\n  /**\n   * @param {Options} options OGC map tile options.\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      interpolate: options.interpolate,\n      projection: options.projection,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      state: 'loading',\n      tileLoadFunction: options.tileLoadFunction,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n      transition: options.transition\n    });\n    const sourceInfo = {\n      url: options.url,\n      projection: this.getProjection(),\n      mediaType: options.mediaType,\n      context: options.context || null,\n      collections: options.collections\n    };\n    getTileSetInfo(sourceInfo).then(this.handleTileSetInfo_.bind(this)).catch(this.handleError_.bind(this));\n  }\n\n  /**\n   * @param {import(\"./ogcTileUtil.js\").TileSetInfo} tileSetInfo Tile set info.\n   * @private\n   */\n  handleTileSetInfo_(tileSetInfo) {\n    this.tileGrid = tileSetInfo.grid;\n    this.projection = tileSetInfo.projection;\n    this.setTileUrlFunction(tileSetInfo.urlFunction, tileSetInfo.urlTemplate);\n    this.setState('ready');\n  }\n\n  /**\n   * @private\n   * @param {Error} error The error.\n   */\n  handleError_(error) {\n    logError(error);\n    this.setState('error');\n  }\n}\nexport default OGCMapTile;", "/**\n * @module ol/source/OGCVectorTile\n */\n\nimport VectorTileSource from './VectorTile.js';\nimport { getTileSetInfo } from './ogcTileUtil.js';\nimport { error as logError } from '../console.js';\n\n/**\n * @template {import(\"../Feature.js\").FeatureLike} [FeatureType=import(\"../render/Feature.js\").default]\n * @typedef {Object} Options\n * @property {string} url URL to the OGC Vector Tileset endpoint.\n * @property {Object} [context] A lookup of values to use in the tile URL template.  The `{tileMatrix}`\n * (zoom level), `{tileRow}`, and `{tileCol}` variables in the URL will always be provided by the source.\n * @property {import(\"../format/Feature.js\").default<FeatureType>} [format] Feature format for tiles. Used and required by the default.\n * @property {string} [mediaType] The content type for the tiles (e.g. \"application/vnd.mapbox-vector-tile\").  If not provided,\n * the source will try to find a link with rel=\"item\" that uses a vector type supported by the configured format.\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.\n * @property {boolean} [overlaps=true] This source may have overlapping geometries. Setting this\n * to `false` (e.g. for sources with polygons that represent administrative\n * boundaries or TopoJSON sources) allows the renderer to optimise fill and\n * stroke operations.\n * @property {import(\"../proj.js\").ProjectionLike} [projection='EPSG:3857'] Projection of the tile grid.\n * @property {typeof import(\"../VectorTile.js\").default} [tileClass] Class used to instantiate image tiles.\n * Default is {@link module:ol/VectorTile~VectorTile}.\n * @property {number} [transition] A duration for tile opacity\n * transitions in milliseconds. A duration of 0 disables the opacity transition.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * When set to `false`, only one world\n * will be rendered. When set to `true`, tiles will be wrapped horizontally to\n * render multiple worlds.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=1]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n * @property {Array<string>} [collections] A list of geospatial data sub-resources to include. If not provided, the entire dataset will\n * be included. This option is not applicable when requesting the tileset for a single collection.\n */\n\n/**\n * @classdesc\n * Layer source for map tiles from an [OGC API - Tiles](https://ogcapi.ogc.org/tiles/) service that provides \"vector\" type tiles.\n * The service must conform to at least the core (http://www.opengis.net/spec/ogcapi-tiles-1/1.0/conf/core)\n * and tileset (http://www.opengis.net/spec/ogcapi-tiles-1/1.0/conf/tileset) conformance classes. For supporting the `collections`\n * option, the service must conform to the collections selection\n * (http://www.opengis.net/spec/ogcapi-tiles-1/1.0/conf/collections-selection) conformance class.\n *\n * Vector tile sets may come in a variety of formats (e.g. GeoJSON, MVT).  The `format` option is used to determine\n * which of the advertised media types is used.  If you need to force the use of a particular media type, you can\n * provide the `mediaType` option.\n * @api\n * @template {import(\"../Feature.js\").FeatureLike} [FeatureType=import(\"../render/Feature.js\").default]\n * @extends {VectorTileSource<FeatureType>}\n */\nclass OGCVectorTile extends VectorTileSource {\n  /**\n   * @param {Options<FeatureType>} options OGC vector tile options.\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      attributionsCollapsible: options.attributionsCollapsible,\n      cacheSize: options.cacheSize,\n      format: options.format,\n      overlaps: options.overlaps,\n      projection: options.projection,\n      tileClass: options.tileClass,\n      transition: options.transition,\n      wrapX: options.wrapX,\n      zDirection: options.zDirection,\n      state: 'loading'\n    });\n    const sourceInfo = {\n      url: options.url,\n      projection: this.getProjection(),\n      mediaType: options.mediaType,\n      supportedMediaTypes: options.format.supportedMediaTypes,\n      context: options.context || null,\n      collections: options.collections\n    };\n    getTileSetInfo(sourceInfo).then(this.handleTileSetInfo_.bind(this)).catch(this.handleError_.bind(this));\n  }\n\n  /**\n   * @param {import(\"./ogcTileUtil.js\").TileSetInfo} tileSetInfo Tile set info.\n   * @private\n   */\n  handleTileSetInfo_(tileSetInfo) {\n    this.tileGrid = tileSetInfo.grid;\n    this.projection = tileSetInfo.projection;\n    this.setTileUrlFunction(tileSetInfo.urlFunction, tileSetInfo.urlTemplate);\n    this.setState('ready');\n  }\n\n  /**\n   * @private\n   * @param {Error} error The error.\n   */\n  handleError_(error) {\n    logError(error);\n    this.setState('error');\n  }\n}\nexport default OGCVectorTile;", "/**\n * @module ol/source/OSM\n */\n\nimport XYZ from './XYZ.js';\n\n/**\n * The attribution containing a link to the OpenStreetMap Copyright and License\n * page.\n * @const\n * @type {string}\n * @api\n */\nexport const ATTRIBUTION = '&#169; ' + '<a href=\"https://www.openstreetmap.org/copyright\" target=\"_blank\">OpenStreetMap</a> ' + 'contributors.';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.\n * @property {null|string} [crossOrigin='anonymous'] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {number} [maxZoom=19] Max zoom.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {number} [transition=250] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {string} [url='https://tile.openstreetmap.org/{z}/{x}/{y}.png'] URL template.\n * Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Layer source for the OpenStreetMap tile server.\n * @api\n */\nclass OSM extends XYZ {\n  /**\n   * @param {Options} [options] Open Street Map options.\n   */\n  constructor(options) {\n    options = options || {};\n    let attributions;\n    if (options.attributions !== undefined) {\n      attributions = options.attributions;\n    } else {\n      attributions = [ATTRIBUTION];\n    }\n    const crossOrigin = options.crossOrigin !== undefined ? options.crossOrigin : 'anonymous';\n    const url = options.url !== undefined ? options.url : 'https://tile.openstreetmap.org/{z}/{x}/{y}.png';\n    super({\n      attributions: attributions,\n      attributionsCollapsible: false,\n      cacheSize: options.cacheSize,\n      crossOrigin: crossOrigin,\n      interpolate: options.interpolate,\n      maxZoom: options.maxZoom !== undefined ? options.maxZoom : 19,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      tileLoadFunction: options.tileLoadFunction,\n      transition: options.transition,\n      url: url,\n      wrapX: options.wrapX,\n      zDirection: options.zDirection\n    });\n  }\n}\nexport default OSM;", "/**\n * @module ol/source/StadiaMaps\n */\n\nimport XYZ from './XYZ.js';\nimport { ATTRIBUTION as OSM_ATTRIBUTION } from './OSM.js';\n\n/**\n * @const\n * @type string\n */\nconst STADIA_ATTRIBUTION = '&copy; <a href=\"https://www.stadiamaps.com/\" target=\"_blank\">Stadia Maps</a>';\n\n/**\n * @const\n * @type string\n */\nconst OMT_ATTRIBUTION = '&copy; <a href=\"https://openmaptiles.org/\" target=\"_blank\">OpenMapTiles</a>';\n\n/**\n * @const\n * @type string\n */\nconst STAMEN_ATTRIBUTION = '&copy; <a href=\"https://stamen.com/\" target=\"_blank\">Stamen Design</a>';\n\n/**\n * @type {Object<string, {extension: string}>}\n */\nconst LayerConfig = {\n  'stamen_terrain': {\n    extension: 'png'\n  },\n  'stamen_terrain_background': {\n    extension: 'png'\n  },\n  'stamen_terrain_labels': {\n    extension: 'png'\n  },\n  'stamen_terrain_lines': {\n    extension: 'png'\n  },\n  'stamen_toner_background': {\n    extension: 'png'\n  },\n  'stamen_toner': {\n    extension: 'png'\n  },\n  'stamen_toner_labels': {\n    extension: 'png'\n  },\n  'stamen_toner_lines': {\n    extension: 'png'\n  },\n  'stamen_toner_lite': {\n    extension: 'png'\n  },\n  'stamen_watercolor': {\n    extension: 'jpg'\n  },\n  'alidade_smooth': {\n    extension: 'png'\n  },\n  'alidade_smooth_dark': {\n    extension: 'png'\n  },\n  'alidade_satellite': {\n    extension: 'png'\n  },\n  'outdoors': {\n    extension: 'png'\n  },\n  'osm_bright': {\n    extension: 'png'\n  }\n};\n\n/**\n * @type {Object<string, {minZoom: number, maxZoom: number, retina: boolean}>}\n */\nconst ProviderConfig = {\n  'stamen_terrain': {\n    minZoom: 0,\n    maxZoom: 18,\n    retina: true\n  },\n  'stamen_toner': {\n    minZoom: 0,\n    maxZoom: 20,\n    retina: true\n  },\n  'stamen_watercolor': {\n    minZoom: 1,\n    maxZoom: 18,\n    retina: false\n  }\n};\n\n/**\n * @typedef {Object} Options\n * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {string} layer Layer name. Valid values: `alidade_smooth`, `alidade_smooth_dark`, `outdoors`, `stamen_terrain`, `stamen_terrain_background`, `stamen_terrain_labels`, `stamen_terrain_lines`, `stamen_toner_background`, `stamen_toner`, `stamen_toner_labels`, `stamen_toner_lines`, `stamen_toner_lite`, `stamen_watercolor`, and `osm_bright`.\n * @property {number} [minZoom] Minimum zoom.\n * @property {number} [maxZoom] Maximum zoom.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction]\n * Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {number} [transition=250] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n * @property {string} [apiKey] Stadia Maps API key. Not required for localhost or most public web deployments. See https://docs.stadiamaps.com/authentication/ for details.\n * @property {boolean} [retina] Use retina tiles (if available; not available for Stamen Watercolor).\n */\n\n/**\n * @classdesc\n * Layer source for the Stadia Maps tile server.\n * @api\n */\nclass StadiaMaps extends XYZ {\n  /**\n   * @param {Options} options StadiaMaps options.\n   */\n  constructor(options) {\n    const i = options.layer.indexOf('-');\n    const provider = i == -1 ? options.layer : options.layer.slice(0, i);\n    const providerConfig = ProviderConfig[provider] || {\n      'minZoom': 0,\n      'maxZoom': 20,\n      'retina': true\n    };\n    const layerConfig = LayerConfig[options.layer];\n    const query = options.apiKey ? '?api_key=' + options.apiKey : '';\n    const retina = providerConfig.retina && options.retina ? '@2x' : '';\n    const url = options.url !== undefined ? options.url : 'https://tiles.stadiamaps.com/tiles/' + options.layer + '/{z}/{x}/{y}' + retina + '.' + layerConfig.extension + query;\n    const attributions = [STADIA_ATTRIBUTION, OMT_ATTRIBUTION, OSM_ATTRIBUTION];\n    if (options.layer.startsWith('stamen_')) {\n      attributions.splice(1, 0, STAMEN_ATTRIBUTION);\n    }\n    super({\n      attributions: attributions,\n      cacheSize: options.cacheSize,\n      crossOrigin: 'anonymous',\n      interpolate: options.interpolate,\n      maxZoom: options.maxZoom !== undefined ? options.maxZoom : providerConfig.maxZoom,\n      minZoom: options.minZoom !== undefined ? options.minZoom : providerConfig.minZoom,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      tileLoadFunction: options.tileLoadFunction,\n      transition: options.transition,\n      url: url,\n      tilePixelRatio: retina ? 2 : 1,\n      wrapX: options.wrapX,\n      zDirection: options.zDirection\n    });\n  }\n}\nexport default StadiaMaps;", "/**\n * @module ol/source/TileArcGISRest\n */\n\nimport TileImage from './TileImage.js';\nimport { createEmpty } from '../extent.js';\nimport { getRequestUrl } from './arcgisRest.js';\nimport { modulo } from '../math.js';\nimport { scale as scaleSize, toSize } from '../size.js';\nimport { hash as tileCoordHash } from '../tilecoord.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {Object<string,*>} [params] ArcGIS Rest parameters. This field is optional. Service defaults will be\n * used for any fields not specified. `FORMAT` is `PNG32` by default. `F` is `IMAGE` by\n * default. `TRANSPARENT` is `true` by default.  `BBOX`, `SIZE`, `BBOXSR`,\n * and `IMAGESR` will be set dynamically. Set `LAYERS` to\n * override the default service layer visibility. See\n * https://developers.arcgis.com/rest/services-reference/export-map.htm\n * for further reference.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\n * the image from the remote server.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid. Base this on the resolutions,\n * tilesize and extent supported by the server.\n * If this is not defined, a default grid will be used: if there is a projection\n * extent, the grid will be based on that; if not, a grid based on a global\n * extent with origin at 0,0 will be used.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * The projection code must contain a numeric end portion separated by :\n * or the entire code must form a valid ArcGIS SpatialReference definition.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL.\n * The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {string} [url] ArcGIS Rest service URL for a Map Service or Image Service. The\n * url should include /MapServer or /ImageServer.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {number} [transition] Duration of the opacity transition for rendering.  To disable the opacity\n * transition, pass `transition: 0`.\n * @property {Array<string>} [urls] ArcGIS Rest service urls. Use this instead of `url` when the ArcGIS\n * Service supports multiple urls for export requests.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Layer source for tile data from ArcGIS Rest services. Map and Image\n * Services are supported.\n *\n * For cached ArcGIS services, better performance is available using the\n * {@link module:ol/source/XYZ~XYZ} data source.\n * @api\n */\nclass TileArcGISRest extends TileImage {\n  /**\n   * @param {Options} [options] Tile ArcGIS Rest options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n    super({\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      interpolate: options.interpolate,\n      projection: options.projection,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      tileGrid: options.tileGrid,\n      tileLoadFunction: options.tileLoadFunction,\n      url: options.url,\n      urls: options.urls,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n      transition: options.transition,\n      zDirection: options.zDirection\n    });\n\n    /**\n     * @private\n     * @type {!Object}\n     */\n    this.params_ = Object.assign({}, options.params);\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.tmpExtent_ = createEmpty();\n    this.setKey(this.getKeyForParams_());\n  }\n\n  /**\n   * @private\n   * @return {string} The key for the current params.\n   */\n  getKeyForParams_() {\n    let i = 0;\n    const res = [];\n    for (const key in this.params_) {\n      res[i++] = key + '-' + this.params_[key];\n    }\n    return res.join('/');\n  }\n\n  /**\n   * Get the user-provided params, i.e. those passed to the constructor through\n   * the \"params\" option, and possibly updated using the updateParams method.\n   * @return {Object} Params.\n   * @api\n   */\n  getParams() {\n    return this.params_;\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../size.js\").Size} tileSize Tile size.\n   * @param {import(\"../extent.js\").Extent} tileExtent Tile extent.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {Object} params Params.\n   * @return {string|undefined} Request URL.\n   * @private\n   */\n  getRequestUrl_(tileCoord, tileSize, tileExtent, pixelRatio, projection, params) {\n    const urls = this.urls;\n    if (!urls) {\n      return undefined;\n    }\n    let url;\n    if (urls.length == 1) {\n      url = urls[0];\n    } else {\n      const index = modulo(tileCoordHash(tileCoord), urls.length);\n      url = urls[index];\n    }\n    return getRequestUrl(url, tileExtent, (this.tileGrid || this.getTileGridForProjection(projection)).getResolution(tileCoord[0]), pixelRatio, projection, params);\n  }\n\n  /**\n   * Get the tile pixel ratio for this source.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} Tile pixel ratio.\n   * @override\n   */\n  getTilePixelRatio(pixelRatio) {\n    return this.hidpi_ ? pixelRatio : 1;\n  }\n\n  /**\n   * Update the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n  updateParams(params) {\n    Object.assign(this.params_, params);\n    this.setKey(this.getKeyForParams_());\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord The tile coordinate\n   * @param {number} pixelRatio The pixel ratio\n   * @param {import(\"../proj/Projection.js\").default} projection The projection\n   * @return {string|undefined} The tile URL\n   * @override\n   */\n  tileUrlFunction(tileCoord, pixelRatio, projection) {\n    let tileGrid = this.getTileGrid();\n    if (!tileGrid) {\n      tileGrid = this.getTileGridForProjection(projection);\n    }\n    if (tileGrid.getResolutions().length <= tileCoord[0]) {\n      return undefined;\n    }\n    if (pixelRatio != 1 && !this.hidpi_) {\n      pixelRatio = 1;\n    }\n    const tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent_);\n    let tileSize = toSize(tileGrid.getTileSize(tileCoord[0]), this.tmpSize);\n    if (pixelRatio != 1) {\n      tileSize = scaleSize(tileSize, pixelRatio, this.tmpSize);\n    }\n\n    // Apply default params and override with user specified values.\n    const baseParams = {\n      'F': 'image',\n      'FORMAT': 'PNG32',\n      'TRANSPARENT': true\n    };\n    Object.assign(baseParams, this.params_);\n    return this.getRequestUrl_(tileCoord, tileSize, tileExtent, pixelRatio, projection, baseParams);\n  }\n}\nexport default TileArcGISRest;", "/**\n * @module ol/source/TileDebug\n */\n\nimport DataTile from './DataTile.js';\nimport EventType from '../events/EventType.js';\nimport ImageTile from './ImageTile.js';\nimport { createCanvasContext2D } from '../dom.js';\nimport { get as getProjection } from '../proj.js';\nimport { renderXYZTemplate } from '../uri.js';\nimport { toSize } from '../size.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../proj.js\").ProjectionLike} [projection='EPSG:3857'] Optional projection.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Set to `1` when debugging `VectorTile` sources with a default configuration.\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n * @property {import(\"./Tile.js\").default} [source] Tile source.\n * This allows `projection`, `tileGrid`, `wrapX` and `zDirection` to be copied from another source.\n * If both `source` and individual options are specified the individual options will have precedence.\n * @property {string} [template='z:{z} x:{x} y:{y}'] Template for labeling the tiles.\n * Should include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.\n */\n\n/**\n * @classdesc\n * A pseudo tile source, which does not fetch tiles from a server, but renders\n * a grid outline for the tile grid/projection along with the coordinates for\n * each tile. See examples/canvas-tiles for an example.\n * @api\n */\nclass TileDebug extends ImageTile {\n  /**\n   * @param {Options} [options] Debug tile options.\n   */\n  constructor(options) {\n    /**\n     * @type {Options}\n     */\n    options = options || {};\n    const template = options.template || 'z:{z} x:{x} y:{y}';\n    const source = options.source;\n    super({\n      transition: 0,\n      wrapX: options.wrapX !== undefined ? options.wrapX : source !== undefined ? source.getWrapX() : undefined\n    });\n    const setReady = () => {\n      this.projection = options.projection !== undefined ? getProjection(options.projection) : source !== undefined ? source.getProjection() : this.projection;\n      this.tileGrid = options.tileGrid !== undefined ? options.tileGrid : source !== undefined ? source.getTileGrid() : this.tileGrid;\n      this.zDirection = options.zDirection !== undefined ? options.zDirection : source !== undefined ? source.zDirection : this.zDirection;\n      if (source instanceof DataTile) {\n        this.transformMatrix = source.transformMatrix?.slice() || null;\n      }\n      const tileGrid = this.tileGrid;\n      if (tileGrid) {\n        this.setTileSizes(tileGrid.getResolutions().map((r, i) => toSize(tileGrid.getTileSize(i)).map(s => Math.max(Math.floor(s), 1))));\n      }\n      this.setLoader((z, x, y, loaderOptions) => {\n        const text = renderXYZTemplate(template, z, x, y, loaderOptions.maxY);\n        const [width, height] = this.getTileSize(z);\n        const context = createCanvasContext2D(width, height);\n        context.strokeStyle = 'grey';\n        context.strokeRect(0.5, 0.5, width + 0.5, height + 0.5);\n        context.fillStyle = 'grey';\n        context.strokeStyle = 'white';\n        context.textAlign = 'center';\n        context.textBaseline = 'middle';\n        context.font = '24px sans-serif';\n        context.lineWidth = 4;\n        context.strokeText(text, width / 2, height / 2, width);\n        context.fillText(text, width / 2, height / 2, width);\n        return context.canvas;\n      });\n      this.setState('ready');\n    };\n    if (source === undefined || source.getState() === 'ready') {\n      setReady();\n    } else {\n      const handler = () => {\n        if (source.getState() === 'ready') {\n          source.removeEventListener(EventType.CHANGE, handler);\n          setReady();\n        }\n      };\n      source.addEventListener(EventType.CHANGE, handler);\n    }\n  }\n}\nexport default TileDebug;", "/**\n * @module ol/source/UTFGrid\n */\n\nimport EventType from '../events/EventType.js';\nimport Tile from '../Tile.js';\nimport TileSource from './Tile.js';\nimport TileState from '../TileState.js';\nimport { applyTransform, intersects } from '../extent.js';\nimport { createFromTemplates, nullTileUrlFunction } from '../tileurlfunction.js';\nimport { createXYZ, extentFromProjection } from '../tilegrid.js';\nimport { get as getProjection, getTransformFromProjections } from '../proj.js';\nimport { listenOnce } from '../events.js';\nimport { jsonp as requestJSONP } from '../net.js';\n\n/**\n * @typedef {Object} UTFGridJSON\n * @property {Array<string>} grid The grid.\n * @property {Array<string>} keys The keys.\n * @property {Object<string, Object>} [data] Optional data.\n */\n\nexport class CustomTile extends Tile {\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../TileState.js\").default} state State.\n   * @param {string} src Image source URI.\n   * @param {import(\"../extent.js\").Extent} extent Extent of the tile.\n   * @param {boolean} preemptive Load the tile when visible (before it's needed).\n   * @param {boolean} jsonp Load the tile as a script.\n   */\n  constructor(tileCoord, state, src, extent, preemptive, jsonp) {\n    super(tileCoord, state);\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.src_ = src;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.extent_ = extent;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.preemptive_ = preemptive;\n\n    /**\n     * @private\n     * @type {Array<string>}\n     */\n    this.grid_ = null;\n\n    /**\n     * @private\n     * @type {Array<string>}\n     */\n    this.keys_ = null;\n\n    /**\n     * @private\n     * @type {Object<string, Object>|undefined}\n     */\n    this.data_ = null;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.jsonp_ = jsonp;\n  }\n\n  /**\n   * Get the image element for this tile.\n   * @return {HTMLImageElement} Image.\n   */\n  getImage() {\n    return null;\n  }\n\n  /**\n   * Synchronously returns data at given coordinate (if available).\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @return {*} The data.\n   */\n  getData(coordinate) {\n    if (!this.grid_ || !this.keys_) {\n      return null;\n    }\n    const xRelative = (coordinate[0] - this.extent_[0]) / (this.extent_[2] - this.extent_[0]);\n    const yRelative = (coordinate[1] - this.extent_[1]) / (this.extent_[3] - this.extent_[1]);\n    const row = this.grid_[Math.floor((1 - yRelative) * this.grid_.length)];\n    if (typeof row !== 'string') {\n      return null;\n    }\n    let code = row.charCodeAt(Math.floor(xRelative * row.length));\n    if (code >= 93) {\n      code--;\n    }\n    if (code >= 35) {\n      code--;\n    }\n    code -= 32;\n    let data = null;\n    if (code in this.keys_) {\n      const id = this.keys_[code];\n      if (this.data_ && id in this.data_) {\n        data = this.data_[id];\n      } else {\n        data = id;\n      }\n    }\n    return data;\n  }\n\n  /**\n   * Calls the callback (synchronously by default) with the available data\n   * for given coordinate (or `null` if not yet loaded).\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {function(*): void} callback Callback.\n   * @param {boolean} [request] If `true` the callback is always async.\n   *                               The tile data is requested if not yet loaded.\n   */\n  forDataAtCoordinate(coordinate, callback, request) {\n    if (this.state == TileState.EMPTY && request === true) {\n      this.state = TileState.IDLE;\n      listenOnce(this, EventType.CHANGE, e => {\n        callback(this.getData(coordinate));\n      });\n      this.loadInternal_();\n    } else {\n      if (request === true) {\n        setTimeout(() => {\n          callback(this.getData(coordinate));\n        }, 0);\n      } else {\n        callback(this.getData(coordinate));\n      }\n    }\n  }\n\n  /**\n   * Return the key to be used for all tiles in the source.\n   * @return {string} The key for all tiles.\n   * @override\n   */\n  getKey() {\n    return this.src_;\n  }\n\n  /**\n   * @private\n   */\n  handleError_() {\n    this.state = TileState.ERROR;\n    this.changed();\n  }\n\n  /**\n   * @param {!UTFGridJSON} json UTFGrid data.\n   * @private\n   */\n  handleLoad_(json) {\n    this.grid_ = json['grid'];\n    this.keys_ = json['keys'];\n    this.data_ = json['data'];\n    this.state = TileState.LOADED;\n    this.changed();\n  }\n\n  /**\n   * @private\n   */\n  loadInternal_() {\n    if (this.state == TileState.IDLE) {\n      this.state = TileState.LOADING;\n      if (this.jsonp_) {\n        requestJSONP(this.src_, this.handleLoad_.bind(this), this.handleError_.bind(this));\n      } else {\n        const client = new XMLHttpRequest();\n        client.addEventListener('load', this.onXHRLoad_.bind(this));\n        client.addEventListener('error', this.onXHRError_.bind(this));\n        client.open('GET', this.src_);\n        client.send();\n      }\n    }\n  }\n\n  /**\n   * @private\n   * @param {Event} event The load event.\n   */\n  onXHRLoad_(event) {\n    const client = /** @type {XMLHttpRequest} */event.target;\n    // status will be 0 for file:// urls\n    if (!client.status || client.status >= 200 && client.status < 300) {\n      let response;\n      try {\n        response = /** @type {!UTFGridJSON} */\n        JSON.parse(client.responseText);\n      } catch (err) {\n        this.handleError_();\n        return;\n      }\n      this.handleLoad_(response);\n    } else {\n      this.handleError_();\n    }\n  }\n\n  /**\n   * @private\n   * @param {Event} event The error event.\n   */\n  onXHRError_(event) {\n    this.handleError_();\n  }\n\n  /**\n   * @override\n   */\n  load() {\n    if (this.preemptive_) {\n      this.loadInternal_();\n    } else {\n      this.setState(TileState.EMPTY);\n    }\n  }\n}\n\n/**\n * @typedef {Object} Options\n * @property {boolean} [preemptive=true]\n * If `true` the UTFGrid source loads the tiles based on their \"visibility\".\n * This improves the speed of response, but increases traffic.\n * Note that if set to `false` (lazy loading), you need to pass `true` as\n * `request` to the `forDataAtCoordinateAndResolution` method otherwise no\n * data will ever be loaded.\n * @property {boolean} [jsonp=false] Use JSONP with callback to load the TileJSON.\n * Useful when the server does not support CORS..\n * @property {import(\"./TileJSON.js\").Config} [tileJSON] TileJSON configuration for this source.\n * If not provided, `url` must be configured.\n * @property {string} [url] TileJSON endpoint that provides the configuration for this source.\n * Request will be made through JSONP. If not provided, `tileJSON` must be configured.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Layer source for UTFGrid interaction data loaded from TileJSON format.\n * @api\n */\nclass UTFGrid extends TileSource {\n  /**\n   * @param {Options} options Source options.\n   */\n  constructor(options) {\n    super({\n      projection: getProjection('EPSG:3857'),\n      state: 'loading',\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n      zDirection: options.zDirection\n    });\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.preemptive_ = options.preemptive !== undefined ? options.preemptive : true;\n\n    /**\n     * @private\n     * @type {!import(\"../Tile.js\").UrlFunction}\n     */\n    this.tileUrlFunction_ = nullTileUrlFunction;\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.template_ = undefined;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.jsonp_ = options.jsonp || false;\n    if (options.url) {\n      if (this.jsonp_) {\n        requestJSONP(options.url, this.handleTileJSONResponse.bind(this), this.handleTileJSONError.bind(this));\n      } else {\n        const client = new XMLHttpRequest();\n        client.addEventListener('load', this.onXHRLoad_.bind(this));\n        client.addEventListener('error', this.onXHRError_.bind(this));\n        client.open('GET', options.url);\n        client.send();\n      }\n    } else if (options.tileJSON) {\n      this.handleTileJSONResponse(options.tileJSON);\n    } else {\n      throw new Error('Either `url` or `tileJSON` options must be provided');\n    }\n  }\n\n  /**\n   * @private\n   * @param {Event} event The load event.\n   */\n  onXHRLoad_(event) {\n    const client = /** @type {XMLHttpRequest} */event.target;\n    // status will be 0 for file:// urls\n    if (!client.status || client.status >= 200 && client.status < 300) {\n      let response;\n      try {\n        response = /** @type {import(\"./TileJSON.js\").Config} */\n        JSON.parse(client.responseText);\n      } catch (err) {\n        this.handleTileJSONError();\n        return;\n      }\n      this.handleTileJSONResponse(response);\n    } else {\n      this.handleTileJSONError();\n    }\n  }\n\n  /**\n   * @private\n   * @param {Event} event The error event.\n   */\n  onXHRError_(event) {\n    this.handleTileJSONError();\n  }\n\n  /**\n   * Return the template from TileJSON.\n   * @return {string|undefined} The template from TileJSON.\n   * @api\n   */\n  getTemplate() {\n    return this.template_;\n  }\n\n  /**\n   * Calls the callback (synchronously by default) with the available data\n   * for given coordinate and resolution (or `null` if not yet loaded or\n   * in case of an error).\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {function(*): void} callback Callback.\n   * @param {boolean} [request] If `true` the callback is always async.\n   *                               The tile data is requested if not yet loaded.\n   * @api\n   */\n  forDataAtCoordinateAndResolution(coordinate, resolution, callback, request) {\n    if (this.tileGrid) {\n      const z = this.tileGrid.getZForResolution(resolution, this.zDirection);\n      const tileCoord = this.tileGrid.getTileCoordForCoordAndZ(coordinate, z);\n      const tile = /** @type {!CustomTile} */\n      this.getTile(tileCoord[0], tileCoord[1], tileCoord[2], 1, this.getProjection());\n      tile.forDataAtCoordinate(coordinate, callback, request);\n    } else {\n      if (request === true) {\n        setTimeout(function () {\n          callback(null);\n        }, 0);\n      } else {\n        callback(null);\n      }\n    }\n  }\n\n  /**\n   * @protected\n   */\n  handleTileJSONError() {\n    this.setState('error');\n  }\n\n  /**\n   * TODO: very similar to ol/source/TileJSON#handleTileJSONResponse\n   * @protected\n   * @param {import(\"./TileJSON.js\").Config} tileJSON Tile JSON.\n   */\n  handleTileJSONResponse(tileJSON) {\n    const epsg4326Projection = getProjection('EPSG:4326');\n    const sourceProjection = this.getProjection();\n    let extent;\n    if (tileJSON['bounds'] !== undefined) {\n      const transform = getTransformFromProjections(epsg4326Projection, sourceProjection);\n      extent = applyTransform(tileJSON['bounds'], transform);\n    }\n    const gridExtent = extentFromProjection(sourceProjection);\n    const minZoom = tileJSON['minzoom'] || 0;\n    const maxZoom = tileJSON['maxzoom'] || 22;\n    const tileGrid = createXYZ({\n      extent: gridExtent,\n      maxZoom: maxZoom,\n      minZoom: minZoom\n    });\n    this.tileGrid = tileGrid;\n    this.template_ = tileJSON['template'];\n    const grids = tileJSON['grids'];\n    if (!grids) {\n      this.setState('error');\n      return;\n    }\n    this.tileUrlFunction_ = createFromTemplates(grids, tileGrid);\n    if (tileJSON['attribution']) {\n      const attributionExtent = extent !== undefined ? extent : gridExtent;\n      this.setAttributions(function (frameState) {\n        if (intersects(attributionExtent, frameState.extent)) {\n          return [tileJSON['attribution']];\n        }\n        return null;\n      });\n    }\n    this.setState('ready');\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!CustomTile} Tile.\n   * @override\n   */\n  getTile(z, x, y, pixelRatio, projection) {\n    const tileCoord = [z, x, y];\n    const urlTileCoord = this.getTileCoordForTileUrlFunction(tileCoord, projection);\n    const tileUrl = this.tileUrlFunction_(urlTileCoord, pixelRatio, projection);\n    const tile = new CustomTile(tileCoord, tileUrl !== undefined ? TileState.IDLE : TileState.EMPTY, tileUrl !== undefined ? tileUrl : '', this.tileGrid.getTileCoordExtent(tileCoord), this.preemptive_, this.jsonp_);\n    return tile;\n  }\n}\nexport default UTFGrid;", "/**\n * @module ol/source\n */\n\nimport LRUCache from './structs/LRUCache.js';\nimport { getIntersection } from './extent.js';\nexport { default as BingMaps } from './source/BingMaps.js';\nexport { default as CartoDB } from './source/CartoDB.js';\nexport { default as Cluster } from './source/Cluster.js';\nexport { default as DataTile } from './source/DataTile.js';\nexport { default as GeoTIFF } from './source/GeoTIFF.js';\nexport { default as Google } from './source/Google.js';\nexport { default as IIIF } from './source/IIIF.js';\nexport { default as Image } from './source/Image.js';\nexport { default as ImageArcGISRest } from './source/ImageArcGISRest.js';\nexport { default as ImageCanvas } from './source/ImageCanvas.js';\nexport { default as ImageMapGuide } from './source/ImageMapGuide.js';\nexport { default as ImageStatic } from './source/ImageStatic.js';\nexport { default as ImageTile } from './source/ImageTile.js';\nexport { default as ImageWMS } from './source/ImageWMS.js';\nexport { default as OGCMapTile } from './source/OGCMapTile.js';\nexport { default as OGCVectorTile } from './source/OGCVectorTile.js';\nexport { default as OSM } from './source/OSM.js';\nexport { default as Raster } from './source/Raster.js';\nexport { default as Source } from './source/Source.js';\nexport { default as StadiaMaps } from './source/StadiaMaps.js';\nexport { default as Tile } from './source/Tile.js';\nexport { default as TileArcGISRest } from './source/TileArcGISRest.js';\nexport { default as TileDebug } from './source/TileDebug.js';\nexport { default as TileImage } from './source/TileImage.js';\nexport { default as TileJSON } from './source/TileJSON.js';\nexport { default as TileWMS } from './source/TileWMS.js';\nexport { default as UrlTile } from './source/UrlTile.js';\nexport { default as UTFGrid } from './source/UTFGrid.js';\nexport { default as Vector } from './source/Vector.js';\nexport { default as VectorTile } from './source/VectorTile.js';\nexport { default as WMTS } from './source/WMTS.js';\nexport { default as XYZ } from './source/XYZ.js';\nexport { default as Zoomify } from './source/Zoomify.js';\nexport { createLoader as createWMSLoader } from './source/wms.js';\nexport { createLoader as createArcGISRestLoader } from './source/arcgisRest.js';\nexport { createLoader as createStaticLoader } from './source/static.js';\nexport { createLoader as createMapGuideLoader } from './source/mapguide.js';\n\n/**\n * Creates a sources function from a tile grid. This function can be used as value for the\n * `sources` property of the {@link module:ol/layer/Layer~Layer} subclasses that support it.\n * @param {import(\"./tilegrid/TileGrid.js\").default} tileGrid Tile grid.\n * @param {function(import(\"./tilecoord.js\").TileCoord): import(\"./source/Source.js\").default} factory Source factory.\n * This function takes a {@link module:ol/tilecoord~TileCoord} as argument and is expected to return a\n * {@link module:ol/source/Source~Source}. **Note**: The returned sources should have a tile grid with\n * a limited set of resolutions, matching the resolution range of a single zoom level of the pyramid\n * `tileGrid` that `sourcesFromTileGrid` was called with.\n * @return {function(import(\"./extent.js\").Extent, number): Array<import(\"./source/Source.js\").default>} Sources function.\n * @api\n */\nexport function sourcesFromTileGrid(tileGrid, factory) {\n  const sourceCache = new LRUCache(32);\n  const tileGridExtent = tileGrid.getExtent();\n  return function (extent, resolution) {\n    sourceCache.expireCache();\n    if (tileGridExtent) {\n      extent = getIntersection(tileGridExtent, extent);\n    }\n    const z = tileGrid.getZForResolution(resolution);\n    const wantedSources = [];\n    tileGrid.forEachTileCoord(extent, z, tileCoord => {\n      const key = tileCoord.toString();\n      if (!sourceCache.containsKey(key)) {\n        const source = factory(tileCoord);\n        sourceCache.set(key, source);\n      }\n      wantedSources.push(sourceCache.get(key));\n    });\n    return wantedSources;\n  };\n}"],
  "mappings": "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",
  "names": ["getAttribute", "startIndex", "findTagsByName", "maxZoom", "scale", "tileGrid", "extent", "geometry", "next", "buffer", "buffer", "buffer", "array", "isNaN", "buffer", "findTagsByName", "getAttribute", "create", "buffer", "urlMod", "http", "https", "values", "error", "values", "url", "tileUrl", "maxZoom", "scale", "size", "createLoader", "image", "resolution", "Image_default", "createLoader", "Image_default", "ImageCanvas_default", "scale", "createLoader", "image", "Image_default", "createLoader", "createLoader", "image", "Image_default", "createLoader", "ImageTile_default", "projection", "error", "error", "scale", "ImageTile_default", "handler", "CustomTile", "jsonp", "Tile_default", "maxZoom", "tileUrl"]
}
