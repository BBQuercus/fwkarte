{
  "version": 3,
  "sources": ["../../../../../../../../node_modules/ol/format/XMLFeature.js", "../../../../../../../../node_modules/ol/format/GMLBase.js", "../../../../../../../../node_modules/ol/format/GML2.js", "../../../../../../../../node_modules/ol/format/GML3.js", "../../../../../../../../node_modules/ol/format/GML.js", "../../../../../../../../node_modules/ol/format/GPX.js", "../../../../../../../../node_modules/ol/format/KML.js", "../../../../../../../../node_modules/ol/format/GML32.js", "../../../../../../../../node_modules/ol/format/WFS.js", "../../../../../../node_modules/pmtiles/dist/esm/index.js", "../../../../../../node_modules/ol-pmtiles/dist/esm/index.js"],
  "sourcesContent": ["/**\n * @module ol/format/XMLFeature\n */\nimport FeatureFormat from '../format/Feature.js';\nimport { abstract } from '../util.js';\nimport { extend } from '../array.js';\nimport { getXMLSerializer, isDocument, parse } from '../xml.js';\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for XML feature formats.\n *\n * @abstract\n */\nclass XMLFeature extends FeatureFormat {\n  constructor() {\n    super();\n\n    /**\n     * @type {XMLSerializer}\n     * @private\n     */\n    this.xmlSerializer_ = getXMLSerializer();\n  }\n\n  /**\n   * @return {import(\"./Feature.js\").Type} Format.\n   * @override\n   */\n  getType() {\n    return 'xml';\n  }\n\n  /**\n   * Read a single feature.\n   *\n   * @param {Document|Element|Object|string} source Source.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @return {import(\"../Feature.js\").default} Feature.\n   * @api\n   * @override\n   */\n  readFeature(source, options) {\n    if (!source) {\n      return null;\n    }\n    if (typeof source === 'string') {\n      const doc = parse(source);\n      return this.readFeatureFromDocument(doc, options);\n    }\n    if (isDocument(source)) {\n      return this.readFeatureFromDocument(/** @type {Document} */source, options);\n    }\n    return this.readFeatureFromNode(/** @type {Element} */source, options);\n  }\n\n  /**\n   * @param {Document} doc Document.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Options.\n   * @return {import(\"../Feature.js\").default} Feature.\n   */\n  readFeatureFromDocument(doc, options) {\n    const features = this.readFeaturesFromDocument(doc, options);\n    if (features.length > 0) {\n      return features[0];\n    }\n    return null;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Options.\n   * @return {import(\"../Feature.js\").default} Feature.\n   */\n  readFeatureFromNode(node, options) {\n    return null; // not implemented\n  }\n\n  /**\n   * Read all features from a feature collection.\n   *\n   * @param {Document|Element|Object|string} source Source.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Options.\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   * @api\n   * @override\n   */\n  readFeatures(source, options) {\n    if (!source) {\n      return [];\n    }\n    if (typeof source === 'string') {\n      const doc = parse(source);\n      return this.readFeaturesFromDocument(doc, options);\n    }\n    if (isDocument(source)) {\n      return this.readFeaturesFromDocument(/** @type {Document} */source, options);\n    }\n    return this.readFeaturesFromNode(/** @type {Element} */source, options);\n  }\n\n  /**\n   * @param {Document} doc Document.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Options.\n   * @protected\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   */\n  readFeaturesFromDocument(doc, options) {\n    /** @type {Array<import(\"../Feature.js\").default>} */\n    const features = [];\n    for (let n = doc.firstChild; n; n = n.nextSibling) {\n      if (n.nodeType == Node.ELEMENT_NODE) {\n        extend(features, this.readFeaturesFromNode(/** @type {Element} */n, options));\n      }\n    }\n    return features;\n  }\n\n  /**\n   * @abstract\n   * @param {Element} node Node.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Options.\n   * @protected\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   */\n  readFeaturesFromNode(node, options) {\n    return abstract();\n  }\n\n  /**\n   * Read a single geometry from a source.\n   *\n   * @param {Document|Element|Object|string} source Source.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   * @override\n   */\n  readGeometry(source, options) {\n    if (!source) {\n      return null;\n    }\n    if (typeof source === 'string') {\n      const doc = parse(source);\n      return this.readGeometryFromDocument(doc, options);\n    }\n    if (isDocument(source)) {\n      return this.readGeometryFromDocument(/** @type {Document} */source, options);\n    }\n    return this.readGeometryFromNode(/** @type {Element} */source, options);\n  }\n\n  /**\n   * @param {Document} doc Document.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Options.\n   * @protected\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   */\n  readGeometryFromDocument(doc, options) {\n    return null; // not implemented\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Options.\n   * @protected\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   */\n  readGeometryFromNode(node, options) {\n    return null; // not implemented\n  }\n\n  /**\n   * Read the projection from the source.\n   *\n   * @param {Document|Element|Object|string} source Source.\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   * @api\n   * @override\n   */\n  readProjection(source) {\n    if (!source) {\n      return null;\n    }\n    if (typeof source === 'string') {\n      const doc = parse(source);\n      return this.readProjectionFromDocument(doc);\n    }\n    if (isDocument(source)) {\n      return this.readProjectionFromDocument(/** @type {Document} */source);\n    }\n    return this.readProjectionFromNode(/** @type {Element} */source);\n  }\n\n  /**\n   * @param {Document} doc Document.\n   * @protected\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n  readProjectionFromDocument(doc) {\n    return this.dataProjection;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @protected\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n  readProjectionFromNode(node) {\n    return this.dataProjection;\n  }\n\n  /**\n   * Encode a feature as string.\n   *\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {string} Encoded feature.\n   * @override\n   */\n  writeFeature(feature, options) {\n    const node = this.writeFeatureNode(feature, options);\n    return this.xmlSerializer_.serializeToString(node);\n  }\n\n  /**\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Options.\n   * @protected\n   * @return {Node} Node.\n   */\n  writeFeatureNode(feature, options) {\n    return null; // not implemented\n  }\n\n  /**\n   * Encode an array of features as string.\n   *\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {string} Result.\n   * @api\n   * @override\n   */\n  writeFeatures(features, options) {\n    const node = this.writeFeaturesNode(features, options);\n    return this.xmlSerializer_.serializeToString(node);\n  }\n\n  /**\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Options.\n   * @return {Node} Node.\n   */\n  writeFeaturesNode(features, options) {\n    return null; // not implemented\n  }\n\n  /**\n   * Encode a geometry as string.\n   *\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {string} Encoded geometry.\n   * @override\n   */\n  writeGeometry(geometry, options) {\n    const node = this.writeGeometryNode(geometry, options);\n    return this.xmlSerializer_.serializeToString(node);\n  }\n\n  /**\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Options.\n   * @return {Node} Node.\n   */\n  writeGeometryNode(geometry, options) {\n    return null; // not implemented\n  }\n}\nexport default XMLFeature;", "/**\n * @module ol/format/GMLBase\n */\n// FIXME Envelopes should not be treated as geometries! readEnvelope_ is part\n// of GEOMETRY_PARSERS_ and methods using GEOMETRY_PARSERS_ do not expect\n// envelopes/extents, only geometries!\nimport Feature from '../Feature.js';\nimport Geometry from '../geom/Geometry.js';\nimport LineString from '../geom/LineString.js';\nimport LinearRing from '../geom/LinearRing.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPoint from '../geom/MultiPoint.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Point from '../geom/Point.js';\nimport Polygon from '../geom/Polygon.js';\nimport XMLFeature from './XMLFeature.js';\nimport { extend } from '../array.js';\nimport { getAllTextContent, getAttributeNS, makeArrayPusher, makeReplacer, parseNode, pushParseAndPop } from '../xml.js';\nimport { get as getProjection } from '../proj.js';\nimport { transformExtentWithOptions, transformGeometryWithOptions } from './Feature.js';\n\n/**\n * @const\n * @type {string}\n */\nexport const GMLNS = 'http://www.opengis.net/gml';\n\n/**\n * A regular expression that matches if a string only contains whitespace\n * characters. It will e.g. match `''`, `' '`, `'\\n'` etc.\n *\n * @const\n * @type {RegExp}\n */\nconst ONLY_WHITESPACE_RE = /^\\s*$/;\n\n/**\n * @typedef {Object} Options\n * @property {Object<string, string>|string} [featureNS] Feature\n * namespace. If not defined will be derived from GML. If multiple\n * feature types have been configured which come from different feature\n * namespaces, this will be an object with the keys being the prefixes used\n * in the entries of featureType array. The values of the object will be the\n * feature namespaces themselves. So for instance there might be a featureType\n * item `topp:states` in the `featureType` array and then there will be a key\n * `topp` in the featureNS object with value `http://www.openplans.org/topp`.\n * @property {Array<string>|string} [featureType] Feature type(s) to parse.\n * If multiple feature types need to be configured\n * which come from different feature namespaces, `featureNS` will be an object\n * with the keys being the prefixes used in the entries of featureType array.\n * The values of the object will be the feature namespaces themselves.\n * So for instance there might be a featureType item `topp:states` and then\n * there will be a key named `topp` in the featureNS object with value\n * `http://www.openplans.org/topp`.\n * @property {string} [srsName] srsName to use when writing geometries.\n * @property {boolean} [surface=false] Write gml:Surface instead of gml:Polygon\n * elements. This also affects the elements in multi-part geometries.\n * @property {boolean} [curve=false] Write gml:Curve instead of gml:LineString\n * elements. This also affects the elements in multi-part geometries.\n * @property {boolean} [multiCurve=true] Write gml:MultiCurve instead of gml:MultiLineString.\n * Since the latter is deprecated in GML 3.\n * @property {boolean} [multiSurface=true] Write gml:multiSurface instead of\n * gml:MultiPolygon. Since the latter is deprecated in GML 3.\n * @property {string} [schemaLocation] Optional schemaLocation to use when\n * writing out the GML, this will override the default provided.\n * @property {boolean} [hasZ=false] If coordinates have a Z value.\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Feature base format for reading and writing data in the GML format.\n * This class cannot be instantiated, it contains only base content that\n * is shared with versioned format classes GML2 and GML3.\n *\n * @abstract\n * @api\n */\nclass GMLBase extends XMLFeature {\n  /**\n   * @param {Options} [options] Optional configuration object.\n   */\n  constructor(options) {\n    super();\n    options = options ? options : {};\n\n    /**\n     * @protected\n     * @type {Array<string>|string|undefined}\n     */\n    this.featureType = options.featureType;\n\n    /**\n     * @protected\n     * @type {Object<string, string>|string|undefined}\n     */\n    this.featureNS = options.featureNS;\n\n    /**\n     * @protected\n     * @type {string|undefined}\n     */\n    this.srsName = options.srsName;\n\n    /**\n     * @protected\n     * @type {string}\n     */\n    this.schemaLocation = '';\n\n    /**\n     * @type {Object<string, Object<string, Object>>}\n     */\n    this.FEATURE_COLLECTION_PARSERS = {};\n    this.FEATURE_COLLECTION_PARSERS[this.namespace] = {\n      'featureMember': makeArrayPusher(this.readFeaturesInternal),\n      'featureMembers': makeReplacer(this.readFeaturesInternal)\n    };\n    this.supportedMediaTypes = ['application/gml+xml'];\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<Feature> | undefined} Features.\n   */\n  readFeaturesInternal(node, objectStack) {\n    const localName = node.localName;\n    let features = null;\n    if (localName == 'FeatureCollection') {\n      features = pushParseAndPop([], this.FEATURE_COLLECTION_PARSERS, node, objectStack, this);\n    } else if (localName == 'featureMembers' || localName == 'featureMember' || localName == 'member') {\n      const context = objectStack[0];\n      let featureType = context['featureType'];\n      let featureNS = context['featureNS'];\n      const prefix = 'p';\n      const defaultPrefix = 'p0';\n      if (!featureType && node.childNodes) {\n        featureType = [], featureNS = {};\n        for (let i = 0, ii = node.childNodes.length; i < ii; ++i) {\n          const child = /** @type {Element} */node.childNodes[i];\n          if (child.nodeType === 1) {\n            const ft = child.nodeName.split(':').pop();\n            if (!featureType.includes(ft)) {\n              let key = '';\n              let count = 0;\n              const uri = child.namespaceURI;\n              for (const candidate in featureNS) {\n                if (featureNS[candidate] === uri) {\n                  key = candidate;\n                  break;\n                }\n                ++count;\n              }\n              if (!key) {\n                key = prefix + count;\n                featureNS[key] = uri;\n              }\n              featureType.push(key + ':' + ft);\n            }\n          }\n        }\n        if (localName != 'featureMember') {\n          // recheck featureType for each featureMember\n          context['featureType'] = featureType;\n          context['featureNS'] = featureNS;\n        }\n      }\n      if (typeof featureNS === 'string') {\n        const ns = featureNS;\n        featureNS = {};\n        featureNS[defaultPrefix] = ns;\n      }\n      /** @type {Object<string, Object<string, import(\"../xml.js\").Parser>>} */\n      const parsersNS = {};\n      const featureTypes = Array.isArray(featureType) ? featureType : [featureType];\n      for (const p in featureNS) {\n        /** @type {Object<string, import(\"../xml.js\").Parser>} */\n        const parsers = {};\n        for (let i = 0, ii = featureTypes.length; i < ii; ++i) {\n          const featurePrefix = featureTypes[i].includes(':') ? featureTypes[i].split(':')[0] : defaultPrefix;\n          if (featurePrefix === p) {\n            parsers[featureTypes[i].split(':').pop()] = localName == 'featureMembers' ? makeArrayPusher(this.readFeatureElement, this) : makeReplacer(this.readFeatureElement, this);\n          }\n        }\n        parsersNS[featureNS[p]] = parsers;\n      }\n      if (localName == 'featureMember' || localName == 'member') {\n        features = pushParseAndPop(undefined, parsersNS, node, objectStack);\n      } else {\n        features = pushParseAndPop([], parsersNS, node, objectStack);\n      }\n    }\n    if (features === null) {\n      features = [];\n    }\n    return features;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {import(\"../geom/Geometry.js\").default|import(\"../extent.js\").Extent|undefined} Geometry.\n   */\n  readGeometryOrExtent(node, objectStack) {\n    const context = /** @type {Object} */objectStack[0];\n    context['srsName'] = node.firstElementChild.getAttribute('srsName');\n    context['srsDimension'] = node.firstElementChild.getAttribute('srsDimension');\n    return pushParseAndPop(null, this.GEOMETRY_PARSERS, node, objectStack, this);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {import(\"../extent.js\").Extent|undefined} Geometry.\n   */\n  readExtentElement(node, objectStack) {\n    const context = /** @type {Object} */objectStack[0];\n    const extent = /** @type {import(\"../extent.js\").Extent} */\n    this.readGeometryOrExtent(node, objectStack);\n    return extent ? transformExtentWithOptions(extent, context) : undefined;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {import(\"../geom/Geometry.js\").default|undefined} Geometry.\n   */\n  readGeometryElement(node, objectStack) {\n    const context = /** @type {Object} */objectStack[0];\n    const geometry = /** @type {import(\"../geom/Geometry.js\").default} */\n    this.readGeometryOrExtent(node, objectStack);\n    return geometry ? transformGeometryWithOptions(geometry, false, context) : undefined;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @param {boolean} asFeature whether result should be wrapped as a feature.\n   * @return {Feature|Object} Feature\n   */\n  readFeatureElementInternal(node, objectStack, asFeature) {\n    let geometryName;\n    const values = {};\n    for (let n = node.firstElementChild; n; n = n.nextElementSibling) {\n      let value;\n      const localName = n.localName;\n      // first, check if it is simple attribute\n      if (n.childNodes.length === 0 || n.childNodes.length === 1 && (n.firstChild.nodeType === 3 || n.firstChild.nodeType === 4)) {\n        value = getAllTextContent(n, false);\n        if (ONLY_WHITESPACE_RE.test(value)) {\n          value = undefined;\n        }\n      } else {\n        if (asFeature) {\n          //if feature, try it as a geometry or extent\n          value = localName === 'boundedBy' ? this.readExtentElement(n, objectStack) : this.readGeometryElement(n, objectStack);\n        }\n        if (!value) {\n          //if not a geometry or not a feature, treat it as a complex attribute\n          value = this.readFeatureElementInternal(n, objectStack, false);\n        } else if (localName !== 'boundedBy') {\n          // boundedBy is an extent and must not be considered as a geometry\n          geometryName = localName;\n        }\n      }\n      const len = n.attributes.length;\n      if (len > 0 && !(value instanceof Geometry)) {\n        value = {\n          _content_: value\n        };\n        for (let i = 0; i < len; i++) {\n          const attName = n.attributes[i].name;\n          value[attName] = n.attributes[i].value;\n        }\n      }\n      if (values[localName]) {\n        if (!(values[localName] instanceof Array)) {\n          values[localName] = [values[localName]];\n        }\n        values[localName].push(value);\n      } else {\n        values[localName] = value;\n      }\n    }\n    if (!asFeature) {\n      return values;\n    }\n    const feature = new Feature(values);\n    if (geometryName) {\n      feature.setGeometryName(geometryName);\n    }\n    const fid = node.getAttribute('fid') || getAttributeNS(node, this.namespace, 'id');\n    if (fid) {\n      feature.setId(fid);\n    }\n    return feature;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Feature} Feature.\n   */\n  readFeatureElement(node, objectStack) {\n    return this.readFeatureElementInternal(node, objectStack, true);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Point|undefined} Point.\n   */\n  readPoint(node, objectStack) {\n    const flatCoordinates = this.readFlatCoordinatesFromNode(node, objectStack);\n    if (flatCoordinates) {\n      return new Point(flatCoordinates, 'XYZ');\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {MultiPoint|undefined} MultiPoint.\n   */\n  readMultiPoint(node, objectStack) {\n    /** @type {Array<Array<number>>} */\n    const coordinates = pushParseAndPop([], this.MULTIPOINT_PARSERS, node, objectStack, this);\n    if (coordinates) {\n      return new MultiPoint(coordinates);\n    }\n    return undefined;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {MultiLineString|undefined} MultiLineString.\n   */\n  readMultiLineString(node, objectStack) {\n    /** @type {Array<LineString>} */\n    const lineStrings = pushParseAndPop([], this.MULTILINESTRING_PARSERS, node, objectStack, this);\n    if (lineStrings) {\n      return new MultiLineString(lineStrings);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {MultiPolygon|undefined} MultiPolygon.\n   */\n  readMultiPolygon(node, objectStack) {\n    /** @type {Array<Polygon>} */\n    const polygons = pushParseAndPop([], this.MULTIPOLYGON_PARSERS, node, objectStack, this);\n    if (polygons) {\n      return new MultiPolygon(polygons);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   */\n  pointMemberParser(node, objectStack) {\n    parseNode(this.POINTMEMBER_PARSERS, node, objectStack, this);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   */\n  lineStringMemberParser(node, objectStack) {\n    parseNode(this.LINESTRINGMEMBER_PARSERS, node, objectStack, this);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   */\n  polygonMemberParser(node, objectStack) {\n    parseNode(this.POLYGONMEMBER_PARSERS, node, objectStack, this);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {LineString|undefined} LineString.\n   */\n  readLineString(node, objectStack) {\n    const flatCoordinates = this.readFlatCoordinatesFromNode(node, objectStack);\n    if (flatCoordinates) {\n      const lineString = new LineString(flatCoordinates, 'XYZ');\n      return lineString;\n    }\n    return undefined;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<number>|undefined} LinearRing flat coordinates.\n   */\n  readFlatLinearRing(node, objectStack) {\n    const ring = pushParseAndPop(null, this.GEOMETRY_FLAT_COORDINATES_PARSERS, node, objectStack, this);\n    if (ring) {\n      return ring;\n    }\n    return undefined;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {LinearRing|undefined} LinearRing.\n   */\n  readLinearRing(node, objectStack) {\n    const flatCoordinates = this.readFlatCoordinatesFromNode(node, objectStack);\n    if (flatCoordinates) {\n      return new LinearRing(flatCoordinates, 'XYZ');\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Polygon|undefined} Polygon.\n   */\n  readPolygon(node, objectStack) {\n    /** @type {Array<Array<number>>} */\n    const flatLinearRings = pushParseAndPop([null], this.FLAT_LINEAR_RINGS_PARSERS, node, objectStack, this);\n    if (flatLinearRings && flatLinearRings[0]) {\n      const flatCoordinates = flatLinearRings[0];\n      const ends = [flatCoordinates.length];\n      let i, ii;\n      for (i = 1, ii = flatLinearRings.length; i < ii; ++i) {\n        extend(flatCoordinates, flatLinearRings[i]);\n        ends.push(flatCoordinates.length);\n      }\n      return new Polygon(flatCoordinates, 'XYZ', ends);\n    }\n    return undefined;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<number>} Flat coordinates.\n   */\n  readFlatCoordinatesFromNode(node, objectStack) {\n    return pushParseAndPop(null, this.GEOMETRY_FLAT_COORDINATES_PARSERS, node, objectStack, this);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Options.\n   * @protected\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   * @override\n   */\n  readGeometryFromNode(node, options) {\n    const geometry = this.readGeometryElement(node, [this.getReadOptions(node, options ? options : {})]);\n    return geometry ? geometry : null;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Options.\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   * @override\n   */\n  readFeaturesFromNode(node, options) {\n    const internalOptions = {\n      featureType: this.featureType,\n      featureNS: this.featureNS\n    };\n    if (internalOptions) {\n      Object.assign(internalOptions, this.getReadOptions(node, options));\n    }\n    const features = this.readFeaturesInternal(node, [internalOptions]);\n    return features || [];\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   * @override\n   */\n  readProjectionFromNode(node) {\n    return getProjection(this.srsName ? this.srsName : node.firstElementChild.getAttribute('srsName'));\n  }\n}\nGMLBase.prototype.namespace = GMLNS;\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGMLBase.prototype.FLAT_LINEAR_RINGS_PARSERS = {\n  'http://www.opengis.net/gml': {}\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGMLBase.prototype.GEOMETRY_FLAT_COORDINATES_PARSERS = {\n  'http://www.opengis.net/gml': {}\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGMLBase.prototype.GEOMETRY_PARSERS = {\n  'http://www.opengis.net/gml': {}\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGMLBase.prototype.MULTIPOINT_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'pointMember': makeArrayPusher(GMLBase.prototype.pointMemberParser),\n    'pointMembers': makeArrayPusher(GMLBase.prototype.pointMemberParser)\n  }\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGMLBase.prototype.MULTILINESTRING_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'lineStringMember': makeArrayPusher(GMLBase.prototype.lineStringMemberParser),\n    'lineStringMembers': makeArrayPusher(GMLBase.prototype.lineStringMemberParser)\n  }\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGMLBase.prototype.MULTIPOLYGON_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'polygonMember': makeArrayPusher(GMLBase.prototype.polygonMemberParser),\n    'polygonMembers': makeArrayPusher(GMLBase.prototype.polygonMemberParser)\n  }\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGMLBase.prototype.POINTMEMBER_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'Point': makeArrayPusher(GMLBase.prototype.readFlatCoordinatesFromNode)\n  }\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGMLBase.prototype.LINESTRINGMEMBER_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'LineString': makeArrayPusher(GMLBase.prototype.readLineString)\n  }\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGMLBase.prototype.POLYGONMEMBER_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'Polygon': makeArrayPusher(GMLBase.prototype.readPolygon)\n  }\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGMLBase.prototype.RING_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'LinearRing': makeReplacer(GMLBase.prototype.readFlatLinearRing)\n  }\n};\nexport default GMLBase;", "/**\n * @module ol/format/GML2\n */\nimport GMLBase, { GMLNS } from './GMLBase.js';\nimport { OBJECT_PROPERTY_NODE_FACTORY, createElementNS, getAllTextContent, makeArrayPusher, makeChildAppender, makeReplacer, makeSimpleNodeFactory, pushParseAndPop, pushSerializeAndPop } from '../xml.js';\nimport { createOrUpdate } from '../extent.js';\nimport { get as getProjection } from '../proj.js';\nimport { transformExtentWithOptions, transformGeometryWithOptions } from './Feature.js';\nimport { writeStringTextNode } from './xsd.js';\n\n/**\n * @const\n * @type {string}\n */\nconst schemaLocation = GMLNS + ' http://schemas.opengis.net/gml/2.1.2/feature.xsd';\n\n/**\n * @const\n * @type {Object<string, string>}\n */\nconst MULTIGEOMETRY_TO_MEMBER_NODENAME = {\n  'MultiLineString': 'lineStringMember',\n  'MultiCurve': 'curveMember',\n  'MultiPolygon': 'polygonMember',\n  'MultiSurface': 'surfaceMember'\n};\n\n/**\n * @classdesc\n * Feature format for reading and writing data in the GML format,\n * version 2.1.2.\n *\n * @api\n */\nclass GML2 extends GMLBase {\n  /**\n   * @param {import(\"./GMLBase.js\").Options} [options] Optional configuration object.\n   */\n  constructor(options) {\n    options = options ? options : {};\n    super(options);\n    this.FEATURE_COLLECTION_PARSERS[GMLNS]['featureMember'] = makeArrayPusher(this.readFeaturesInternal);\n\n    /**\n     * @type {string}\n     */\n    this.schemaLocation = options.schemaLocation ? options.schemaLocation : schemaLocation;\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<number>|undefined} Flat coordinates.\n   */\n  readFlatCoordinates(node, objectStack) {\n    const s = getAllTextContent(node, false).replace(/^\\s*|\\s*$/g, '');\n    const context = /** @type {import(\"../xml.js\").NodeStackItem} */\n    objectStack[0];\n    const containerSrs = context['srsName'];\n    let axisOrientation = 'enu';\n    if (containerSrs) {\n      const proj = getProjection(containerSrs);\n      if (proj) {\n        axisOrientation = proj.getAxisOrientation();\n      }\n    }\n    const coordsGroups = s.trim().split(/\\s+/);\n    const flatCoordinates = [];\n    for (let i = 0, ii = coordsGroups.length; i < ii; i++) {\n      const coords = coordsGroups[i].split(/,+/);\n      const x = parseFloat(coords[0]);\n      const y = parseFloat(coords[1]);\n      const z = coords.length === 3 ? parseFloat(coords[2]) : 0;\n      if (axisOrientation.startsWith('en')) {\n        flatCoordinates.push(x, y, z);\n      } else {\n        flatCoordinates.push(y, x, z);\n      }\n    }\n    return flatCoordinates;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {import(\"../extent.js\").Extent|undefined} Envelope.\n   */\n  readBox(node, objectStack) {\n    /** @type {Array<number>} */\n    const flatCoordinates = pushParseAndPop([null], this.BOX_PARSERS_, node, objectStack, this);\n    return createOrUpdate(flatCoordinates[1][0], flatCoordinates[1][1], flatCoordinates[1][3], flatCoordinates[1][4]);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   */\n  innerBoundaryIsParser(node, objectStack) {\n    /** @type {Array<number>|undefined} */\n    const flatLinearRing = pushParseAndPop(undefined, this.RING_PARSERS, node, objectStack, this);\n    if (flatLinearRing) {\n      const flatLinearRings = /** @type {Array<Array<number>>} */\n      objectStack[objectStack.length - 1];\n      flatLinearRings.push(flatLinearRing);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   */\n  outerBoundaryIsParser(node, objectStack) {\n    /** @type {Array<number>|undefined} */\n    const flatLinearRing = pushParseAndPop(undefined, this.RING_PARSERS, node, objectStack, this);\n    if (flatLinearRing) {\n      const flatLinearRings = /** @type {Array<Array<number>>} */\n      objectStack[objectStack.length - 1];\n      flatLinearRings[0] = flatLinearRing;\n    }\n  }\n\n  /**\n   * @const\n   * @param {*} value Value.\n   * @param {Array<*>} objectStack Object stack.\n   * @param {string} [nodeName] Node name.\n   * @return {Element|undefined} Node.\n   * @private\n   */\n  GEOMETRY_NODE_FACTORY_(value, objectStack, nodeName) {\n    const context = objectStack[objectStack.length - 1];\n    const multiSurface = context['multiSurface'];\n    const surface = context['surface'];\n    const multiCurve = context['multiCurve'];\n    if (!Array.isArray(value)) {\n      nodeName = /** @type {import(\"../geom/Geometry.js\").default} */value.getType();\n      if (nodeName === 'MultiPolygon' && multiSurface === true) {\n        nodeName = 'MultiSurface';\n      } else if (nodeName === 'Polygon' && surface === true) {\n        nodeName = 'Surface';\n      } else if (nodeName === 'MultiLineString' && multiCurve === true) {\n        nodeName = 'MultiCurve';\n      }\n    } else {\n      nodeName = 'Envelope';\n    }\n    return createElementNS('http://www.opengis.net/gml', nodeName);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeFeatureElement(node, feature, objectStack) {\n    const fid = feature.getId();\n    if (fid) {\n      node.setAttribute('fid', /** @type {string} */fid);\n    }\n    const context = /** @type {Object} */objectStack[objectStack.length - 1];\n    const featureNS = context['featureNS'];\n    const geometryName = feature.getGeometryName();\n    if (!context.serializers) {\n      context.serializers = {};\n      context.serializers[featureNS] = {};\n    }\n    const keys = [];\n    const values = [];\n    if (feature.hasProperties()) {\n      const properties = feature.getProperties();\n      for (const key in properties) {\n        const value = properties[key];\n        if (value !== null && value !== undefined) {\n          keys.push(key);\n          values.push(value);\n          if (key == geometryName || typeof (/** @type {?} */value.getSimplifiedGeometry) === 'function') {\n            if (!(key in context.serializers[featureNS])) {\n              context.serializers[featureNS][key] = makeChildAppender(this.writeGeometryElement, this);\n            }\n          } else {\n            if (!(key in context.serializers[featureNS])) {\n              context.serializers[featureNS][key] = makeChildAppender(writeStringTextNode);\n            }\n          }\n        }\n      }\n    }\n    const item = Object.assign({}, context);\n    item.node = node;\n    pushSerializeAndPop(/** @type {import(\"../xml.js\").NodeStackItem} */\n    item, context.serializers, makeSimpleNodeFactory(undefined, featureNS), values, objectStack, keys);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/LineString.js\").default} geometry LineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeCurveOrLineString(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const srsName = context['srsName'];\n    if (node.nodeName !== 'LineStringSegment' && srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    if (node.nodeName === 'LineString' || node.nodeName === 'LineStringSegment') {\n      const coordinates = this.createCoordinatesNode_(node.namespaceURI);\n      node.appendChild(coordinates);\n      this.writeCoordinates_(coordinates, geometry, objectStack);\n    } else if (node.nodeName === 'Curve') {\n      const segments = createElementNS(node.namespaceURI, 'segments');\n      node.appendChild(segments);\n      this.writeCurveSegments_(segments, geometry, objectStack);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/LineString.js\").default} line LineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeLineStringOrCurveMember(node, line, objectStack) {\n    const child = this.GEOMETRY_NODE_FACTORY_(line, objectStack);\n    if (child) {\n      node.appendChild(child);\n      this.writeCurveOrLineString(child, line, objectStack);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/MultiLineString.js\").default} geometry MultiLineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeMultiCurveOrLineString(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsName = context['srsName'];\n    const curve = context['curve'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const lines = geometry.getLineStrings();\n    pushSerializeAndPop({\n      node: node,\n      hasZ: hasZ,\n      srsName: srsName,\n      curve: curve\n    }, this.LINESTRINGORCURVEMEMBER_SERIALIZERS, this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_, lines, objectStack, undefined, this);\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"../geom/Geometry.js\").default|import(\"../extent.js\").Extent} geometry Geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeGeometryElement(node, geometry, objectStack) {\n    const context = /** @type {import(\"./Feature.js\").WriteOptions} */\n    objectStack[objectStack.length - 1];\n    const item = Object.assign({}, context);\n    item['node'] = node;\n    let value;\n    if (Array.isArray(geometry)) {\n      value = transformExtentWithOptions(/** @type {import(\"../extent.js\").Extent} */geometry, context);\n    } else {\n      value = transformGeometryWithOptions(/** @type {import(\"../geom/Geometry.js\").default} */geometry, true, context);\n    }\n    pushSerializeAndPop(/** @type {import(\"../xml.js\").NodeStackItem} */\n    item, this.GEOMETRY_SERIALIZERS, this.GEOMETRY_NODE_FACTORY_, [value], objectStack, undefined, this);\n  }\n\n  /**\n   * @param {string} namespaceURI XML namespace.\n   * @return {Element} coordinates node.\n   * @private\n   */\n  createCoordinatesNode_(namespaceURI) {\n    const coordinates = createElementNS(namespaceURI, 'coordinates');\n    coordinates.setAttribute('decimal', '.');\n    coordinates.setAttribute('cs', ',');\n    coordinates.setAttribute('ts', ' ');\n    return coordinates;\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"../geom/LineString.js\").default|import(\"../geom/LinearRing.js\").default} value Geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeCoordinates_(node, value, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsName = context['srsName'];\n    // only 2d for simple features profile\n    const points = value.getCoordinates();\n    const len = points.length;\n    const parts = new Array(len);\n    for (let i = 0; i < len; ++i) {\n      const point = points[i];\n      parts[i] = this.getCoords_(point, srsName, hasZ);\n    }\n    writeStringTextNode(node, parts.join(' '));\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/LineString.js\").default} line LineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeCurveSegments_(node, line, objectStack) {\n    const child = createElementNS(node.namespaceURI, 'LineStringSegment');\n    node.appendChild(child);\n    this.writeCurveOrLineString(child, line, objectStack);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/Polygon.js\").default} geometry Polygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeSurfaceOrPolygon(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsName = context['srsName'];\n    if (node.nodeName !== 'PolygonPatch' && srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    if (node.nodeName === 'Polygon' || node.nodeName === 'PolygonPatch') {\n      const rings = geometry.getLinearRings();\n      pushSerializeAndPop({\n        node: node,\n        hasZ: hasZ,\n        srsName: srsName\n      }, this.RING_SERIALIZERS, this.RING_NODE_FACTORY_, rings, objectStack, undefined, this);\n    } else if (node.nodeName === 'Surface') {\n      const patches = createElementNS(node.namespaceURI, 'patches');\n      node.appendChild(patches);\n      this.writeSurfacePatches_(patches, geometry, objectStack);\n    }\n  }\n\n  /**\n   * @param {*} value Value.\n   * @param {Array<*>} objectStack Object stack.\n   * @param {string} [nodeName] Node name.\n   * @return {Node} Node.\n   * @private\n   */\n  RING_NODE_FACTORY_(value, objectStack, nodeName) {\n    const context = objectStack[objectStack.length - 1];\n    const parentNode = context.node;\n    const exteriorWritten = context['exteriorWritten'];\n    if (exteriorWritten === undefined) {\n      context['exteriorWritten'] = true;\n    }\n    return createElementNS(parentNode.namespaceURI, exteriorWritten !== undefined ? 'innerBoundaryIs' : 'outerBoundaryIs');\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/Polygon.js\").default} polygon Polygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeSurfacePatches_(node, polygon, objectStack) {\n    const child = createElementNS(node.namespaceURI, 'PolygonPatch');\n    node.appendChild(child);\n    this.writeSurfaceOrPolygon(child, polygon, objectStack);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/LinearRing.js\").default} ring LinearRing geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeRing(node, ring, objectStack) {\n    const linearRing = createElementNS(node.namespaceURI, 'LinearRing');\n    node.appendChild(linearRing);\n    this.writeLinearRing(linearRing, ring, objectStack);\n  }\n\n  /**\n   * @param {Array<number>} point Point geometry.\n   * @param {string} [srsName] Optional srsName\n   * @param {boolean} [hasZ] whether the geometry has a Z coordinate (is 3D) or not.\n   * @return {string} The coords string.\n   * @private\n   */\n  getCoords_(point, srsName, hasZ) {\n    const axisOrientation = srsName ? getProjection(srsName).getAxisOrientation() : 'enu';\n    let coords = axisOrientation.startsWith('en') ? point[0] + ',' + point[1] : point[1] + ',' + point[0];\n    if (hasZ) {\n      // For newly created points, Z can be undefined.\n      const z = point[2] || 0;\n      coords += ',' + z;\n    }\n    return coords;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/Point.js\").default} geometry Point geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writePoint(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsName = context['srsName'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const coordinates = this.createCoordinatesNode_(node.namespaceURI);\n    node.appendChild(coordinates);\n    const point = geometry.getCoordinates();\n    const coord = this.getCoords_(point, srsName, hasZ);\n    writeStringTextNode(coordinates, coord);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/MultiPoint.js\").default} geometry MultiPoint geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeMultiPoint(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsName = context['srsName'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const points = geometry.getPoints();\n    pushSerializeAndPop({\n      node: node,\n      hasZ: hasZ,\n      srsName: srsName\n    }, this.POINTMEMBER_SERIALIZERS, makeSimpleNodeFactory('pointMember'), points, objectStack, undefined, this);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/Point.js\").default} point Point geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writePointMember(node, point, objectStack) {\n    const child = createElementNS(node.namespaceURI, 'Point');\n    node.appendChild(child);\n    this.writePoint(child, point, objectStack);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/LinearRing.js\").default} geometry LinearRing geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeLinearRing(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const srsName = context['srsName'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const coordinates = this.createCoordinatesNode_(node.namespaceURI);\n    node.appendChild(coordinates);\n    this.writeCoordinates_(coordinates, geometry, objectStack);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/MultiPolygon.js\").default} geometry MultiPolygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeMultiSurfaceOrPolygon(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsName = context['srsName'];\n    const surface = context['surface'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const polygons = geometry.getPolygons();\n    pushSerializeAndPop({\n      node: node,\n      hasZ: hasZ,\n      srsName: srsName,\n      surface: surface\n    }, this.SURFACEORPOLYGONMEMBER_SERIALIZERS, this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_, polygons, objectStack, undefined, this);\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"../geom/Polygon.js\").default} polygon Polygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeSurfaceOrPolygonMember(node, polygon, objectStack) {\n    const child = this.GEOMETRY_NODE_FACTORY_(polygon, objectStack);\n    if (child) {\n      node.appendChild(child);\n      this.writeSurfaceOrPolygon(child, polygon, objectStack);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeEnvelope(node, extent, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const srsName = context['srsName'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const keys = ['lowerCorner', 'upperCorner'];\n    const values = [extent[0] + ' ' + extent[1], extent[2] + ' ' + extent[3]];\n    pushSerializeAndPop(/** @type {import(\"../xml.js\").NodeStackItem} */\n    {\n      node: node\n    }, this.ENVELOPE_SERIALIZERS, OBJECT_PROPERTY_NODE_FACTORY, values, objectStack, keys, this);\n  }\n\n  /**\n   * @const\n   * @param {*} value Value.\n   * @param {Array<*>} objectStack Object stack.\n   * @param {string} [nodeName] Node name.\n   * @return {Node|undefined} Node.\n   * @private\n   */\n  MULTIGEOMETRY_MEMBER_NODE_FACTORY_(value, objectStack, nodeName) {\n    const parentNode = objectStack[objectStack.length - 1].node;\n    return createElementNS('http://www.opengis.net/gml', MULTIGEOMETRY_TO_MEMBER_NODENAME[parentNode.nodeName]);\n  }\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML2.prototype.GEOMETRY_FLAT_COORDINATES_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'coordinates': makeReplacer(GML2.prototype.readFlatCoordinates)\n  }\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML2.prototype.FLAT_LINEAR_RINGS_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'innerBoundaryIs': GML2.prototype.innerBoundaryIsParser,\n    'outerBoundaryIs': GML2.prototype.outerBoundaryIsParser\n  }\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML2.prototype.BOX_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'coordinates': makeArrayPusher(GML2.prototype.readFlatCoordinates)\n  }\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML2.prototype.GEOMETRY_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'Point': makeReplacer(GMLBase.prototype.readPoint),\n    'MultiPoint': makeReplacer(GMLBase.prototype.readMultiPoint),\n    'LineString': makeReplacer(GMLBase.prototype.readLineString),\n    'MultiLineString': makeReplacer(GMLBase.prototype.readMultiLineString),\n    'LinearRing': makeReplacer(GMLBase.prototype.readLinearRing),\n    'Polygon': makeReplacer(GMLBase.prototype.readPolygon),\n    'MultiPolygon': makeReplacer(GMLBase.prototype.readMultiPolygon),\n    'Box': makeReplacer(GML2.prototype.readBox)\n  }\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML2.prototype.GEOMETRY_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'Curve': makeChildAppender(GML2.prototype.writeCurveOrLineString),\n    'MultiCurve': makeChildAppender(GML2.prototype.writeMultiCurveOrLineString),\n    'Point': makeChildAppender(GML2.prototype.writePoint),\n    'MultiPoint': makeChildAppender(GML2.prototype.writeMultiPoint),\n    'LineString': makeChildAppender(GML2.prototype.writeCurveOrLineString),\n    'MultiLineString': makeChildAppender(GML2.prototype.writeMultiCurveOrLineString),\n    'LinearRing': makeChildAppender(GML2.prototype.writeLinearRing),\n    'Polygon': makeChildAppender(GML2.prototype.writeSurfaceOrPolygon),\n    'MultiPolygon': makeChildAppender(GML2.prototype.writeMultiSurfaceOrPolygon),\n    'Surface': makeChildAppender(GML2.prototype.writeSurfaceOrPolygon),\n    'MultiSurface': makeChildAppender(GML2.prototype.writeMultiSurfaceOrPolygon),\n    'Envelope': makeChildAppender(GML2.prototype.writeEnvelope)\n  }\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML2.prototype.LINESTRINGORCURVEMEMBER_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'lineStringMember': makeChildAppender(GML2.prototype.writeLineStringOrCurveMember),\n    'curveMember': makeChildAppender(GML2.prototype.writeLineStringOrCurveMember)\n  }\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML2.prototype.RING_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'outerBoundaryIs': makeChildAppender(GML2.prototype.writeRing),\n    'innerBoundaryIs': makeChildAppender(GML2.prototype.writeRing)\n  }\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML2.prototype.POINTMEMBER_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'pointMember': makeChildAppender(GML2.prototype.writePointMember)\n  }\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML2.prototype.SURFACEORPOLYGONMEMBER_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'surfaceMember': makeChildAppender(GML2.prototype.writeSurfaceOrPolygonMember),\n    'polygonMember': makeChildAppender(GML2.prototype.writeSurfaceOrPolygonMember)\n  }\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML2.prototype.ENVELOPE_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'lowerCorner': makeChildAppender(writeStringTextNode),\n    'upperCorner': makeChildAppender(writeStringTextNode)\n  }\n};\nexport default GML2;", "/**\n * @module ol/format/GML3\n */\nimport GML2 from './GML2.js';\nimport GMLBase, { GMLNS } from './GMLBase.js';\nimport LineString from '../geom/LineString.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Polygon from '../geom/Polygon.js';\nimport { OBJECT_PROPERTY_NODE_FACTORY, XML_SCHEMA_INSTANCE_URI, createElementNS, getAllTextContent, makeArrayExtender, makeArrayPusher, makeChildAppender, makeReplacer, makeSimpleNodeFactory, parseNode, pushParseAndPop, pushSerializeAndPop } from '../xml.js';\nimport { createOrUpdate } from '../extent.js';\nimport { extend } from '../array.js';\nimport { get as getProjection } from '../proj.js';\nimport { readNonNegativeIntegerString, writeStringTextNode } from './xsd.js';\nimport { transformExtentWithOptions, transformGeometryWithOptions } from './Feature.js';\n\n/**\n * @const\n * @type {string}\n * @private\n */\nconst schemaLocation = GMLNS + ' http://schemas.opengis.net/gml/3.1.1/profiles/gmlsfProfile/' + '1.0.0/gmlsf.xsd';\n\n/**\n * @const\n * @type {Object<string, string>}\n */\nconst MULTIGEOMETRY_TO_MEMBER_NODENAME = {\n  'MultiLineString': 'lineStringMember',\n  'MultiCurve': 'curveMember',\n  'MultiPolygon': 'polygonMember',\n  'MultiSurface': 'surfaceMember'\n};\n\n/**\n * @classdesc\n * Feature format for reading and writing data in the GML format\n * version 3.1.1.\n * Currently only supports GML 3.1.1 Simple Features profile.\n *\n * @api\n */\nclass GML3 extends GMLBase {\n  /**\n   * @param {import(\"./GMLBase.js\").Options} [options] Optional configuration object.\n   */\n  constructor(options) {\n    options = options ? options : {};\n    super(options);\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.surface_ = options.surface !== undefined ? options.surface : false;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.curve_ = options.curve !== undefined ? options.curve : false;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.multiCurve_ = options.multiCurve !== undefined ? options.multiCurve : true;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.multiSurface_ = options.multiSurface !== undefined ? options.multiSurface : true;\n\n    /**\n     * @type {string}\n     */\n    this.schemaLocation = options.schemaLocation ? options.schemaLocation : schemaLocation;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.hasZ = options.hasZ !== undefined ? options.hasZ : false;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {MultiLineString|undefined} MultiLineString.\n   */\n  readMultiCurve(node, objectStack) {\n    /** @type {Array<LineString>} */\n    const lineStrings = pushParseAndPop([], this.MULTICURVE_PARSERS, node, objectStack, this);\n    if (lineStrings) {\n      const multiLineString = new MultiLineString(lineStrings);\n      return multiLineString;\n    }\n    return undefined;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<number>|undefined} Polygon.\n   */\n  readFlatCurveRing(node, objectStack) {\n    /** @type {Array<LineString>} */\n    const lineStrings = pushParseAndPop([], this.MULTICURVE_PARSERS, node, objectStack, this);\n    const flatCoordinates = [];\n    for (let i = 0, ii = lineStrings.length; i < ii; ++i) {\n      extend(flatCoordinates, lineStrings[i].getFlatCoordinates());\n    }\n    return flatCoordinates;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {MultiPolygon|undefined} MultiPolygon.\n   */\n  readMultiSurface(node, objectStack) {\n    /** @type {Array<Polygon>} */\n    const polygons = pushParseAndPop([], this.MULTISURFACE_PARSERS, node, objectStack, this);\n    if (polygons) {\n      return new MultiPolygon(polygons);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   */\n  curveMemberParser(node, objectStack) {\n    parseNode(this.CURVEMEMBER_PARSERS, node, objectStack, this);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   */\n  surfaceMemberParser(node, objectStack) {\n    parseNode(this.SURFACEMEMBER_PARSERS, node, objectStack, this);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<(Array<number>)>|undefined} flat coordinates.\n   */\n  readPatch(node, objectStack) {\n    return pushParseAndPop([null], this.PATCHES_PARSERS, node, objectStack, this);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<number>|undefined} flat coordinates.\n   */\n  readSegment(node, objectStack) {\n    return pushParseAndPop([], this.SEGMENTS_PARSERS, node, objectStack, this);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<(Array<number>)>|undefined} flat coordinates.\n   */\n  readPolygonPatch(node, objectStack) {\n    return pushParseAndPop([null], this.FLAT_LINEAR_RINGS_PARSERS, node, objectStack, this);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<number>|undefined} flat coordinates.\n   */\n  readLineStringSegment(node, objectStack) {\n    return pushParseAndPop([null], this.GEOMETRY_FLAT_COORDINATES_PARSERS, node, objectStack, this);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   */\n  interiorParser(node, objectStack) {\n    /** @type {Array<number>|undefined} */\n    const flatLinearRing = pushParseAndPop(undefined, this.RING_PARSERS, node, objectStack, this);\n    if (flatLinearRing) {\n      const flatLinearRings = /** @type {Array<Array<number>>} */\n      objectStack[objectStack.length - 1];\n      flatLinearRings.push(flatLinearRing);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   */\n  exteriorParser(node, objectStack) {\n    /** @type {Array<number>|undefined} */\n    const flatLinearRing = pushParseAndPop(undefined, this.RING_PARSERS, node, objectStack, this);\n    if (flatLinearRing) {\n      const flatLinearRings = /** @type {Array<Array<number>>} */\n      objectStack[objectStack.length - 1];\n      flatLinearRings[0] = flatLinearRing;\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Polygon|undefined} Polygon.\n   */\n  readSurface(node, objectStack) {\n    /** @type {Array<Array<number>>} */\n    const flatLinearRings = pushParseAndPop([null], this.SURFACE_PARSERS, node, objectStack, this);\n    if (flatLinearRings && flatLinearRings[0]) {\n      const flatCoordinates = flatLinearRings[0];\n      const ends = [flatCoordinates.length];\n      let i, ii;\n      for (i = 1, ii = flatLinearRings.length; i < ii; ++i) {\n        extend(flatCoordinates, flatLinearRings[i]);\n        ends.push(flatCoordinates.length);\n      }\n      return new Polygon(flatCoordinates, 'XYZ', ends);\n    }\n    return undefined;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {LineString|undefined} LineString.\n   */\n  readCurve(node, objectStack) {\n    /** @type {Array<number>} */\n    const flatCoordinates = pushParseAndPop([null], this.CURVE_PARSERS, node, objectStack, this);\n    if (flatCoordinates) {\n      const lineString = new LineString(flatCoordinates, 'XYZ');\n      return lineString;\n    }\n    return undefined;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {import(\"../extent.js\").Extent|undefined} Envelope.\n   */\n  readEnvelope(node, objectStack) {\n    /** @type {Array<number>} */\n    const flatCoordinates = pushParseAndPop([null], this.ENVELOPE_PARSERS, node, objectStack, this);\n    return createOrUpdate(flatCoordinates[1][0], flatCoordinates[1][1], flatCoordinates[2][0], flatCoordinates[2][1]);\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<number>|undefined} Flat coordinates.\n   */\n  readFlatPos(node, objectStack) {\n    let s = getAllTextContent(node, false);\n    const re = /^\\s*([+\\-]?\\d*\\.?\\d+(?:[eE][+\\-]?\\d+)?)\\s*/;\n    /** @type {Array<number>} */\n    const flatCoordinates = [];\n    let m;\n    while (m = re.exec(s)) {\n      flatCoordinates.push(parseFloat(m[1]));\n      s = s.substr(m[0].length);\n    }\n    if (s !== '') {\n      return undefined;\n    }\n    const context = objectStack[0];\n    const containerSrs = context['srsName'];\n    const axisOrientation = containerSrs ? getProjection(containerSrs).getAxisOrientation() : 'enu';\n    if (axisOrientation === 'neu') {\n      for (let i = 0, ii = flatCoordinates.length; i < ii; i += 3) {\n        const y = flatCoordinates[i];\n        const x = flatCoordinates[i + 1];\n        flatCoordinates[i] = x;\n        flatCoordinates[i + 1] = y;\n      }\n    }\n    const len = flatCoordinates.length;\n    if (len == 2) {\n      flatCoordinates.push(0);\n    }\n    if (len === 0) {\n      return undefined;\n    }\n    return flatCoordinates;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<number>|undefined} Flat coordinates.\n   */\n  readFlatPosList(node, objectStack) {\n    const s = getAllTextContent(node, false).replace(/^\\s*|\\s*$/g, '');\n    const context = objectStack[0];\n    const containerSrs = context['srsName'];\n    const contextDimension = context['srsDimension'];\n    const axisOrientation = containerSrs ? getProjection(containerSrs).getAxisOrientation() : 'enu';\n    const coords = s.split(/\\s+/);\n    // The \"dimension\" attribute is from the GML 3.0.1 spec.\n    let dim = 2;\n    if (node.getAttribute('srsDimension')) {\n      dim = readNonNegativeIntegerString(node.getAttribute('srsDimension'));\n    } else if (node.getAttribute('dimension')) {\n      dim = readNonNegativeIntegerString(node.getAttribute('dimension'));\n    } else if (/** @type {Element} */node.parentNode.getAttribute('srsDimension')) {\n      dim = readNonNegativeIntegerString(/** @type {Element} */node.parentNode.getAttribute('srsDimension'));\n    } else if (contextDimension) {\n      dim = readNonNegativeIntegerString(contextDimension);\n    }\n    const asXYZ = axisOrientation.startsWith('en');\n    let x, y, z;\n    const flatCoordinates = [];\n    for (let i = 0, ii = coords.length; i < ii; i += dim) {\n      x = parseFloat(coords[i]);\n      y = parseFloat(coords[i + 1]);\n      z = dim === 3 ? parseFloat(coords[i + 2]) : 0;\n      if (asXYZ) {\n        flatCoordinates.push(x, y, z);\n      } else {\n        flatCoordinates.push(y, x, z);\n      }\n    }\n    return flatCoordinates;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/Point.js\").default} value Point geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writePos_(node, value, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsDimension = hasZ ? '3' : '2';\n    node.setAttribute('srsDimension', srsDimension);\n    const srsName = context['srsName'];\n    const axisOrientation = srsName ? getProjection(srsName).getAxisOrientation() : 'enu';\n    const point = value.getCoordinates();\n    // only 2d for simple features profile\n    let coords = axisOrientation.startsWith('en') ? point[0] + ' ' + point[1] : point[1] + ' ' + point[0];\n    if (hasZ) {\n      // For newly created points, Z can be undefined.\n      const z = point[2] || 0;\n      coords += ' ' + z;\n    }\n    writeStringTextNode(node, coords);\n  }\n\n  /**\n   * @param {Array<number>} point Point geometry.\n   * @param {string} [srsName] Optional srsName\n   * @param {boolean} [hasZ] whether the geometry has a Z coordinate (is 3D) or not.\n   * @return {string} The coords string.\n   * @private\n   */\n  getCoords_(point, srsName, hasZ) {\n    const axisOrientation = srsName ? getProjection(srsName).getAxisOrientation() : 'enu';\n    let coords = axisOrientation.startsWith('en') ? point[0] + ' ' + point[1] : point[1] + ' ' + point[0];\n    if (hasZ) {\n      // For newly created points, Z can be undefined.\n      const z = point[2] || 0;\n      coords += ' ' + z;\n    }\n    return coords;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {LineString|import(\"../geom/LinearRing.js\").default} value Geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writePosList_(node, value, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsDimension = hasZ ? '3' : '2';\n    node.setAttribute('srsDimension', srsDimension);\n    const srsName = context['srsName'];\n    // only 2d for simple features profile\n    const points = value.getCoordinates();\n    const len = points.length;\n    const parts = new Array(len);\n    let point;\n    for (let i = 0; i < len; ++i) {\n      point = points[i];\n      parts[i] = this.getCoords_(point, srsName, hasZ);\n    }\n    writeStringTextNode(node, parts.join(' '));\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/Point.js\").default} geometry Point geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writePoint(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const srsName = context['srsName'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const pos = createElementNS(node.namespaceURI, 'pos');\n    node.appendChild(pos);\n    this.writePos_(pos, geometry, objectStack);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeEnvelope(node, extent, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const srsName = context['srsName'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const keys = ['lowerCorner', 'upperCorner'];\n    const values = [extent[0] + ' ' + extent[1], extent[2] + ' ' + extent[3]];\n    pushSerializeAndPop(/** @type {import(\"../xml.js\").NodeStackItem} */\n    {\n      node: node\n    }, this.ENVELOPE_SERIALIZERS, OBJECT_PROPERTY_NODE_FACTORY, values, objectStack, keys, this);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/LinearRing.js\").default} geometry LinearRing geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeLinearRing(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const srsName = context['srsName'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const posList = createElementNS(node.namespaceURI, 'posList');\n    node.appendChild(posList);\n    this.writePosList_(posList, geometry, objectStack);\n  }\n\n  /**\n   * @param {*} value Value.\n   * @param {Array<*>} objectStack Object stack.\n   * @param {string} [nodeName] Node name.\n   * @return {Node} Node.\n   * @private\n   */\n  RING_NODE_FACTORY_(value, objectStack, nodeName) {\n    const context = objectStack[objectStack.length - 1];\n    const parentNode = context.node;\n    const exteriorWritten = context['exteriorWritten'];\n    if (exteriorWritten === undefined) {\n      context['exteriorWritten'] = true;\n    }\n    return createElementNS(parentNode.namespaceURI, exteriorWritten !== undefined ? 'interior' : 'exterior');\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Polygon} geometry Polygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeSurfaceOrPolygon(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsName = context['srsName'];\n    if (node.nodeName !== 'PolygonPatch' && srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    if (node.nodeName === 'Polygon' || node.nodeName === 'PolygonPatch') {\n      const rings = geometry.getLinearRings();\n      pushSerializeAndPop({\n        node: node,\n        hasZ: hasZ,\n        srsName: srsName\n      }, this.RING_SERIALIZERS, this.RING_NODE_FACTORY_, rings, objectStack, undefined, this);\n    } else if (node.nodeName === 'Surface') {\n      const patches = createElementNS(node.namespaceURI, 'patches');\n      node.appendChild(patches);\n      this.writeSurfacePatches_(patches, geometry, objectStack);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {LineString} geometry LineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeCurveOrLineString(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const srsName = context['srsName'];\n    if (node.nodeName !== 'LineStringSegment' && srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    if (node.nodeName === 'LineString' || node.nodeName === 'LineStringSegment') {\n      const posList = createElementNS(node.namespaceURI, 'posList');\n      node.appendChild(posList);\n      this.writePosList_(posList, geometry, objectStack);\n    } else if (node.nodeName === 'Curve') {\n      const segments = createElementNS(node.namespaceURI, 'segments');\n      node.appendChild(segments);\n      this.writeCurveSegments_(segments, geometry, objectStack);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {MultiPolygon} geometry MultiPolygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeMultiSurfaceOrPolygon(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsName = context['srsName'];\n    const surface = context['surface'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const polygons = geometry.getPolygons();\n    pushSerializeAndPop({\n      node: node,\n      hasZ: hasZ,\n      srsName: srsName,\n      surface: surface\n    }, this.SURFACEORPOLYGONMEMBER_SERIALIZERS, this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_, polygons, objectStack, undefined, this);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/MultiPoint.js\").default} geometry MultiPoint geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeMultiPoint(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const srsName = context['srsName'];\n    const hasZ = context['hasZ'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const points = geometry.getPoints();\n    pushSerializeAndPop({\n      node: node,\n      hasZ: hasZ,\n      srsName: srsName\n    }, this.POINTMEMBER_SERIALIZERS, makeSimpleNodeFactory('pointMember'), points, objectStack, undefined, this);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {MultiLineString} geometry MultiLineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeMultiCurveOrLineString(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsName = context['srsName'];\n    const curve = context['curve'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const lines = geometry.getLineStrings();\n    pushSerializeAndPop({\n      node: node,\n      hasZ: hasZ,\n      srsName: srsName,\n      curve: curve\n    }, this.LINESTRINGORCURVEMEMBER_SERIALIZERS, this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_, lines, objectStack, undefined, this);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/LinearRing.js\").default} ring LinearRing geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeRing(node, ring, objectStack) {\n    const linearRing = createElementNS(node.namespaceURI, 'LinearRing');\n    node.appendChild(linearRing);\n    this.writeLinearRing(linearRing, ring, objectStack);\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {Polygon} polygon Polygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeSurfaceOrPolygonMember(node, polygon, objectStack) {\n    const child = this.GEOMETRY_NODE_FACTORY_(polygon, objectStack);\n    if (child) {\n      node.appendChild(child);\n      this.writeSurfaceOrPolygon(child, polygon, objectStack);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/Point.js\").default} point Point geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writePointMember(node, point, objectStack) {\n    const child = createElementNS(node.namespaceURI, 'Point');\n    node.appendChild(child);\n    this.writePoint(child, point, objectStack);\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {LineString} line LineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeLineStringOrCurveMember(node, line, objectStack) {\n    const child = this.GEOMETRY_NODE_FACTORY_(line, objectStack);\n    if (child) {\n      node.appendChild(child);\n      this.writeCurveOrLineString(child, line, objectStack);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Polygon} polygon Polygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeSurfacePatches_(node, polygon, objectStack) {\n    const child = createElementNS(node.namespaceURI, 'PolygonPatch');\n    node.appendChild(child);\n    this.writeSurfaceOrPolygon(child, polygon, objectStack);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {LineString} line LineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeCurveSegments_(node, line, objectStack) {\n    const child = createElementNS(node.namespaceURI, 'LineStringSegment');\n    node.appendChild(child);\n    this.writeCurveOrLineString(child, line, objectStack);\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"../geom/Geometry.js\").default|import(\"../extent.js\").Extent} geometry Geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeGeometryElement(node, geometry, objectStack) {\n    const context = /** @type {import(\"./Feature.js\").WriteOptions} */\n    objectStack[objectStack.length - 1];\n    const item = Object.assign({}, context);\n    item['node'] = node;\n    let value;\n    if (Array.isArray(geometry)) {\n      value = transformExtentWithOptions(/** @type {import(\"../extent.js\").Extent} */geometry, context);\n    } else {\n      value = transformGeometryWithOptions(/** @type {import(\"../geom/Geometry.js\").default} */geometry, true, context);\n    }\n    pushSerializeAndPop(/** @type {import(\"../xml.js\").NodeStackItem} */\n    item, this.GEOMETRY_SERIALIZERS, this.GEOMETRY_NODE_FACTORY_, [value], objectStack, undefined, this);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeFeatureElement(node, feature, objectStack) {\n    const fid = feature.getId();\n    if (fid) {\n      node.setAttribute('fid', /** @type {string} */fid);\n    }\n    const context = /** @type {Object} */objectStack[objectStack.length - 1];\n    const featureNS = context['featureNS'];\n    const geometryName = feature.getGeometryName();\n    if (!context.serializers) {\n      context.serializers = {};\n      context.serializers[featureNS] = {};\n    }\n    const keys = [];\n    const values = [];\n    if (feature.hasProperties()) {\n      const properties = feature.getProperties();\n      for (const key in properties) {\n        const value = properties[key];\n        if (value !== null && value !== undefined) {\n          keys.push(key);\n          values.push(value);\n          if (key == geometryName || typeof (/** @type {?} */value.getSimplifiedGeometry) === 'function') {\n            if (!(key in context.serializers[featureNS])) {\n              context.serializers[featureNS][key] = makeChildAppender(this.writeGeometryElement, this);\n            }\n          } else {\n            if (!(key in context.serializers[featureNS])) {\n              context.serializers[featureNS][key] = makeChildAppender(writeStringTextNode);\n            }\n          }\n        }\n      }\n    }\n    const item = Object.assign({}, context);\n    item.node = node;\n    pushSerializeAndPop(/** @type {import(\"../xml.js\").NodeStackItem} */\n    item, context.serializers, makeSimpleNodeFactory(undefined, featureNS), values, objectStack, keys);\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeFeatureMembers_(node, features, objectStack) {\n    const context = /** @type {Object} */objectStack[objectStack.length - 1];\n    const featureType = context['featureType'];\n    const featureNS = context['featureNS'];\n    /** @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>} */\n    const serializers = {};\n    serializers[featureNS] = {};\n    serializers[featureNS][featureType] = makeChildAppender(this.writeFeatureElement, this);\n    const item = Object.assign({}, context);\n    item.node = node;\n    pushSerializeAndPop(/** @type {import(\"../xml.js\").NodeStackItem} */\n    item, serializers, makeSimpleNodeFactory(featureType, featureNS), features, objectStack);\n  }\n\n  /**\n   * @const\n   * @param {*} value Value.\n   * @param {Array<*>} objectStack Object stack.\n   * @param {string} [nodeName] Node name.\n   * @return {Node|undefined} Node.\n   * @private\n   */\n  MULTIGEOMETRY_MEMBER_NODE_FACTORY_(value, objectStack, nodeName) {\n    const parentNode = objectStack[objectStack.length - 1].node;\n    return createElementNS(this.namespace, MULTIGEOMETRY_TO_MEMBER_NODENAME[parentNode.nodeName]);\n  }\n\n  /**\n   * @const\n   * @param {*} value Value.\n   * @param {Array<*>} objectStack Object stack.\n   * @param {string} [nodeName] Node name.\n   * @return {Element|undefined} Node.\n   * @private\n   */\n  GEOMETRY_NODE_FACTORY_(value, objectStack, nodeName) {\n    const context = objectStack[objectStack.length - 1];\n    const multiSurface = context['multiSurface'];\n    const surface = context['surface'];\n    const curve = context['curve'];\n    const multiCurve = context['multiCurve'];\n    if (!Array.isArray(value)) {\n      nodeName = /** @type {import(\"../geom/Geometry.js\").default} */value.getType();\n      if (nodeName === 'MultiPolygon' && multiSurface === true) {\n        nodeName = 'MultiSurface';\n      } else if (nodeName === 'Polygon' && surface === true) {\n        nodeName = 'Surface';\n      } else if (nodeName === 'LineString' && curve === true) {\n        nodeName = 'Curve';\n      } else if (nodeName === 'MultiLineString' && multiCurve === true) {\n        nodeName = 'MultiCurve';\n      }\n    } else {\n      nodeName = 'Envelope';\n    }\n    return createElementNS(this.namespace, nodeName);\n  }\n\n  /**\n   * Encode a geometry in GML 3.1.1 Simple Features.\n   *\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Options.\n   * @return {Node} Node.\n   * @api\n   * @override\n   */\n  writeGeometryNode(geometry, options) {\n    options = this.adaptOptions(options);\n    const geom = createElementNS(this.namespace, 'geom');\n    const context = {\n      node: geom,\n      hasZ: this.hasZ,\n      srsName: this.srsName,\n      curve: this.curve_,\n      surface: this.surface_,\n      multiSurface: this.multiSurface_,\n      multiCurve: this.multiCurve_\n    };\n    if (options) {\n      Object.assign(context, options);\n    }\n    this.writeGeometryElement(geom, geometry, [context]);\n    return geom;\n  }\n\n  /**\n   * Encode an array of features in the GML 3.1.1 format as an XML node.\n   *\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Options.\n   * @return {Element} Node.\n   * @api\n   * @override\n   */\n  writeFeaturesNode(features, options) {\n    options = this.adaptOptions(options);\n    const node = createElementNS(this.namespace, 'featureMembers');\n    node.setAttributeNS(XML_SCHEMA_INSTANCE_URI, 'xsi:schemaLocation', this.schemaLocation);\n    const context = {\n      srsName: this.srsName,\n      hasZ: this.hasZ,\n      curve: this.curve_,\n      surface: this.surface_,\n      multiSurface: this.multiSurface_,\n      multiCurve: this.multiCurve_,\n      featureNS: this.featureNS,\n      featureType: this.featureType\n    };\n    if (options) {\n      Object.assign(context, options);\n    }\n    this.writeFeatureMembers_(node, features, [context]);\n    return node;\n  }\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.GEOMETRY_FLAT_COORDINATES_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'pos': makeReplacer(GML3.prototype.readFlatPos),\n    'posList': makeReplacer(GML3.prototype.readFlatPosList),\n    'coordinates': makeReplacer(GML2.prototype.readFlatCoordinates)\n  }\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.FLAT_LINEAR_RINGS_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'interior': GML3.prototype.interiorParser,\n    'exterior': GML3.prototype.exteriorParser\n  }\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.GEOMETRY_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'Point': makeReplacer(GMLBase.prototype.readPoint),\n    'MultiPoint': makeReplacer(GMLBase.prototype.readMultiPoint),\n    'LineString': makeReplacer(GMLBase.prototype.readLineString),\n    'MultiLineString': makeReplacer(GMLBase.prototype.readMultiLineString),\n    'LinearRing': makeReplacer(GMLBase.prototype.readLinearRing),\n    'Polygon': makeReplacer(GMLBase.prototype.readPolygon),\n    'MultiPolygon': makeReplacer(GMLBase.prototype.readMultiPolygon),\n    'Surface': makeReplacer(GML3.prototype.readSurface),\n    'MultiSurface': makeReplacer(GML3.prototype.readMultiSurface),\n    'Curve': makeReplacer(GML3.prototype.readCurve),\n    'MultiCurve': makeReplacer(GML3.prototype.readMultiCurve),\n    'Envelope': makeReplacer(GML3.prototype.readEnvelope)\n  }\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.MULTICURVE_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'curveMember': makeArrayPusher(GML3.prototype.curveMemberParser),\n    'curveMembers': makeArrayPusher(GML3.prototype.curveMemberParser)\n  }\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.MULTISURFACE_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'surfaceMember': makeArrayPusher(GML3.prototype.surfaceMemberParser),\n    'surfaceMembers': makeArrayPusher(GML3.prototype.surfaceMemberParser)\n  }\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.CURVEMEMBER_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'LineString': makeArrayPusher(GMLBase.prototype.readLineString),\n    'Curve': makeArrayPusher(GML3.prototype.readCurve)\n  }\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.SURFACEMEMBER_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'Polygon': makeArrayPusher(GMLBase.prototype.readPolygon),\n    'Surface': makeArrayPusher(GML3.prototype.readSurface)\n  }\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.SURFACE_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'patches': makeReplacer(GML3.prototype.readPatch)\n  }\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.CURVE_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'segments': makeReplacer(GML3.prototype.readSegment)\n  }\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.ENVELOPE_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'lowerCorner': makeArrayPusher(GML3.prototype.readFlatPosList),\n    'upperCorner': makeArrayPusher(GML3.prototype.readFlatPosList)\n  }\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.PATCHES_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'PolygonPatch': makeReplacer(GML3.prototype.readPolygonPatch)\n  }\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.SEGMENTS_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'LineStringSegment': makeArrayExtender(GML3.prototype.readLineStringSegment)\n  }\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGMLBase.prototype.RING_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'LinearRing': makeReplacer(GMLBase.prototype.readFlatLinearRing),\n    'Ring': makeReplacer(GML3.prototype.readFlatCurveRing)\n  }\n};\n\n/**\n * Encode an array of features in GML 3.1.1 Simple Features.\n *\n * @function\n * @param {Array<import(\"../Feature.js\").default>} features Features.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Options.\n * @return {string} Result.\n * @api\n */\nGML3.prototype.writeFeatures;\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML3.prototype.RING_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'exterior': makeChildAppender(GML3.prototype.writeRing),\n    'interior': makeChildAppender(GML3.prototype.writeRing)\n  }\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML3.prototype.ENVELOPE_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'lowerCorner': makeChildAppender(writeStringTextNode),\n    'upperCorner': makeChildAppender(writeStringTextNode)\n  }\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML3.prototype.SURFACEORPOLYGONMEMBER_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'surfaceMember': makeChildAppender(GML3.prototype.writeSurfaceOrPolygonMember),\n    'polygonMember': makeChildAppender(GML3.prototype.writeSurfaceOrPolygonMember)\n  }\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML3.prototype.POINTMEMBER_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'pointMember': makeChildAppender(GML3.prototype.writePointMember)\n  }\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML3.prototype.LINESTRINGORCURVEMEMBER_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'lineStringMember': makeChildAppender(GML3.prototype.writeLineStringOrCurveMember),\n    'curveMember': makeChildAppender(GML3.prototype.writeLineStringOrCurveMember)\n  }\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML3.prototype.GEOMETRY_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'Curve': makeChildAppender(GML3.prototype.writeCurveOrLineString),\n    'MultiCurve': makeChildAppender(GML3.prototype.writeMultiCurveOrLineString),\n    'Point': makeChildAppender(GML3.prototype.writePoint),\n    'MultiPoint': makeChildAppender(GML3.prototype.writeMultiPoint),\n    'LineString': makeChildAppender(GML3.prototype.writeCurveOrLineString),\n    'MultiLineString': makeChildAppender(GML3.prototype.writeMultiCurveOrLineString),\n    'LinearRing': makeChildAppender(GML3.prototype.writeLinearRing),\n    'Polygon': makeChildAppender(GML3.prototype.writeSurfaceOrPolygon),\n    'MultiPolygon': makeChildAppender(GML3.prototype.writeMultiSurfaceOrPolygon),\n    'Surface': makeChildAppender(GML3.prototype.writeSurfaceOrPolygon),\n    'MultiSurface': makeChildAppender(GML3.prototype.writeMultiSurfaceOrPolygon),\n    'Envelope': makeChildAppender(GML3.prototype.writeEnvelope)\n  }\n};\nexport default GML3;", "/**\n * @module ol/format/GML\n */\nimport GML3 from './GML3.js';\n\n/**\n * Feature format for reading and writing data in the GML format\n * version 3.1.1.\n * Currently only supports GML 3.1.1 Simple Features profile.\n *\n * @class\n * @param {import(\"./GMLBase.js\").Options} [options]\n *     Optional configuration object.\n * @api\n */\nconst GML = GML3;\n\n/**\n * Encode an array of features in GML 3.1.1 Simple Features.\n *\n * @function\n * @param {Array<import(\"../Feature.js\").default>} features Features.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Options.\n * @return {string} Result.\n * @api\n */\nGML.prototype.writeFeatures;\n\n/**\n * Encode an array of features in the GML 3.1.1 format as an XML node.\n *\n * @function\n * @param {Array<import(\"../Feature.js\").default>} features Features.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Options.\n * @return {Node} Node.\n * @api\n */\nGML.prototype.writeFeaturesNode;\nexport default GML;", "/**\n * @module ol/format/GPX\n */\nimport Feature from '../Feature.js';\nimport LineString from '../geom/LineString.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport Point from '../geom/Point.js';\nimport XMLFeature from './XMLFeature.js';\nimport { OBJECT_PROPERTY_NODE_FACTORY, XML_SCHEMA_INSTANCE_URI, createElementNS, isDocument, makeArrayPusher, makeArraySerializer, makeChildAppender, makeObjectPropertySetter, makeSequence, makeSimpleNodeFactory, makeStructureNS, parse, parseNode, pushParseAndPop, pushSerializeAndPop } from '../xml.js';\nimport { get as getProjection } from '../proj.js';\nimport { readDateTime, readDecimal, readPositiveInteger, readString, writeDateTimeTextNode, writeDecimalTextNode, writeNonNegativeIntegerTextNode, writeStringTextNode } from './xsd.js';\nimport { transformGeometryWithOptions } from './Feature.js';\n\n/**\n * @const\n * @type {Array<null|string>}\n */\nconst NAMESPACE_URIS = [null, 'http://www.topografix.com/GPX/1/0', 'http://www.topografix.com/GPX/1/1'];\n\n/**\n * @const\n * @type {string}\n */\nconst SCHEMA_LOCATION = 'http://www.topografix.com/GPX/1/1 ' + 'http://www.topografix.com/GPX/1/1/gpx.xsd';\n\n/**\n * @const\n * @type {Object<string, function(Node, Array<*>): (Feature|undefined)>}\n */\nconst FEATURE_READER = {\n  'rte': readRte,\n  'trk': readTrk,\n  'wpt': readWpt\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst GPX_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'rte': makeArrayPusher(readRte),\n  'trk': makeArrayPusher(readTrk),\n  'wpt': makeArrayPusher(readWpt)\n});\n\n/**\n * @typedef {Object} GPXLink\n * @property {string} [text] text\n * @property {string} [type] type\n */\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst LINK_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'text': makeObjectPropertySetter(readString, 'linkText'),\n  'type': makeObjectPropertySetter(readString, 'linkType')\n});\n\n/**\n * @typedef {Object} GPXAuthor\n * @property {string} [name] name\n * @property {string} [email] email\n * @property {GPXLink} [link] link\n */\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst AUTHOR_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'name': makeObjectPropertySetter(readString),\n  'email': parseEmail,\n  'link': parseLink\n});\n\n/**\n * @typedef {Object} GPXMetadata\n * @property {string} [name] name\n * @property {string} [desc] desc\n * @property {GPXAuthor} [author] author\n * @property {GPXLink} [link] link\n * @property {number} [time] time\n * @property {string} [keywords] keywords\n * @property {Array<number>} [bounds] bounds\n * @property {Object} [extensions] extensions\n *\n */\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst METADATA_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'name': makeObjectPropertySetter(readString),\n  'desc': makeObjectPropertySetter(readString),\n  'author': makeObjectPropertySetter(readAuthor),\n  'copyright': makeObjectPropertySetter(readCopyright),\n  'link': parseLink,\n  'time': makeObjectPropertySetter(readDateTime),\n  'keywords': makeObjectPropertySetter(readString),\n  'bounds': parseBounds,\n  'extensions': parseExtensions\n});\n\n/**\n * @typedef {Object} GPXCopyright\n * @property {string} [author] author\n * @property {number} [year] year\n * @property {string} [license] license\n */\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst COPYRIGHT_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'year': makeObjectPropertySetter(readPositiveInteger),\n  'license': makeObjectPropertySetter(readString)\n});\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\n// @ts-ignore\nconst GPX_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\n  'rte': makeChildAppender(writeRte),\n  'trk': makeChildAppender(writeTrk),\n  'wpt': makeChildAppender(writeWpt)\n});\n\n/**\n * @typedef {Object} Options\n * @property {function(Feature, Node):void} [readExtensions] Callback function\n * to process `extensions` nodes. To prevent memory leaks, this callback function must\n * not store any references to the node. Note that the `extensions`\n * node is not allowed in GPX 1.0. Moreover, only `extensions`\n * nodes from `wpt`, `rte` and `trk` can be processed, as those are\n * directly mapped to a feature.\n */\n\n/**\n * @typedef {Object} LayoutOptions\n * @property {boolean} [hasZ] HasZ.\n * @property {boolean} [hasM] HasM.\n */\n\n/**\n * @classdesc\n * Feature format for reading and writing data in the GPX format.\n *\n * Note that {@link module:ol/format/GPX~GPX#readFeature} only reads the first\n * feature of the source.\n *\n * When reading, routes (`<rte>`) are converted into LineString geometries, and\n * tracks (`<trk>`) into MultiLineString. Any properties on route and track\n * waypoints are ignored.\n *\n * When writing, LineString geometries are output as routes (`<rte>`), and\n * MultiLineString as tracks (`<trk>`).\n *\n * @api\n */\nclass GPX extends XMLFeature {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    super();\n    options = options ? options : {};\n\n    /**\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n    this.dataProjection = getProjection('EPSG:4326');\n\n    /**\n     * @type {function(Feature, Node): void|undefined}\n     * @private\n     */\n    this.readExtensions_ = options.readExtensions;\n  }\n\n  /**\n   * @param {Array<Feature>} features List of features.\n   * @private\n   */\n  handleReadExtensions_(features) {\n    if (!features) {\n      features = [];\n    }\n    for (let i = 0, ii = features.length; i < ii; ++i) {\n      const feature = features[i];\n      if (this.readExtensions_) {\n        const extensionsNode = feature.get('extensionsNode_') || null;\n        this.readExtensions_(feature, extensionsNode);\n      }\n      feature.set('extensionsNode_', undefined);\n    }\n  }\n\n  /**\n   * Reads a GPX file's metadata tag, reading among other things:\n   *   - the name and description of this GPX\n   *   - its author\n   *   - the copyright associated with this GPX file\n   *\n   * Will return null if no metadata tag is present (or no valid source is given).\n   *\n   * @param {Document|Element|Object|string} source Source.\n   * @return {GPXMetadata | null} Metadata\n   * @api\n   */\n  readMetadata(source) {\n    if (!source) {\n      return null;\n    }\n    if (typeof source === 'string') {\n      return this.readMetadataFromDocument(parse(source));\n    }\n    if (isDocument(source)) {\n      return this.readMetadataFromDocument(/** @type {Document} */source);\n    }\n    return this.readMetadataFromNode(source);\n  }\n\n  /**\n   * @param {Document} doc Document.\n   * @return {GPXMetadata | null} Metadata\n   */\n  readMetadataFromDocument(doc) {\n    for (let n = /** @type {Node} */doc.firstChild; n; n = n.nextSibling) {\n      if (n.nodeType === Node.ELEMENT_NODE) {\n        const metadata = this.readMetadataFromNode(/** @type {Element} */n);\n        if (metadata) {\n          return metadata;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @return {Object} Metadata\n   */\n  readMetadataFromNode(node) {\n    if (!NAMESPACE_URIS.includes(node.namespaceURI)) {\n      return null;\n    }\n    for (let n = node.firstElementChild; n; n = n.nextElementSibling) {\n      if (NAMESPACE_URIS.includes(n.namespaceURI) && n.localName === 'metadata') {\n        return pushParseAndPop({}, METADATA_PARSERS, n, []);\n      }\n    }\n    return null;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Options.\n   * @return {import(\"../Feature.js\").default} Feature.\n   * @override\n   */\n  readFeatureFromNode(node, options) {\n    if (!NAMESPACE_URIS.includes(node.namespaceURI)) {\n      return null;\n    }\n    const featureReader = FEATURE_READER[node.localName];\n    if (!featureReader) {\n      return null;\n    }\n    const feature = featureReader(node, [this.getReadOptions(node, options)]);\n    if (!feature) {\n      return null;\n    }\n    this.handleReadExtensions_([feature]);\n    return feature;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Options.\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   * @override\n   */\n  readFeaturesFromNode(node, options) {\n    if (!NAMESPACE_URIS.includes(node.namespaceURI)) {\n      return [];\n    }\n    if (node.localName == 'gpx') {\n      /** @type {Array<Feature>} */\n      const features = pushParseAndPop([], GPX_PARSERS, node, [this.getReadOptions(node, options)]);\n      if (features) {\n        this.handleReadExtensions_(features);\n        return features;\n      }\n      return [];\n    }\n    return [];\n  }\n\n  /**\n   * Encode an array of features in the GPX format as an XML node.\n   * LineString geometries are output as routes (`<rte>`), and MultiLineString\n   * as tracks (`<trk>`).\n   *\n   * @param {Array<Feature>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Options.\n   * @return {Node} Node.\n   * @api\n   * @override\n   */\n  writeFeaturesNode(features, options) {\n    options = this.adaptOptions(options);\n    //FIXME Serialize metadata\n    const gpx = createElementNS('http://www.topografix.com/GPX/1/1', 'gpx');\n    const xmlnsUri = 'http://www.w3.org/2000/xmlns/';\n    gpx.setAttributeNS(xmlnsUri, 'xmlns:xsi', XML_SCHEMA_INSTANCE_URI);\n    gpx.setAttributeNS(XML_SCHEMA_INSTANCE_URI, 'xsi:schemaLocation', SCHEMA_LOCATION);\n    gpx.setAttribute('version', '1.1');\n    gpx.setAttribute('creator', 'OpenLayers');\n    pushSerializeAndPop(/** @type {import(\"../xml.js\").NodeStackItem} */\n    {\n      node: gpx\n    }, GPX_SERIALIZERS, GPX_NODE_FACTORY, features, [options]);\n    return gpx;\n  }\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst RTE_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'name': makeObjectPropertySetter(readString),\n  'cmt': makeObjectPropertySetter(readString),\n  'desc': makeObjectPropertySetter(readString),\n  'src': makeObjectPropertySetter(readString),\n  'link': parseLink,\n  'number': makeObjectPropertySetter(readPositiveInteger),\n  'extensions': parseExtensions,\n  'type': makeObjectPropertySetter(readString),\n  'rtept': parseRtePt\n});\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst RTEPT_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'ele': makeObjectPropertySetter(readDecimal),\n  'time': makeObjectPropertySetter(readDateTime)\n});\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst TRK_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'name': makeObjectPropertySetter(readString),\n  'cmt': makeObjectPropertySetter(readString),\n  'desc': makeObjectPropertySetter(readString),\n  'src': makeObjectPropertySetter(readString),\n  'link': parseLink,\n  'number': makeObjectPropertySetter(readPositiveInteger),\n  'type': makeObjectPropertySetter(readString),\n  'extensions': parseExtensions,\n  'trkseg': parseTrkSeg\n});\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst TRKSEG_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'trkpt': parseTrkPt\n});\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst TRKPT_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'ele': makeObjectPropertySetter(readDecimal),\n  'time': makeObjectPropertySetter(readDateTime)\n});\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst WPT_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'ele': makeObjectPropertySetter(readDecimal),\n  'time': makeObjectPropertySetter(readDateTime),\n  'magvar': makeObjectPropertySetter(readDecimal),\n  'geoidheight': makeObjectPropertySetter(readDecimal),\n  'name': makeObjectPropertySetter(readString),\n  'cmt': makeObjectPropertySetter(readString),\n  'desc': makeObjectPropertySetter(readString),\n  'src': makeObjectPropertySetter(readString),\n  'link': parseLink,\n  'sym': makeObjectPropertySetter(readString),\n  'type': makeObjectPropertySetter(readString),\n  'fix': makeObjectPropertySetter(readString),\n  'sat': makeObjectPropertySetter(readPositiveInteger),\n  'hdop': makeObjectPropertySetter(readDecimal),\n  'vdop': makeObjectPropertySetter(readDecimal),\n  'pdop': makeObjectPropertySetter(readDecimal),\n  'ageofdgpsdata': makeObjectPropertySetter(readDecimal),\n  'dgpsid': makeObjectPropertySetter(readPositiveInteger),\n  'extensions': parseExtensions\n});\n\n/**\n * @const\n * @type {Array<string>}\n */\nconst LINK_SEQUENCE = ['text', 'type'];\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\n// @ts-ignore\nconst LINK_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\n  'text': makeChildAppender(writeStringTextNode),\n  'type': makeChildAppender(writeStringTextNode)\n});\n\n/**\n * @const\n * @type {Object<string, Array<string>>}\n */\n// @ts-ignore\nconst RTE_SEQUENCE = makeStructureNS(NAMESPACE_URIS, ['name', 'cmt', 'desc', 'src', 'link', 'number', 'type', 'rtept']);\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\n// @ts-ignore\nconst RTE_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\n  'name': makeChildAppender(writeStringTextNode),\n  'cmt': makeChildAppender(writeStringTextNode),\n  'desc': makeChildAppender(writeStringTextNode),\n  'src': makeChildAppender(writeStringTextNode),\n  'link': makeChildAppender(writeLink),\n  'number': makeChildAppender(writeNonNegativeIntegerTextNode),\n  'type': makeChildAppender(writeStringTextNode),\n  'rtept': makeArraySerializer(makeChildAppender(writeWptType))\n});\n\n/**\n * @const\n * @type {Object<string, Array<string>>}\n */\n// @ts-ignore\nconst RTEPT_TYPE_SEQUENCE = makeStructureNS(NAMESPACE_URIS, ['ele', 'time']);\n\n/**\n * @const\n * @type {Object<string, Array<string>>}\n */\n// @ts-ignore\nconst TRK_SEQUENCE = makeStructureNS(NAMESPACE_URIS, ['name', 'cmt', 'desc', 'src', 'link', 'number', 'type', 'trkseg']);\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\n// @ts-ignore\nconst TRK_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\n  'name': makeChildAppender(writeStringTextNode),\n  'cmt': makeChildAppender(writeStringTextNode),\n  'desc': makeChildAppender(writeStringTextNode),\n  'src': makeChildAppender(writeStringTextNode),\n  'link': makeChildAppender(writeLink),\n  'number': makeChildAppender(writeNonNegativeIntegerTextNode),\n  'type': makeChildAppender(writeStringTextNode),\n  'trkseg': makeArraySerializer(makeChildAppender(writeTrkSeg))\n});\n\n/**\n * @const\n * @type {function(*, Array<*>, string=): (Node|undefined)}\n */\nconst TRKSEG_NODE_FACTORY = makeSimpleNodeFactory('trkpt');\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\n// @ts-ignore\nconst TRKSEG_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\n  'trkpt': makeChildAppender(writeWptType)\n});\n\n/**\n * @const\n * @type {Object<string, Array<string>>}\n */\n// @ts-ignore\nconst WPT_TYPE_SEQUENCE = makeStructureNS(NAMESPACE_URIS, ['ele', 'time', 'magvar', 'geoidheight', 'name', 'cmt', 'desc', 'src', 'link', 'sym', 'type', 'fix', 'sat', 'hdop', 'vdop', 'pdop', 'ageofdgpsdata', 'dgpsid']);\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\n// @ts-ignore\nconst WPT_TYPE_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\n  'ele': makeChildAppender(writeDecimalTextNode),\n  'time': makeChildAppender(writeDateTimeTextNode),\n  'magvar': makeChildAppender(writeDecimalTextNode),\n  'geoidheight': makeChildAppender(writeDecimalTextNode),\n  'name': makeChildAppender(writeStringTextNode),\n  'cmt': makeChildAppender(writeStringTextNode),\n  'desc': makeChildAppender(writeStringTextNode),\n  'src': makeChildAppender(writeStringTextNode),\n  'link': makeChildAppender(writeLink),\n  'sym': makeChildAppender(writeStringTextNode),\n  'type': makeChildAppender(writeStringTextNode),\n  'fix': makeChildAppender(writeStringTextNode),\n  'sat': makeChildAppender(writeNonNegativeIntegerTextNode),\n  'hdop': makeChildAppender(writeDecimalTextNode),\n  'vdop': makeChildAppender(writeDecimalTextNode),\n  'pdop': makeChildAppender(writeDecimalTextNode),\n  'ageofdgpsdata': makeChildAppender(writeDecimalTextNode),\n  'dgpsid': makeChildAppender(writeNonNegativeIntegerTextNode)\n});\n\n/**\n * @const\n * @type {Object<string, string>}\n */\nconst GEOMETRY_TYPE_TO_NODENAME = {\n  'Point': 'wpt',\n  'LineString': 'rte',\n  'MultiLineString': 'trk'\n};\n\n/**\n * @param {*} value Value.\n * @param {Array<*>} objectStack Object stack.\n * @param {string} [nodeName] Node name.\n * @return {Node|undefined} Node.\n */\nfunction GPX_NODE_FACTORY(value, objectStack, nodeName) {\n  const geometry = /** @type {Feature} */value.getGeometry();\n  if (geometry) {\n    const nodeName = GEOMETRY_TYPE_TO_NODENAME[geometry.getType()];\n    if (nodeName) {\n      const parentNode = objectStack[objectStack.length - 1].node;\n      return createElementNS(parentNode.namespaceURI, nodeName);\n    }\n  }\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {LayoutOptions} layoutOptions Layout options.\n * @param {Element} node Node.\n * @param {!Object} values Values.\n * @return {Array<number>} Flat coordinates.\n */\nfunction appendCoordinate(flatCoordinates, layoutOptions, node, values) {\n  flatCoordinates.push(parseFloat(node.getAttribute('lon')), parseFloat(node.getAttribute('lat')));\n  if ('ele' in values) {\n    flatCoordinates.push(/** @type {number} */values['ele']);\n    delete values['ele'];\n    layoutOptions.hasZ = true;\n  } else {\n    flatCoordinates.push(0);\n  }\n  if ('time' in values) {\n    flatCoordinates.push(/** @type {number} */values['time']);\n    delete values['time'];\n    layoutOptions.hasM = true;\n  } else {\n    flatCoordinates.push(0);\n  }\n  return flatCoordinates;\n}\n\n/**\n * Choose GeometryLayout based on flags in layoutOptions and adjust flatCoordinates\n * and ends arrays by shrinking them accordingly (removing unused zero entries).\n *\n * @param {LayoutOptions} layoutOptions Layout options.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {Array<number>} [ends] Ends.\n * @return {import(\"../geom/Geometry.js\").GeometryLayout} Layout.\n */\nfunction applyLayoutOptions(layoutOptions, flatCoordinates, ends) {\n  /** @type {import(\"../geom/Geometry.js\").GeometryLayout} */\n  let layout = 'XY';\n  let stride = 2;\n  if (layoutOptions.hasZ && layoutOptions.hasM) {\n    layout = 'XYZM';\n    stride = 4;\n  } else if (layoutOptions.hasZ) {\n    layout = 'XYZ';\n    stride = 3;\n  } else if (layoutOptions.hasM) {\n    layout = 'XYM';\n    stride = 3;\n  }\n  if (stride !== 4) {\n    for (let i = 0, ii = flatCoordinates.length / 4; i < ii; i++) {\n      flatCoordinates[i * stride] = flatCoordinates[i * 4];\n      flatCoordinates[i * stride + 1] = flatCoordinates[i * 4 + 1];\n      if (layoutOptions.hasZ) {\n        flatCoordinates[i * stride + 2] = flatCoordinates[i * 4 + 2];\n      }\n      if (layoutOptions.hasM) {\n        flatCoordinates[i * stride + 2] = flatCoordinates[i * 4 + 3];\n      }\n    }\n    flatCoordinates.length = flatCoordinates.length / 4 * stride;\n    if (ends) {\n      for (let i = 0, ii = ends.length; i < ii; i++) {\n        ends[i] = ends[i] / 4 * stride;\n      }\n    }\n  }\n  return layout;\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<any>} objectStack Object stack.\n * @return {GPXAuthor | undefined} Person object.\n */\nfunction readAuthor(node, objectStack) {\n  const values = pushParseAndPop({}, AUTHOR_PARSERS, node, objectStack);\n  if (values) {\n    return values;\n  }\n  return undefined;\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<any>} objectStack Object stack.\n * @return {GPXCopyright | undefined} Person object.\n */\nfunction readCopyright(node, objectStack) {\n  const values = pushParseAndPop({}, COPYRIGHT_PARSERS, node, objectStack);\n  if (values) {\n    const author = node.getAttribute('author');\n    if (author !== null) {\n      values['author'] = author;\n    }\n    return values;\n  }\n  return undefined;\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction parseBounds(node, objectStack) {\n  const values = /** @type {Object} */objectStack[objectStack.length - 1];\n  const minlat = node.getAttribute('minlat');\n  const minlon = node.getAttribute('minlon');\n  const maxlat = node.getAttribute('maxlat');\n  const maxlon = node.getAttribute('maxlon');\n  if (minlon !== null && minlat !== null && maxlon !== null && maxlat !== null) {\n    values['bounds'] = [[parseFloat(minlon), parseFloat(minlat)], [parseFloat(maxlon), parseFloat(maxlat)]];\n  }\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction parseEmail(node, objectStack) {\n  const values = /** @type {Object} */objectStack[objectStack.length - 1];\n  const id = node.getAttribute('id');\n  const domain = node.getAttribute('domain');\n  if (id !== null && domain !== null) {\n    values['email'] = `${id}@${domain}`;\n  }\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction parseLink(node, objectStack) {\n  const values = /** @type {Object} */objectStack[objectStack.length - 1];\n  const href = node.getAttribute('href');\n  if (href !== null) {\n    values['link'] = href;\n  }\n  parseNode(LINK_PARSERS, node, objectStack);\n}\n\n/**\n * @param {Node} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction parseExtensions(node, objectStack) {\n  const values = /** @type {Object} */objectStack[objectStack.length - 1];\n  values['extensionsNode_'] = node;\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction parseRtePt(node, objectStack) {\n  const values = pushParseAndPop({}, RTEPT_PARSERS, node, objectStack);\n  if (values) {\n    const rteValues = /** @type {!Object} */\n    objectStack[objectStack.length - 1];\n    const flatCoordinates = /** @type {Array<number>} */\n    rteValues['flatCoordinates'];\n    const layoutOptions = /** @type {LayoutOptions} */\n    rteValues['layoutOptions'];\n    appendCoordinate(flatCoordinates, layoutOptions, node, values);\n  }\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction parseTrkPt(node, objectStack) {\n  const values = pushParseAndPop({}, TRKPT_PARSERS, node, objectStack);\n  if (values) {\n    const trkValues = /** @type {!Object} */\n    objectStack[objectStack.length - 1];\n    const flatCoordinates = /** @type {Array<number>} */\n    trkValues['flatCoordinates'];\n    const layoutOptions = /** @type {LayoutOptions} */\n    trkValues['layoutOptions'];\n    appendCoordinate(flatCoordinates, layoutOptions, node, values);\n  }\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction parseTrkSeg(node, objectStack) {\n  const values = /** @type {Object} */objectStack[objectStack.length - 1];\n  parseNode(TRKSEG_PARSERS, node, objectStack);\n  const flatCoordinates = /** @type {Array<number>} */\n  values['flatCoordinates'];\n  const ends = /** @type {Array<number>} */values['ends'];\n  ends.push(flatCoordinates.length);\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Feature|undefined} Track.\n */\nfunction readRte(node, objectStack) {\n  const options = /** @type {import(\"./Feature.js\").ReadOptions} */\n  objectStack[0];\n  const values = pushParseAndPop({\n    'flatCoordinates': [],\n    'layoutOptions': {}\n  }, RTE_PARSERS, node, objectStack);\n  if (!values) {\n    return undefined;\n  }\n  const flatCoordinates = /** @type {Array<number>} */\n  values['flatCoordinates'];\n  delete values['flatCoordinates'];\n  const layoutOptions = /** @type {LayoutOptions} */values['layoutOptions'];\n  delete values['layoutOptions'];\n  const layout = applyLayoutOptions(layoutOptions, flatCoordinates);\n  const geometry = new LineString(flatCoordinates, layout);\n  transformGeometryWithOptions(geometry, false, options);\n  const feature = new Feature(geometry);\n  feature.setProperties(values, true);\n  return feature;\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Feature|undefined} Track.\n */\nfunction readTrk(node, objectStack) {\n  const options = /** @type {import(\"./Feature.js\").ReadOptions} */\n  objectStack[0];\n  const values = pushParseAndPop({\n    'flatCoordinates': [],\n    'ends': [],\n    'layoutOptions': {}\n  }, TRK_PARSERS, node, objectStack);\n  if (!values) {\n    return undefined;\n  }\n  const flatCoordinates = /** @type {Array<number>} */\n  values['flatCoordinates'];\n  delete values['flatCoordinates'];\n  const ends = /** @type {Array<number>} */values['ends'];\n  delete values['ends'];\n  const layoutOptions = /** @type {LayoutOptions} */values['layoutOptions'];\n  delete values['layoutOptions'];\n  const layout = applyLayoutOptions(layoutOptions, flatCoordinates, ends);\n  const geometry = new MultiLineString(flatCoordinates, layout, ends);\n  transformGeometryWithOptions(geometry, false, options);\n  const feature = new Feature(geometry);\n  feature.setProperties(values, true);\n  return feature;\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Feature|undefined} Waypoint.\n */\nfunction readWpt(node, objectStack) {\n  const options = /** @type {import(\"./Feature.js\").ReadOptions} */\n  objectStack[0];\n  const values = pushParseAndPop({}, WPT_PARSERS, node, objectStack);\n  if (!values) {\n    return undefined;\n  }\n  const layoutOptions = /** @type {LayoutOptions} */{};\n  const coordinates = appendCoordinate([], layoutOptions, node, values);\n  const layout = applyLayoutOptions(layoutOptions, coordinates);\n  const geometry = new Point(coordinates, layout);\n  transformGeometryWithOptions(geometry, false, options);\n  const feature = new Feature(geometry);\n  feature.setProperties(values, true);\n  return feature;\n}\n\n/**\n * @param {Element} node Node.\n * @param {string} value Value for the link's `href` attribute.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeLink(node, value, objectStack) {\n  node.setAttribute('href', value);\n  const context = objectStack[objectStack.length - 1];\n  const properties = context['properties'];\n  const link = [properties['linkText'], properties['linkType']];\n  pushSerializeAndPop(/** @type {import(\"../xml.js\").NodeStackItem} */{\n    node: node\n  }, LINK_SERIALIZERS, OBJECT_PROPERTY_NODE_FACTORY, link, objectStack, LINK_SEQUENCE);\n}\n\n/**\n * @param {Element} node Node.\n * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction writeWptType(node, coordinate, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const parentNode = context.node;\n  const namespaceURI = parentNode.namespaceURI;\n  const properties = context['properties'];\n  //FIXME Projection handling\n  node.setAttributeNS(null, 'lat', String(coordinate[1]));\n  node.setAttributeNS(null, 'lon', String(coordinate[0]));\n  const geometryLayout = context['geometryLayout'];\n  switch (geometryLayout) {\n    case 'XYZM':\n      if (coordinate[3] !== 0) {\n        properties['time'] = coordinate[3];\n      }\n    // fall through\n    case 'XYZ':\n      if (coordinate[2] !== 0) {\n        properties['ele'] = coordinate[2];\n      }\n      break;\n    case 'XYM':\n      if (coordinate[2] !== 0) {\n        properties['time'] = coordinate[2];\n      }\n      break;\n    default:\n    // pass\n  }\n  const orderedKeys = node.nodeName == 'rtept' ? RTEPT_TYPE_SEQUENCE[namespaceURI] : WPT_TYPE_SEQUENCE[namespaceURI];\n  const values = makeSequence(properties, orderedKeys);\n  pushSerializeAndPop(/** @type {import(\"../xml.js\").NodeStackItem} */\n  {\n    node: node,\n    'properties': properties\n  }, WPT_TYPE_SERIALIZERS, OBJECT_PROPERTY_NODE_FACTORY, values, objectStack, orderedKeys);\n}\n\n/**\n * @param {Node} node Node.\n * @param {Feature} feature Feature.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction writeRte(node, feature, objectStack) {\n  const options = /** @type {import(\"./Feature.js\").WriteOptions} */\n  objectStack[0];\n  const properties = feature.getProperties();\n  const context = {\n    node: node\n  };\n  context['properties'] = properties;\n  const geometry = feature.getGeometry();\n  if (geometry.getType() == 'LineString') {\n    const lineString = /** @type {LineString} */\n    transformGeometryWithOptions(geometry, true, options);\n    context['geometryLayout'] = lineString.getLayout();\n    properties['rtept'] = lineString.getCoordinates();\n  }\n  const parentNode = objectStack[objectStack.length - 1].node;\n  const orderedKeys = RTE_SEQUENCE[parentNode.namespaceURI];\n  const values = makeSequence(properties, orderedKeys);\n  pushSerializeAndPop(context, RTE_SERIALIZERS, OBJECT_PROPERTY_NODE_FACTORY, values, objectStack, orderedKeys);\n}\n\n/**\n * @param {Element} node Node.\n * @param {Feature} feature Feature.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction writeTrk(node, feature, objectStack) {\n  const options = /** @type {import(\"./Feature.js\").WriteOptions} */\n  objectStack[0];\n  const properties = feature.getProperties();\n  /** @type {import(\"../xml.js\").NodeStackItem} */\n  const context = {\n    node: node\n  };\n  context['properties'] = properties;\n  const geometry = feature.getGeometry();\n  if (geometry.getType() == 'MultiLineString') {\n    const multiLineString = /** @type {MultiLineString} */\n    transformGeometryWithOptions(geometry, true, options);\n    properties['trkseg'] = multiLineString.getLineStrings();\n  }\n  const parentNode = objectStack[objectStack.length - 1].node;\n  const orderedKeys = TRK_SEQUENCE[parentNode.namespaceURI];\n  const values = makeSequence(properties, orderedKeys);\n  pushSerializeAndPop(context, TRK_SERIALIZERS, OBJECT_PROPERTY_NODE_FACTORY, values, objectStack, orderedKeys);\n}\n\n/**\n * @param {Element} node Node.\n * @param {LineString} lineString LineString.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction writeTrkSeg(node, lineString, objectStack) {\n  /** @type {import(\"../xml.js\").NodeStackItem} */\n  const context = {\n    node: node\n  };\n  context['geometryLayout'] = lineString.getLayout();\n  context['properties'] = {};\n  pushSerializeAndPop(context, TRKSEG_SERIALIZERS, TRKSEG_NODE_FACTORY, lineString.getCoordinates(), objectStack);\n}\n\n/**\n * @param {Element} node Node.\n * @param {Feature} feature Feature.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction writeWpt(node, feature, objectStack) {\n  const options = /** @type {import(\"./Feature.js\").WriteOptions} */\n  objectStack[0];\n  const context = objectStack[objectStack.length - 1];\n  context['properties'] = feature.getProperties();\n  const geometry = feature.getGeometry();\n  if (geometry.getType() == 'Point') {\n    const point = /** @type {Point} */\n    transformGeometryWithOptions(geometry, true, options);\n    context['geometryLayout'] = point.getLayout();\n    writeWptType(node, point.getCoordinates(), objectStack);\n  }\n}\nexport default GPX;", "/**\n * @module ol/format/KML\n */\nimport Feature from '../Feature.js';\nimport Fill from '../style/Fill.js';\nimport GeometryCollection from '../geom/GeometryCollection.js';\nimport Icon from '../style/Icon.js';\nimport ImageState from '../ImageState.js';\nimport LineString from '../geom/LineString.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPoint from '../geom/MultiPoint.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Point from '../geom/Point.js';\nimport Polygon from '../geom/Polygon.js';\nimport Stroke from '../style/Stroke.js';\nimport Style from '../style/Style.js';\nimport Text from '../style/Text.js';\nimport XMLFeature from './XMLFeature.js';\nimport { OBJECT_PROPERTY_NODE_FACTORY, XML_SCHEMA_INSTANCE_URI, createElementNS, getAllTextContent, isDocument, makeArrayExtender, makeArrayPusher, makeChildAppender, makeObjectPropertySetter, makeReplacer, makeSequence, makeSimpleNodeFactory, makeStructureNS, parse, parseNode, pushParseAndPop, pushSerializeAndPop } from '../xml.js';\nimport { asArray } from '../color.js';\nimport { extend } from '../array.js';\nimport { get as getProjection } from '../proj.js';\nimport { readBoolean, readDecimal, readString, writeBooleanTextNode, writeCDATASection, writeDecimalTextNode, writeStringTextNode } from './xsd.js';\nimport { toRadians } from '../math.js';\nimport { transformGeometryWithOptions } from './Feature.js';\n\n/**\n * @typedef {Object} Vec2\n * @property {number} x X coordinate.\n * @property {import(\"../style/Icon.js\").IconAnchorUnits} xunits Units of x.\n * @property {number} y Y coordinate.\n * @property {import(\"../style/Icon.js\").IconAnchorUnits} yunits Units of Y.\n * @property {import(\"../style/Icon.js\").IconOrigin} [origin] Origin.\n */\n\n/**\n * @typedef {Object} GxTrackObject\n * @property {Array<Array<number>>} coordinates Coordinates.\n * @property {Array<number>} whens Whens.\n */\n\n/**\n * @const\n * @type {Array<string>}\n */\nconst GX_NAMESPACE_URIS = ['http://www.google.com/kml/ext/2.2'];\n\n/**\n * @const\n * @type {Array<null|string>}\n */\nconst NAMESPACE_URIS = [null, 'http://earth.google.com/kml/2.0', 'http://earth.google.com/kml/2.1', 'http://earth.google.com/kml/2.2', 'http://www.opengis.net/kml/2.2'];\n\n/**\n * @const\n * @type {string}\n */\nconst SCHEMA_LOCATION = 'http://www.opengis.net/kml/2.2 ' + 'https://developers.google.com/kml/schema/kml22gx.xsd';\n\n/**\n * @type {Object<string, import(\"../style/Icon.js\").IconAnchorUnits>}\n */\nconst ICON_ANCHOR_UNITS_MAP = {\n  'fraction': 'fraction',\n  'pixels': 'pixels',\n  'insetPixels': 'pixels'\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst PLACEMARK_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'ExtendedData': extendedDataParser,\n  'Region': regionParser,\n  'MultiGeometry': makeObjectPropertySetter(readMultiGeometry, 'geometry'),\n  'LineString': makeObjectPropertySetter(readLineString, 'geometry'),\n  'LinearRing': makeObjectPropertySetter(readLinearRing, 'geometry'),\n  'Point': makeObjectPropertySetter(readPoint, 'geometry'),\n  'Polygon': makeObjectPropertySetter(readPolygon, 'geometry'),\n  'Style': makeObjectPropertySetter(readStyle),\n  'StyleMap': placemarkStyleMapParser,\n  'address': makeObjectPropertySetter(readString),\n  'description': makeObjectPropertySetter(readString),\n  'name': makeObjectPropertySetter(readString),\n  'open': makeObjectPropertySetter(readBoolean),\n  'phoneNumber': makeObjectPropertySetter(readString),\n  'styleUrl': makeObjectPropertySetter(readStyleURL),\n  'visibility': makeObjectPropertySetter(readBoolean)\n}, makeStructureNS(GX_NAMESPACE_URIS, {\n  'MultiTrack': makeObjectPropertySetter(readGxMultiTrack, 'geometry'),\n  'Track': makeObjectPropertySetter(readGxTrack, 'geometry')\n}));\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst NETWORK_LINK_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'ExtendedData': extendedDataParser,\n  'Region': regionParser,\n  'Link': linkParser,\n  'address': makeObjectPropertySetter(readString),\n  'description': makeObjectPropertySetter(readString),\n  'name': makeObjectPropertySetter(readString),\n  'open': makeObjectPropertySetter(readBoolean),\n  'phoneNumber': makeObjectPropertySetter(readString),\n  'visibility': makeObjectPropertySetter(readBoolean)\n});\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst LINK_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'href': makeObjectPropertySetter(readURI)\n});\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst CAMERA_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  Altitude: makeObjectPropertySetter(readDecimal),\n  Longitude: makeObjectPropertySetter(readDecimal),\n  Latitude: makeObjectPropertySetter(readDecimal),\n  Tilt: makeObjectPropertySetter(readDecimal),\n  AltitudeMode: makeObjectPropertySetter(readString),\n  Heading: makeObjectPropertySetter(readDecimal),\n  Roll: makeObjectPropertySetter(readDecimal)\n});\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst REGION_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'LatLonAltBox': latLonAltBoxParser,\n  'Lod': lodParser\n});\n\n/**\n * @const\n * @type {Object<string, Array<string>>}\n */\n// @ts-ignore\nconst KML_SEQUENCE = makeStructureNS(NAMESPACE_URIS, ['Document', 'Placemark']);\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\n// @ts-ignore\nconst KML_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\n  'Document': makeChildAppender(writeDocument),\n  'Placemark': makeChildAppender(writePlacemark)\n});\n\n/**\n * @type {import(\"../color.js\").Color}\n */\nlet DEFAULT_COLOR;\n\n/**\n * @type {Fill|null}\n */\nlet DEFAULT_FILL_STYLE = null;\n\n/**\n * Get the default fill style (or null if not yet set).\n * @return {Fill|null} The default fill style.\n */\nexport function getDefaultFillStyle() {\n  return DEFAULT_FILL_STYLE;\n}\n\n/**\n * @type {import(\"../size.js\").Size}\n */\nlet DEFAULT_IMAGE_STYLE_ANCHOR;\n\n/**\n * @type {import(\"../style/Icon.js\").IconAnchorUnits}\n */\nlet DEFAULT_IMAGE_STYLE_ANCHOR_X_UNITS;\n\n/**\n * @type {import(\"../style/Icon.js\").IconAnchorUnits}\n */\nlet DEFAULT_IMAGE_STYLE_ANCHOR_Y_UNITS;\n\n/**\n * @type {import(\"../size.js\").Size}\n */\nlet DEFAULT_IMAGE_STYLE_SIZE;\n\n/**\n * @type {string}\n */\nlet DEFAULT_IMAGE_STYLE_SRC;\n\n/**\n * @type {import(\"../style/Image.js\").default|null}\n */\nlet DEFAULT_IMAGE_STYLE = null;\n\n/**\n * Get the default image style (or null if not yet set).\n * @return {import(\"../style/Image.js\").default|null} The default image style.\n */\nexport function getDefaultImageStyle() {\n  return DEFAULT_IMAGE_STYLE;\n}\n\n/**\n * @type {string}\n */\nlet DEFAULT_NO_IMAGE_STYLE;\n\n/**\n * @type {Stroke|null}\n */\nlet DEFAULT_STROKE_STYLE = null;\n\n/**\n * Get the default stroke style (or null if not yet set).\n * @return {Stroke|null} The default stroke style.\n */\nexport function getDefaultStrokeStyle() {\n  return DEFAULT_STROKE_STYLE;\n}\n\n/**\n * @type {Stroke}\n */\nlet DEFAULT_TEXT_STROKE_STYLE;\n\n/**\n * @type {Text|null}\n */\nlet DEFAULT_TEXT_STYLE = null;\n\n/**\n * Get the default text style (or null if not yet set).\n * @return {Text|null} The default text style.\n */\nexport function getDefaultTextStyle() {\n  return DEFAULT_TEXT_STYLE;\n}\n\n/**\n * @type {Style|null}\n */\nlet DEFAULT_STYLE = null;\n\n/**\n * Get the default style (or null if not yet set).\n * @return {Style|null} The default style.\n */\nexport function getDefaultStyle() {\n  return DEFAULT_STYLE;\n}\n\n/**\n * @type {Array<Style>|null}\n */\nlet DEFAULT_STYLE_ARRAY = null;\n\n/**\n * Get the default style array (or null if not yet set).\n * @return {Array<Style>|null} The default style.\n */\nexport function getDefaultStyleArray() {\n  return DEFAULT_STYLE_ARRAY;\n}\n\n/**\n * Function that returns the scale needed to normalize an icon image to 32 pixels.\n * @param {import(\"../size.js\").Size} size Image size.\n * @return {number} Scale.\n */\nfunction scaleForSize(size) {\n  return 32 / Math.min(size[0], size[1]);\n}\nfunction createStyleDefaults() {\n  DEFAULT_COLOR = [255, 255, 255, 1];\n  DEFAULT_FILL_STYLE = new Fill({\n    color: DEFAULT_COLOR\n  });\n  DEFAULT_IMAGE_STYLE_ANCHOR = [20, 2];\n  DEFAULT_IMAGE_STYLE_ANCHOR_X_UNITS = 'pixels';\n  DEFAULT_IMAGE_STYLE_ANCHOR_Y_UNITS = 'pixels';\n  DEFAULT_IMAGE_STYLE_SIZE = [64, 64];\n  DEFAULT_IMAGE_STYLE_SRC = 'https://maps.google.com/mapfiles/kml/pushpin/ylw-pushpin.png';\n  DEFAULT_IMAGE_STYLE = new Icon({\n    anchor: DEFAULT_IMAGE_STYLE_ANCHOR,\n    anchorOrigin: 'bottom-left',\n    anchorXUnits: DEFAULT_IMAGE_STYLE_ANCHOR_X_UNITS,\n    anchorYUnits: DEFAULT_IMAGE_STYLE_ANCHOR_Y_UNITS,\n    crossOrigin: 'anonymous',\n    rotation: 0,\n    scale: scaleForSize(DEFAULT_IMAGE_STYLE_SIZE),\n    size: DEFAULT_IMAGE_STYLE_SIZE,\n    src: DEFAULT_IMAGE_STYLE_SRC\n  });\n  DEFAULT_NO_IMAGE_STYLE = 'NO_IMAGE';\n  DEFAULT_STROKE_STYLE = new Stroke({\n    color: DEFAULT_COLOR,\n    width: 1\n  });\n  DEFAULT_TEXT_STROKE_STYLE = new Stroke({\n    color: [51, 51, 51, 1],\n    width: 2\n  });\n  DEFAULT_TEXT_STYLE = new Text({\n    font: 'bold 16px Helvetica',\n    fill: DEFAULT_FILL_STYLE,\n    stroke: DEFAULT_TEXT_STROKE_STYLE,\n    scale: 0.8\n  });\n  DEFAULT_STYLE = new Style({\n    fill: DEFAULT_FILL_STYLE,\n    image: DEFAULT_IMAGE_STYLE,\n    text: DEFAULT_TEXT_STYLE,\n    stroke: DEFAULT_STROKE_STYLE,\n    zIndex: 0\n  });\n  DEFAULT_STYLE_ARRAY = [DEFAULT_STYLE];\n}\n\n/**\n * @type {HTMLTextAreaElement}\n */\nlet TEXTAREA;\n\n/**\n * A function that takes a url `{string}` and returns a url `{string}`.\n * Might be used to change an icon path or to substitute a\n * data url obtained from a KMZ array buffer.\n *\n * @typedef {function(string):string} IconUrlFunction\n * @api\n */\n\n/**\n * Function that returns a url unchanged.\n * @param {string} href Input url.\n * @return {string} Output url.\n */\nfunction defaultIconUrlFunction(href) {\n  return href;\n}\n\n/**\n * @typedef {Object} Options\n * @property {boolean} [extractStyles=true] Extract styles from the KML.\n * @property {boolean} [showPointNames=true] Show names as labels for placemarks which contain points.\n * @property {Array<Style>} [defaultStyle] Default style. The\n * default default style is the same as Google Earth.\n * @property {boolean} [writeStyles=true] Write styles into KML.\n * @property {null|string} [crossOrigin='anonymous'] The `crossOrigin` attribute for loaded images. Note that you must provide a\n * `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * @property {IconUrlFunction} [iconUrlFunction] Function that takes a url string and returns a url string.\n * Might be used to change an icon path or to substitute a data url obtained from a KMZ array buffer.\n */\n\n/**\n * @classdesc\n * Feature format for reading and writing data in the KML format.\n *\n * {@link module:ol/format/KML~KML#readFeature} will read the first feature from\n * a KML source.\n *\n * MultiGeometries are converted into GeometryCollections if they are a mix of\n * geometry types, and into MultiPoint/MultiLineString/MultiPolygon if they are\n * all of the same type.\n *\n * @api\n */\nclass KML extends XMLFeature {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    super();\n    options = options ? options : {};\n    if (!DEFAULT_STYLE_ARRAY) {\n      createStyleDefaults();\n    }\n\n    /**\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n    this.dataProjection = getProjection('EPSG:4326');\n\n    /**\n     * @private\n     * @type {Array<Style>}\n     */\n    this.defaultStyle_ = options.defaultStyle ? options.defaultStyle : DEFAULT_STYLE_ARRAY;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.extractStyles_ = options.extractStyles !== undefined ? options.extractStyles : true;\n\n    /**\n     * @type {boolean}\n     */\n    this.writeStyles_ = options.writeStyles !== undefined ? options.writeStyles : true;\n\n    /**\n     * @private\n     * @type {!Object<string, (Array<Style>|string)>}\n     */\n    this.sharedStyles_ = {};\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.showPointNames_ = options.showPointNames !== undefined ? options.showPointNames : true;\n\n    /**\n     * @type {null|string}\n     */\n    this.crossOrigin_ = options.crossOrigin !== undefined ? options.crossOrigin : 'anonymous';\n\n    /**\n     * @type {IconUrlFunction}\n     */\n    this.iconUrlFunction_ = options.iconUrlFunction ? options.iconUrlFunction : defaultIconUrlFunction;\n    this.supportedMediaTypes = ['application/vnd.google-earth.kml+xml'];\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   * @return {Array<Feature>|undefined} Features.\n   */\n  readDocumentOrFolder_(node, objectStack) {\n    // FIXME use scope somehow\n    const parsersNS = makeStructureNS(NAMESPACE_URIS, {\n      'Document': makeArrayExtender(this.readDocumentOrFolder_, this),\n      'Folder': makeArrayExtender(this.readDocumentOrFolder_, this),\n      'Placemark': makeArrayPusher(this.readPlacemark_, this),\n      'Style': this.readSharedStyle_.bind(this),\n      'StyleMap': this.readSharedStyleMap_.bind(this)\n    });\n    /** @type {Array<Feature>} */\n    // @ts-ignore\n    const features = pushParseAndPop([], parsersNS, node, objectStack, this);\n    if (features) {\n      return features;\n    }\n    return undefined;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   * @return {Feature|undefined} Feature.\n   */\n  readPlacemark_(node, objectStack) {\n    const object = pushParseAndPop({\n      'geometry': null\n    }, PLACEMARK_PARSERS, node, objectStack, this);\n    if (!object) {\n      return undefined;\n    }\n    const feature = new Feature();\n    const id = node.getAttribute('id');\n    if (id !== null) {\n      feature.setId(id);\n    }\n    const options = /** @type {import(\"./Feature.js\").ReadOptions} */\n    objectStack[0];\n    const geometry = object['geometry'];\n    if (geometry) {\n      transformGeometryWithOptions(geometry, false, options);\n    }\n    feature.setGeometry(geometry);\n    delete object['geometry'];\n    if (this.extractStyles_) {\n      const style = object['Style'];\n      const styleUrl = object['styleUrl'];\n      const styleFunction = createFeatureStyleFunction(style, styleUrl, this.defaultStyle_, this.sharedStyles_, this.showPointNames_);\n      feature.setStyle(styleFunction);\n    }\n    delete object['Style'];\n    // we do not remove the styleUrl property from the object, so it\n    // gets stored on feature when setProperties is called\n\n    feature.setProperties(object, true);\n    return feature;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   */\n  readSharedStyle_(node, objectStack) {\n    const id = node.getAttribute('id');\n    if (id !== null) {\n      const style = readStyle.call(this, node, objectStack);\n      if (style) {\n        let styleUri;\n        let baseURI = node.baseURI;\n        if (!baseURI || baseURI == 'about:blank') {\n          baseURI = window.location.href;\n        }\n        if (baseURI) {\n          const url = new URL('#' + id, baseURI);\n          styleUri = url.href;\n        } else {\n          styleUri = '#' + id;\n        }\n        this.sharedStyles_[styleUri] = style;\n      }\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   */\n  readSharedStyleMap_(node, objectStack) {\n    const id = node.getAttribute('id');\n    if (id === null) {\n      return;\n    }\n    const styleMapValue = readStyleMapValue.call(this, node, objectStack);\n    if (!styleMapValue) {\n      return;\n    }\n    let styleUri;\n    let baseURI = node.baseURI;\n    if (!baseURI || baseURI == 'about:blank') {\n      baseURI = window.location.href;\n    }\n    if (baseURI) {\n      const url = new URL('#' + id, baseURI);\n      styleUri = url.href;\n    } else {\n      styleUri = '#' + id;\n    }\n    this.sharedStyles_[styleUri] = styleMapValue;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Options.\n   * @return {import(\"../Feature.js\").default} Feature.\n   * @override\n   */\n  readFeatureFromNode(node, options) {\n    if (!NAMESPACE_URIS.includes(node.namespaceURI)) {\n      return null;\n    }\n    const feature = this.readPlacemark_(node, [this.getReadOptions(node, options)]);\n    if (feature) {\n      return feature;\n    }\n    return null;\n  }\n\n  /**\n   * @protected\n   * @param {Element} node Node.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Options.\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   * @override\n   */\n  readFeaturesFromNode(node, options) {\n    if (!NAMESPACE_URIS.includes(node.namespaceURI)) {\n      return [];\n    }\n    let features;\n    const localName = node.localName;\n    if (localName == 'Document' || localName == 'Folder') {\n      features = this.readDocumentOrFolder_(node, [this.getReadOptions(node, options)]);\n      if (features) {\n        return features;\n      }\n      return [];\n    }\n    if (localName == 'Placemark') {\n      const feature = this.readPlacemark_(node, [this.getReadOptions(node, options)]);\n      if (feature) {\n        return [feature];\n      }\n      return [];\n    }\n    if (localName == 'kml') {\n      features = [];\n      for (let n = node.firstElementChild; n; n = n.nextElementSibling) {\n        const fs = this.readFeaturesFromNode(n, options);\n        if (fs) {\n          extend(features, fs);\n        }\n      }\n      return features;\n    }\n    return [];\n  }\n\n  /**\n   * Read the name of the KML.\n   *\n   * @param {Document|Element|string} source Source.\n   * @return {string|undefined} Name.\n   * @api\n   */\n  readName(source) {\n    if (!source) {\n      return undefined;\n    }\n    if (typeof source === 'string') {\n      const doc = parse(source);\n      return this.readNameFromDocument(doc);\n    }\n    if (isDocument(source)) {\n      return this.readNameFromDocument(/** @type {Document} */source);\n    }\n    return this.readNameFromNode(/** @type {Element} */source);\n  }\n\n  /**\n   * @param {Document} doc Document.\n   * @return {string|undefined} Name.\n   */\n  readNameFromDocument(doc) {\n    for (let n = /** @type {Node} */doc.firstChild; n; n = n.nextSibling) {\n      if (n.nodeType == Node.ELEMENT_NODE) {\n        const name = this.readNameFromNode(/** @type {Element} */n);\n        if (name) {\n          return name;\n        }\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @return {string|undefined} Name.\n   */\n  readNameFromNode(node) {\n    for (let n = node.firstElementChild; n; n = n.nextElementSibling) {\n      if (NAMESPACE_URIS.includes(n.namespaceURI) && n.localName == 'name') {\n        return readString(n);\n      }\n    }\n    for (let n = node.firstElementChild; n; n = n.nextElementSibling) {\n      const localName = n.localName;\n      if (NAMESPACE_URIS.includes(n.namespaceURI) && (localName == 'Document' || localName == 'Folder' || localName == 'Placemark' || localName == 'kml')) {\n        const name = this.readNameFromNode(n);\n        if (name) {\n          return name;\n        }\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * Read the network links of the KML.\n   *\n   * @param {Document|Element|string} source Source.\n   * @return {Array<Object>} Network links.\n   * @api\n   */\n  readNetworkLinks(source) {\n    const networkLinks = [];\n    if (typeof source === 'string') {\n      const doc = parse(source);\n      extend(networkLinks, this.readNetworkLinksFromDocument(doc));\n    } else if (isDocument(source)) {\n      extend(networkLinks, this.readNetworkLinksFromDocument(/** @type {Document} */source));\n    } else {\n      extend(networkLinks, this.readNetworkLinksFromNode(/** @type {Element} */source));\n    }\n    return networkLinks;\n  }\n\n  /**\n   * @param {Document} doc Document.\n   * @return {Array<Object>} Network links.\n   */\n  readNetworkLinksFromDocument(doc) {\n    const networkLinks = [];\n    for (let n = /** @type {Node} */doc.firstChild; n; n = n.nextSibling) {\n      if (n.nodeType == Node.ELEMENT_NODE) {\n        extend(networkLinks, this.readNetworkLinksFromNode(/** @type {Element} */n));\n      }\n    }\n    return networkLinks;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @return {Array<Object>} Network links.\n   */\n  readNetworkLinksFromNode(node) {\n    const networkLinks = [];\n    for (let n = node.firstElementChild; n; n = n.nextElementSibling) {\n      if (NAMESPACE_URIS.includes(n.namespaceURI) && n.localName == 'NetworkLink') {\n        const obj = pushParseAndPop({}, NETWORK_LINK_PARSERS, n, []);\n        networkLinks.push(obj);\n      }\n    }\n    for (let n = node.firstElementChild; n; n = n.nextElementSibling) {\n      const localName = n.localName;\n      if (NAMESPACE_URIS.includes(n.namespaceURI) && (localName == 'Document' || localName == 'Folder' || localName == 'kml')) {\n        extend(networkLinks, this.readNetworkLinksFromNode(n));\n      }\n    }\n    return networkLinks;\n  }\n\n  /**\n   * Read the regions of the KML.\n   *\n   * @param {Document|Element|string} source Source.\n   * @return {Array<Object>} Regions.\n   * @api\n   */\n  readRegion(source) {\n    const regions = [];\n    if (typeof source === 'string') {\n      const doc = parse(source);\n      extend(regions, this.readRegionFromDocument(doc));\n    } else if (isDocument(source)) {\n      extend(regions, this.readRegionFromDocument(/** @type {Document} */source));\n    } else {\n      extend(regions, this.readRegionFromNode(/** @type {Element} */source));\n    }\n    return regions;\n  }\n\n  /**\n   * @param {Document} doc Document.\n   * @return {Array<Object>} Region.\n   */\n  readRegionFromDocument(doc) {\n    const regions = [];\n    for (let n = /** @type {Node} */doc.firstChild; n; n = n.nextSibling) {\n      if (n.nodeType == Node.ELEMENT_NODE) {\n        extend(regions, this.readRegionFromNode(/** @type {Element} */n));\n      }\n    }\n    return regions;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @return {Array<Object>} Region.\n   * @api\n   */\n  readRegionFromNode(node) {\n    const regions = [];\n    for (let n = node.firstElementChild; n; n = n.nextElementSibling) {\n      if (NAMESPACE_URIS.includes(n.namespaceURI) && n.localName == 'Region') {\n        const obj = pushParseAndPop({}, REGION_PARSERS, n, []);\n        regions.push(obj);\n      }\n    }\n    for (let n = node.firstElementChild; n; n = n.nextElementSibling) {\n      const localName = n.localName;\n      if (NAMESPACE_URIS.includes(n.namespaceURI) && (localName == 'Document' || localName == 'Folder' || localName == 'kml')) {\n        extend(regions, this.readRegionFromNode(n));\n      }\n    }\n    return regions;\n  }\n\n  /**\n   * @typedef {Object} KMLCamera Specifies the observer's viewpoint and associated view parameters.\n   * @property {number} [Latitude] Latitude of the camera.\n   * @property {number} [Longitude] Longitude of the camera.\n   * @property {number} [Altitude] Altitude of the camera.\n   * @property {string} [AltitudeMode] Floor-related altitude mode.\n   * @property {number} [Heading] Horizontal camera rotation.\n   * @property {number} [Tilt] Lateral camera rotation.\n   * @property {number} [Roll] Vertical camera rotation.\n   */\n\n  /**\n   * Read the cameras of the KML.\n   *\n   * @param {Document|Element|string} source Source.\n   * @return {Array<KMLCamera>} Cameras.\n   * @api\n   */\n  readCamera(source) {\n    const cameras = [];\n    if (typeof source === 'string') {\n      const doc = parse(source);\n      extend(cameras, this.readCameraFromDocument(doc));\n    } else if (isDocument(source)) {\n      extend(cameras, this.readCameraFromDocument(/** @type {Document} */source));\n    } else {\n      extend(cameras, this.readCameraFromNode(/** @type {Element} */source));\n    }\n    return cameras;\n  }\n\n  /**\n   * @param {Document} doc Document.\n   * @return {Array<KMLCamera>} Cameras.\n   */\n  readCameraFromDocument(doc) {\n    const cameras = [];\n    for (let n = /** @type {Node} */doc.firstChild; n; n = n.nextSibling) {\n      if (n.nodeType === Node.ELEMENT_NODE) {\n        extend(cameras, this.readCameraFromNode(/** @type {Element} */n));\n      }\n    }\n    return cameras;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @return {Array<KMLCamera>} Cameras.\n   * @api\n   */\n  readCameraFromNode(node) {\n    const cameras = [];\n    for (let n = node.firstElementChild; n; n = n.nextElementSibling) {\n      if (NAMESPACE_URIS.includes(n.namespaceURI) && n.localName === 'Camera') {\n        const obj = pushParseAndPop({}, CAMERA_PARSERS, n, []);\n        cameras.push(obj);\n      }\n    }\n    for (let n = node.firstElementChild; n; n = n.nextElementSibling) {\n      const localName = n.localName;\n      if (NAMESPACE_URIS.includes(n.namespaceURI) && (localName === 'Document' || localName === 'Folder' || localName === 'Placemark' || localName === 'kml')) {\n        extend(cameras, this.readCameraFromNode(n));\n      }\n    }\n    return cameras;\n  }\n\n  /**\n   * Encode an array of features in the KML format as an XML node. GeometryCollections,\n   * MultiPoints, MultiLineStrings, and MultiPolygons are output as MultiGeometries.\n   *\n   * @param {Array<Feature>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Options.\n   * @return {Node} Node.\n   * @api\n   * @override\n   */\n  writeFeaturesNode(features, options) {\n    options = this.adaptOptions(options);\n    const kml = createElementNS(NAMESPACE_URIS[4], 'kml');\n    const xmlnsUri = 'http://www.w3.org/2000/xmlns/';\n    kml.setAttributeNS(xmlnsUri, 'xmlns:gx', GX_NAMESPACE_URIS[0]);\n    kml.setAttributeNS(xmlnsUri, 'xmlns:xsi', XML_SCHEMA_INSTANCE_URI);\n    kml.setAttributeNS(XML_SCHEMA_INSTANCE_URI, 'xsi:schemaLocation', SCHEMA_LOCATION);\n    const /** @type {import(\"../xml.js\").NodeStackItem} */context = {\n      node: kml\n    };\n    /** @type {!Object<string, (Array<Feature>|Feature|undefined)>} */\n    const properties = {};\n    if (features.length > 1) {\n      properties['Document'] = features;\n    } else if (features.length == 1) {\n      properties['Placemark'] = features[0];\n    }\n    const orderedKeys = KML_SEQUENCE[kml.namespaceURI];\n    const values = makeSequence(properties, orderedKeys);\n    pushSerializeAndPop(context, KML_SERIALIZERS, OBJECT_PROPERTY_NODE_FACTORY, values, [options], orderedKeys, this);\n    return kml;\n  }\n}\n\n/**\n * @param {Style|undefined} foundStyle Style.\n * @param {string} name Name.\n * @return {Style} style Style.\n */\nfunction createNameStyleFunction(foundStyle, name) {\n  const textOffset = [0, 0];\n  /** @type {CanvasTextAlign} */\n  let textAlign = 'start';\n  const imageStyle = foundStyle.getImage();\n  if (imageStyle) {\n    const imageSize = imageStyle.getSize();\n    if (imageSize && imageSize.length == 2) {\n      const imageScale = imageStyle.getScaleArray();\n      const anchor = imageStyle.getAnchor();\n      // Offset the label to be centered to the right of the icon,\n      // if there is one.\n      textOffset[0] = imageScale[0] * (imageSize[0] - anchor[0]);\n      textOffset[1] = imageScale[1] * (imageSize[1] / 2 - anchor[1]);\n      textAlign = 'left';\n    }\n  }\n  let textStyle = foundStyle.getText();\n  if (textStyle) {\n    // clone the text style, customizing it with name, alignments and offset.\n    // Note that kml does not support many text options that OpenLayers does (rotation, textBaseline).\n    textStyle = textStyle.clone();\n    textStyle.setFont(textStyle.getFont() || DEFAULT_TEXT_STYLE.getFont());\n    textStyle.setScale(textStyle.getScale() || DEFAULT_TEXT_STYLE.getScale());\n    textStyle.setFill(textStyle.getFill() || DEFAULT_TEXT_STYLE.getFill());\n    textStyle.setStroke(textStyle.getStroke() || DEFAULT_TEXT_STROKE_STYLE);\n  } else {\n    textStyle = DEFAULT_TEXT_STYLE.clone();\n  }\n  textStyle.setText(name);\n  textStyle.setOffsetX(textOffset[0]);\n  textStyle.setOffsetY(textOffset[1]);\n  textStyle.setTextAlign(textAlign);\n  const nameStyle = new Style({\n    image: imageStyle,\n    text: textStyle\n  });\n  return nameStyle;\n}\n\n/**\n * @param {Array<Style>|undefined} style Style.\n * @param {string} styleUrl Style URL.\n * @param {Array<Style>} defaultStyle Default style.\n * @param {!Object<string, (Array<Style>|string)>} sharedStyles Shared styles.\n * @param {boolean|undefined} showPointNames true to show names for point placemarks.\n * @return {import(\"../style/Style.js\").StyleFunction} Feature style function.\n */\nfunction createFeatureStyleFunction(style, styleUrl, defaultStyle, sharedStyles, showPointNames) {\n  return (\n    /**\n     * @param {Feature} feature feature.\n     * @param {number} resolution Resolution.\n     * @return {Array<Style>|Style} Style.\n     */\n    function (feature, resolution) {\n      let drawName = showPointNames;\n      let name = '';\n      let multiGeometryPoints = [];\n      if (drawName) {\n        const geometry = feature.getGeometry();\n        if (geometry) {\n          if (geometry instanceof GeometryCollection) {\n            multiGeometryPoints = geometry.getGeometriesArrayRecursive().filter(function (geometry) {\n              const type = geometry.getType();\n              return type === 'Point' || type === 'MultiPoint';\n            });\n            drawName = multiGeometryPoints.length > 0;\n          } else {\n            const type = geometry.getType();\n            drawName = type === 'Point' || type === 'MultiPoint';\n          }\n        }\n      }\n      if (drawName) {\n        name = /** @type {string} */feature.get('name');\n        drawName = drawName && !!name;\n        // convert any html character codes\n        if (drawName && /&[^&]+;/.test(name)) {\n          if (!TEXTAREA) {\n            TEXTAREA = document.createElement('textarea');\n          }\n          TEXTAREA.innerHTML = name;\n          name = TEXTAREA.value;\n        }\n      }\n      let featureStyle = defaultStyle;\n      if (style) {\n        featureStyle = style;\n      } else if (styleUrl) {\n        featureStyle = findStyle(styleUrl, defaultStyle, sharedStyles);\n      }\n      if (drawName) {\n        const nameStyle = createNameStyleFunction(featureStyle[0], name);\n        if (multiGeometryPoints.length > 0) {\n          // in multigeometries restrict the name style to points and create a\n          // style without image or text for geometries requiring fill or stroke\n          // including any polygon specific style if there is one\n          nameStyle.setGeometry(new GeometryCollection(multiGeometryPoints));\n          const baseStyle = new Style({\n            geometry: featureStyle[0].getGeometry(),\n            image: null,\n            fill: featureStyle[0].getFill(),\n            stroke: featureStyle[0].getStroke(),\n            text: null\n          });\n          return [nameStyle, baseStyle].concat(featureStyle.slice(1));\n        }\n        return nameStyle;\n      }\n      return featureStyle;\n    }\n  );\n}\n\n/**\n * @param {Array<Style>|string|undefined} styleValue Style value.\n * @param {Array<Style>} defaultStyle Default style.\n * @param {!Object<string, (Array<Style>|string)>} sharedStyles\n * Shared styles.\n * @return {Array<Style>} Style.\n */\nfunction findStyle(styleValue, defaultStyle, sharedStyles) {\n  if (Array.isArray(styleValue)) {\n    return styleValue;\n  }\n  if (typeof styleValue === 'string') {\n    return findStyle(sharedStyles[styleValue], defaultStyle, sharedStyles);\n  }\n  return defaultStyle;\n}\n\n/**\n * @param {Node} node Node.\n * @return {import(\"../color.js\").Color|undefined} Color.\n */\nfunction readColor(node) {\n  const s = getAllTextContent(node, false);\n  // The KML specification states that colors should not include a leading `#`\n  // but we tolerate them.\n  const m = /^\\s*#?\\s*([0-9A-Fa-f]{8})\\s*$/.exec(s);\n  if (m) {\n    const hexColor = m[1];\n    return [parseInt(hexColor.substr(6, 2), 16), parseInt(hexColor.substr(4, 2), 16), parseInt(hexColor.substr(2, 2), 16), parseInt(hexColor.substr(0, 2), 16) / 255];\n  }\n  return undefined;\n}\n\n/**\n * @param {Node} node Node.\n * @return {Array<number>|undefined} Flat coordinates.\n */\nexport function readFlatCoordinates(node) {\n  let s = getAllTextContent(node, false);\n  const flatCoordinates = [];\n  // The KML specification states that coordinate tuples should not include\n  // spaces, but we tolerate them.\n  s = s.replace(/\\s*,\\s*/g, ',');\n  const re = /^\\s*([+\\-]?\\d*\\.?\\d+(?:e[+\\-]?\\d+)?),([+\\-]?\\d*\\.?\\d+(?:e[+\\-]?\\d+)?)(?:\\s+|,|$)(?:([+\\-]?\\d*\\.?\\d+(?:e[+\\-]?\\d+)?)(?:\\s+|$))?\\s*/i;\n  let m;\n  while (m = re.exec(s)) {\n    const x = parseFloat(m[1]);\n    const y = parseFloat(m[2]);\n    const z = m[3] ? parseFloat(m[3]) : 0;\n    flatCoordinates.push(x, y, z);\n    s = s.substr(m[0].length);\n  }\n  if (s !== '') {\n    return undefined;\n  }\n  return flatCoordinates;\n}\n\n/**\n * @param {Node} node Node.\n * @return {string} URI.\n */\nfunction readURI(node) {\n  const s = getAllTextContent(node, false).trim();\n  let baseURI = node.baseURI;\n  if (!baseURI || baseURI == 'about:blank') {\n    baseURI = window.location.href;\n  }\n  if (baseURI) {\n    const url = new URL(s, baseURI);\n    return url.href;\n  }\n  return s;\n}\n\n/**\n * @param {Node} node Node.\n * @return {string} URI.\n */\nfunction readStyleURL(node) {\n  // KML files in the wild occasionally forget the leading\n  // `#` on styleUrlsdefined in the same document.\n  const s = getAllTextContent(node, false).trim().replace(/^(?!.*#)/, '#');\n  let baseURI = node.baseURI;\n  if (!baseURI || baseURI == 'about:blank') {\n    baseURI = window.location.href;\n  }\n  if (baseURI) {\n    const url = new URL(s, baseURI);\n    return url.href;\n  }\n  return s;\n}\n\n/**\n * @param {Element} node Node.\n * @return {Vec2} Vec2.\n */\nfunction readVec2(node) {\n  const xunits = node.getAttribute('xunits');\n  const yunits = node.getAttribute('yunits');\n  /** @type {import('../style/Icon.js').IconOrigin} */\n  let origin;\n  if (xunits !== 'insetPixels') {\n    if (yunits !== 'insetPixels') {\n      origin = 'bottom-left';\n    } else {\n      origin = 'top-left';\n    }\n  } else {\n    if (yunits !== 'insetPixels') {\n      origin = 'bottom-right';\n    } else {\n      origin = 'top-right';\n    }\n  }\n  return {\n    x: parseFloat(node.getAttribute('x')),\n    xunits: ICON_ANCHOR_UNITS_MAP[xunits],\n    y: parseFloat(node.getAttribute('y')),\n    yunits: ICON_ANCHOR_UNITS_MAP[yunits],\n    origin: origin\n  };\n}\n\n/**\n * @param {Node} node Node.\n * @return {number|undefined} Scale.\n */\nfunction readScale(node) {\n  return readDecimal(node);\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst STYLE_MAP_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'Pair': pairDataParser\n});\n\n/**\n * @this {KML}\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Array<Style>|string|undefined} StyleMap.\n */\nfunction readStyleMapValue(node, objectStack) {\n  return pushParseAndPop(undefined, STYLE_MAP_PARSERS, node, objectStack, this);\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst ICON_STYLE_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'Icon': makeObjectPropertySetter(readIcon),\n  'color': makeObjectPropertySetter(readColor),\n  'heading': makeObjectPropertySetter(readDecimal),\n  'hotSpot': makeObjectPropertySetter(readVec2),\n  'scale': makeObjectPropertySetter(readScale)\n});\n\n/**\n * @this {KML}\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction iconStyleParser(node, objectStack) {\n  // FIXME refreshMode\n  // FIXME refreshInterval\n  // FIXME viewRefreshTime\n  // FIXME viewBoundScale\n  // FIXME viewFormat\n  // FIXME httpQuery\n  const object = pushParseAndPop({}, ICON_STYLE_PARSERS, node, objectStack);\n  if (!object) {\n    return;\n  }\n  const styleObject = /** @type {Object} */\n  objectStack[objectStack.length - 1];\n  const IconObject = 'Icon' in object ? object['Icon'] : {};\n  const drawIcon = !('Icon' in object) || Object.keys(IconObject).length > 0;\n  let src;\n  const href = /** @type {string|undefined} */IconObject['href'];\n  if (href) {\n    src = href;\n  } else if (drawIcon) {\n    src = DEFAULT_IMAGE_STYLE_SRC;\n  }\n  let anchor, anchorXUnits, anchorYUnits;\n  /** @type {import('../style/Icon.js').IconOrigin|undefined} */\n  let anchorOrigin = 'bottom-left';\n  const hotSpot = /** @type {Vec2|undefined} */object['hotSpot'];\n  if (hotSpot) {\n    anchor = [hotSpot.x, hotSpot.y];\n    anchorXUnits = hotSpot.xunits;\n    anchorYUnits = hotSpot.yunits;\n    anchorOrigin = hotSpot.origin;\n  } else if (/^https?:\\/\\/maps\\.(?:google|gstatic)\\.com\\//.test(src)) {\n    // Google hotspots from https://kml4earth.appspot.com/icons.html#notes\n    if (src.includes('pushpin')) {\n      anchor = DEFAULT_IMAGE_STYLE_ANCHOR;\n      anchorXUnits = DEFAULT_IMAGE_STYLE_ANCHOR_X_UNITS;\n      anchorYUnits = DEFAULT_IMAGE_STYLE_ANCHOR_Y_UNITS;\n    } else if (src.includes('arrow-reverse')) {\n      anchor = [54, 42];\n      anchorXUnits = DEFAULT_IMAGE_STYLE_ANCHOR_X_UNITS;\n      anchorYUnits = DEFAULT_IMAGE_STYLE_ANCHOR_Y_UNITS;\n    } else if (src.includes('paddle')) {\n      anchor = [32, 1];\n      anchorXUnits = DEFAULT_IMAGE_STYLE_ANCHOR_X_UNITS;\n      anchorYUnits = DEFAULT_IMAGE_STYLE_ANCHOR_Y_UNITS;\n    }\n  }\n  let offset;\n  const x = /** @type {number|undefined} */IconObject['x'];\n  const y = /** @type {number|undefined} */IconObject['y'];\n  if (x !== undefined && y !== undefined) {\n    offset = [x, y];\n  }\n  let size;\n  const w = /** @type {number|undefined} */IconObject['w'];\n  const h = /** @type {number|undefined} */IconObject['h'];\n  if (w !== undefined && h !== undefined) {\n    size = [w, h];\n  }\n  let rotation;\n  const heading = /** @type {number} */object['heading'];\n  if (heading !== undefined) {\n    rotation = toRadians(heading);\n  }\n  const scale = /** @type {number|undefined} */object['scale'];\n  const color = /** @type {Array<number>|undefined} */object['color'];\n  if (drawIcon) {\n    if (src == DEFAULT_IMAGE_STYLE_SRC) {\n      size = DEFAULT_IMAGE_STYLE_SIZE;\n    }\n    const imageStyle = new Icon({\n      anchor: anchor,\n      anchorOrigin: anchorOrigin,\n      anchorXUnits: anchorXUnits,\n      anchorYUnits: anchorYUnits,\n      crossOrigin: this.crossOrigin_,\n      offset: offset,\n      offsetOrigin: 'bottom-left',\n      rotation: rotation,\n      scale: scale,\n      size: size,\n      src: this.iconUrlFunction_(src),\n      color: color\n    });\n    const imageScale = imageStyle.getScaleArray()[0];\n    const imageSize = imageStyle.getSize();\n    if (imageSize === null) {\n      const imageState = imageStyle.getImageState();\n      if (imageState === ImageState.IDLE || imageState === ImageState.LOADING) {\n        const listener = function () {\n          const imageState = imageStyle.getImageState();\n          if (!(imageState === ImageState.IDLE || imageState === ImageState.LOADING)) {\n            const imageSize = imageStyle.getSize();\n            if (imageSize && imageSize.length == 2) {\n              const resizeScale = scaleForSize(imageSize);\n              imageStyle.setScale(imageScale * resizeScale);\n            }\n            imageStyle.unlistenImageChange(listener);\n          }\n        };\n        imageStyle.listenImageChange(listener);\n        if (imageState === ImageState.IDLE) {\n          imageStyle.load();\n        }\n      }\n    } else if (imageSize.length == 2) {\n      const resizeScale = scaleForSize(imageSize);\n      imageStyle.setScale(imageScale * resizeScale);\n    }\n    styleObject['imageStyle'] = imageStyle;\n  } else {\n    // handle the case when we explicitly want to draw no icon.\n    styleObject['imageStyle'] = DEFAULT_NO_IMAGE_STYLE;\n  }\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst LABEL_STYLE_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'color': makeObjectPropertySetter(readColor),\n  'scale': makeObjectPropertySetter(readScale)\n});\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction labelStyleParser(node, objectStack) {\n  // FIXME colorMode\n  const object = pushParseAndPop({}, LABEL_STYLE_PARSERS, node, objectStack);\n  if (!object) {\n    return;\n  }\n  const styleObject = objectStack[objectStack.length - 1];\n  const textStyle = new Text({\n    fill: new Fill({\n      color: (/** @type {import(\"../color.js\").Color} */\n      'color' in object ? object['color'] : DEFAULT_COLOR)\n    }),\n    scale: (/** @type {number|undefined} */object['scale'])\n  });\n  styleObject['textStyle'] = textStyle;\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst LINE_STYLE_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'color': makeObjectPropertySetter(readColor),\n  'width': makeObjectPropertySetter(readDecimal)\n});\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction lineStyleParser(node, objectStack) {\n  // FIXME colorMode\n  // FIXME gx:outerColor\n  // FIXME gx:outerWidth\n  // FIXME gx:physicalWidth\n  // FIXME gx:labelVisibility\n  const object = pushParseAndPop({}, LINE_STYLE_PARSERS, node, objectStack);\n  if (!object) {\n    return;\n  }\n  const styleObject = objectStack[objectStack.length - 1];\n  const strokeStyle = new Stroke({\n    color: (/** @type {import(\"../color.js\").Color} */\n    'color' in object ? object['color'] : DEFAULT_COLOR),\n    width: (/** @type {number} */'width' in object ? object['width'] : 1)\n  });\n  styleObject['strokeStyle'] = strokeStyle;\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst POLY_STYLE_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'color': makeObjectPropertySetter(readColor),\n  'fill': makeObjectPropertySetter(readBoolean),\n  'outline': makeObjectPropertySetter(readBoolean)\n});\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction polyStyleParser(node, objectStack) {\n  // FIXME colorMode\n  const object = pushParseAndPop({}, POLY_STYLE_PARSERS, node, objectStack);\n  if (!object) {\n    return;\n  }\n  const styleObject = objectStack[objectStack.length - 1];\n  const fillStyle = new Fill({\n    color: (/** @type {import(\"../color.js\").Color} */\n    'color' in object ? object['color'] : DEFAULT_COLOR)\n  });\n  styleObject['fillStyle'] = fillStyle;\n  const fill = /** @type {boolean|undefined} */object['fill'];\n  if (fill !== undefined) {\n    styleObject['fill'] = fill;\n  }\n  const outline = /** @type {boolean|undefined} */object['outline'];\n  if (outline !== undefined) {\n    styleObject['outline'] = outline;\n  }\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst FLAT_LINEAR_RING_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'coordinates': makeReplacer(readFlatCoordinates)\n});\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Array<number>} LinearRing flat coordinates.\n */\nfunction readFlatLinearRing(node, objectStack) {\n  return pushParseAndPop(null, FLAT_LINEAR_RING_PARSERS, node, objectStack);\n}\n\n/**\n * @param {Node} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction gxCoordParser(node, objectStack) {\n  const gxTrackObject = /** @type {GxTrackObject} */\n  objectStack[objectStack.length - 1];\n  const coordinates = gxTrackObject.coordinates;\n  const s = getAllTextContent(node, false);\n  const re = /^\\s*([+\\-]?\\d+(?:\\.\\d*)?(?:e[+\\-]?\\d*)?)\\s+([+\\-]?\\d+(?:\\.\\d*)?(?:e[+\\-]?\\d*)?)\\s+([+\\-]?\\d+(?:\\.\\d*)?(?:e[+\\-]?\\d*)?)\\s*$/i;\n  const m = re.exec(s);\n  if (m) {\n    const x = parseFloat(m[1]);\n    const y = parseFloat(m[2]);\n    const z = parseFloat(m[3]);\n    coordinates.push([x, y, z]);\n  } else {\n    coordinates.push([]);\n  }\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst GX_MULTITRACK_GEOMETRY_PARSERS = makeStructureNS(GX_NAMESPACE_URIS, {\n  'Track': makeArrayPusher(readGxTrack)\n});\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {MultiLineString|undefined} MultiLineString.\n */\nfunction readGxMultiTrack(node, objectStack) {\n  const lineStrings = pushParseAndPop([], GX_MULTITRACK_GEOMETRY_PARSERS, node, objectStack);\n  if (!lineStrings) {\n    return undefined;\n  }\n  return new MultiLineString(lineStrings);\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst GX_TRACK_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'when': whenParser\n}, makeStructureNS(GX_NAMESPACE_URIS, {\n  'coord': gxCoordParser\n}));\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {LineString|undefined} LineString.\n */\nfunction readGxTrack(node, objectStack) {\n  const gxTrackObject = pushParseAndPop(/** @type {GxTrackObject} */{\n    coordinates: [],\n    whens: []\n  }, GX_TRACK_PARSERS, node, objectStack);\n  if (!gxTrackObject) {\n    return undefined;\n  }\n  const flatCoordinates = [];\n  const coordinates = gxTrackObject.coordinates;\n  const whens = gxTrackObject.whens;\n  for (let i = 0, ii = Math.min(coordinates.length, whens.length); i < ii; ++i) {\n    if (coordinates[i].length == 3) {\n      flatCoordinates.push(coordinates[i][0], coordinates[i][1], coordinates[i][2], whens[i]);\n    }\n  }\n  return new LineString(flatCoordinates, 'XYZM');\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst ICON_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'href': makeObjectPropertySetter(readURI)\n}, makeStructureNS(GX_NAMESPACE_URIS, {\n  'x': makeObjectPropertySetter(readDecimal),\n  'y': makeObjectPropertySetter(readDecimal),\n  'w': makeObjectPropertySetter(readDecimal),\n  'h': makeObjectPropertySetter(readDecimal)\n}));\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object} Icon object.\n */\nfunction readIcon(node, objectStack) {\n  const iconObject = pushParseAndPop({}, ICON_PARSERS, node, objectStack);\n  if (iconObject) {\n    return iconObject;\n  }\n  return null;\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst GEOMETRY_FLAT_COORDINATES_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'coordinates': makeReplacer(readFlatCoordinates)\n});\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Array<number>} Flat coordinates.\n */\nfunction readFlatCoordinatesFromNode(node, objectStack) {\n  return pushParseAndPop(null, GEOMETRY_FLAT_COORDINATES_PARSERS, node, objectStack);\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst EXTRUDE_AND_ALTITUDE_MODE_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'extrude': makeObjectPropertySetter(readBoolean),\n  'tessellate': makeObjectPropertySetter(readBoolean),\n  'altitudeMode': makeObjectPropertySetter(readString)\n});\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {LineString|undefined} LineString.\n */\nfunction readLineString(node, objectStack) {\n  const properties = pushParseAndPop({}, EXTRUDE_AND_ALTITUDE_MODE_PARSERS, node, objectStack);\n  const flatCoordinates = readFlatCoordinatesFromNode(node, objectStack);\n  if (flatCoordinates) {\n    const lineString = new LineString(flatCoordinates, 'XYZ');\n    lineString.setProperties(properties, true);\n    return lineString;\n  }\n  return undefined;\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Polygon|undefined} Polygon.\n */\nfunction readLinearRing(node, objectStack) {\n  const properties = pushParseAndPop({}, EXTRUDE_AND_ALTITUDE_MODE_PARSERS, node, objectStack);\n  const flatCoordinates = readFlatCoordinatesFromNode(node, objectStack);\n  if (flatCoordinates) {\n    const polygon = new Polygon(flatCoordinates, 'XYZ', [flatCoordinates.length]);\n    polygon.setProperties(properties, true);\n    return polygon;\n  }\n  return undefined;\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst MULTI_GEOMETRY_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'LineString': makeArrayPusher(readLineString),\n  'LinearRing': makeArrayPusher(readLinearRing),\n  'MultiGeometry': makeArrayPusher(readMultiGeometry),\n  'Point': makeArrayPusher(readPoint),\n  'Polygon': makeArrayPusher(readPolygon)\n});\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {import(\"../geom/Geometry.js\").default} Geometry.\n */\nfunction readMultiGeometry(node, objectStack) {\n  const geometries = pushParseAndPop([], MULTI_GEOMETRY_PARSERS, node, objectStack);\n  if (!geometries) {\n    return null;\n  }\n  if (geometries.length === 0) {\n    return new GeometryCollection(geometries);\n  }\n  let multiGeometry;\n  let homogeneous = true;\n  const type = geometries[0].getType();\n  let geometry;\n  for (let i = 1, ii = geometries.length; i < ii; ++i) {\n    geometry = geometries[i];\n    if (geometry.getType() != type) {\n      homogeneous = false;\n      break;\n    }\n  }\n  if (homogeneous) {\n    let layout;\n    let flatCoordinates;\n    if (type == 'Point') {\n      const point = geometries[0];\n      layout = point.getLayout();\n      flatCoordinates = point.getFlatCoordinates();\n      for (let i = 1, ii = geometries.length; i < ii; ++i) {\n        geometry = geometries[i];\n        extend(flatCoordinates, geometry.getFlatCoordinates());\n      }\n      multiGeometry = new MultiPoint(flatCoordinates, layout);\n      setCommonGeometryProperties(multiGeometry, geometries);\n    } else if (type == 'LineString') {\n      multiGeometry = new MultiLineString(geometries);\n      setCommonGeometryProperties(multiGeometry, geometries);\n    } else if (type == 'Polygon') {\n      multiGeometry = new MultiPolygon(geometries);\n      setCommonGeometryProperties(multiGeometry, geometries);\n    } else if (type == 'GeometryCollection' || type.startsWith('Multi')) {\n      multiGeometry = new GeometryCollection(geometries);\n    } else {\n      throw new Error('Unknown geometry type found');\n    }\n  } else {\n    multiGeometry = new GeometryCollection(geometries);\n  }\n  return /** @type {import(\"../geom/Geometry.js\").default} */multiGeometry;\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Point|undefined} Point.\n */\nfunction readPoint(node, objectStack) {\n  const properties = pushParseAndPop({}, EXTRUDE_AND_ALTITUDE_MODE_PARSERS, node, objectStack);\n  const flatCoordinates = readFlatCoordinatesFromNode(node, objectStack);\n  if (flatCoordinates) {\n    const point = new Point(flatCoordinates, 'XYZ');\n    point.setProperties(properties, true);\n    return point;\n  }\n  return undefined;\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst FLAT_LINEAR_RINGS_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'innerBoundaryIs': innerBoundaryIsParser,\n  'outerBoundaryIs': outerBoundaryIsParser\n});\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Polygon|undefined} Polygon.\n */\nfunction readPolygon(node, objectStack) {\n  const properties = pushParseAndPop(/** @type {Object<string,*>} */{}, EXTRUDE_AND_ALTITUDE_MODE_PARSERS, node, objectStack);\n  const flatLinearRings = pushParseAndPop([null], FLAT_LINEAR_RINGS_PARSERS, node, objectStack);\n  if (flatLinearRings && flatLinearRings[0]) {\n    const flatCoordinates = flatLinearRings[0];\n    const ends = [flatCoordinates.length];\n    for (let i = 1, ii = flatLinearRings.length; i < ii; ++i) {\n      extend(flatCoordinates, flatLinearRings[i]);\n      ends.push(flatCoordinates.length);\n    }\n    const polygon = new Polygon(flatCoordinates, 'XYZ', ends);\n    polygon.setProperties(properties, true);\n    return polygon;\n  }\n  return undefined;\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst STYLE_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'IconStyle': iconStyleParser,\n  'LabelStyle': labelStyleParser,\n  'LineStyle': lineStyleParser,\n  'PolyStyle': polyStyleParser\n});\n\n/**\n * @this {KML}\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Array<Style>} Style.\n */\nfunction readStyle(node, objectStack) {\n  const styleObject = pushParseAndPop({}, STYLE_PARSERS, node, objectStack, this);\n  if (!styleObject) {\n    return null;\n  }\n  let fillStyle = /** @type {Fill} */\n\n  'fillStyle' in styleObject ? styleObject['fillStyle'] : DEFAULT_FILL_STYLE;\n  const fill = /** @type {boolean|undefined} */styleObject['fill'];\n  if (fill !== undefined && !fill) {\n    fillStyle = null;\n  }\n  let imageStyle;\n  if ('imageStyle' in styleObject) {\n    if (styleObject['imageStyle'] != DEFAULT_NO_IMAGE_STYLE) {\n      imageStyle = /** @type {import(\"../style/Image.js\").default} */\n      styleObject['imageStyle'];\n    }\n  } else {\n    imageStyle = DEFAULT_IMAGE_STYLE;\n  }\n  const textStyle = /** @type {Text} */\n\n  'textStyle' in styleObject ? styleObject['textStyle'] : DEFAULT_TEXT_STYLE;\n  const strokeStyle = /** @type {Stroke} */\n\n  'strokeStyle' in styleObject ? styleObject['strokeStyle'] : DEFAULT_STROKE_STYLE;\n  const outline = /** @type {boolean|undefined} */styleObject['outline'];\n  if (outline !== undefined && !outline) {\n    // if the polystyle specifies no outline two styles are needed,\n    // one for non-polygon geometries where linestrings require a stroke\n    // and one for polygons where there should be no stroke\n    return [new Style({\n      geometry: function (feature) {\n        const geometry = feature.getGeometry();\n        const type = geometry.getType();\n        if (type === 'GeometryCollection') {\n          const collection = /** @type {import(\"../geom/GeometryCollection\").default} */\n          geometry;\n          return new GeometryCollection(collection.getGeometriesArrayRecursive().filter(function (geometry) {\n            const type = geometry.getType();\n            return type !== 'Polygon' && type !== 'MultiPolygon';\n          }));\n        }\n        if (type !== 'Polygon' && type !== 'MultiPolygon') {\n          return geometry;\n        }\n      },\n      fill: fillStyle,\n      image: imageStyle,\n      stroke: strokeStyle,\n      text: textStyle,\n      zIndex: undefined // FIXME\n    }), new Style({\n      geometry: function (feature) {\n        const geometry = feature.getGeometry();\n        const type = geometry.getType();\n        if (type === 'GeometryCollection') {\n          const collection = /** @type {import(\"../geom/GeometryCollection\").default} */\n          geometry;\n          return new GeometryCollection(collection.getGeometriesArrayRecursive().filter(function (geometry) {\n            const type = geometry.getType();\n            return type === 'Polygon' || type === 'MultiPolygon';\n          }));\n        }\n        if (type === 'Polygon' || type === 'MultiPolygon') {\n          return geometry;\n        }\n      },\n      fill: fillStyle,\n      stroke: null,\n      zIndex: undefined // FIXME\n    })];\n  }\n  return [new Style({\n    fill: fillStyle,\n    image: imageStyle,\n    stroke: strokeStyle,\n    text: textStyle,\n    zIndex: undefined // FIXME\n  })];\n}\n\n/**\n * Reads an array of geometries and creates arrays for common geometry\n * properties. Then sets them to the multi geometry.\n * @param {MultiPoint|MultiLineString|MultiPolygon} multiGeometry A multi-geometry.\n * @param {Array<import(\"../geom/Geometry.js\").default>} geometries List of geometries.\n */\nfunction setCommonGeometryProperties(multiGeometry, geometries) {\n  const ii = geometries.length;\n  const extrudes = new Array(geometries.length);\n  const tessellates = new Array(geometries.length);\n  const altitudeModes = new Array(geometries.length);\n  let hasExtrude, hasTessellate, hasAltitudeMode;\n  hasExtrude = false;\n  hasTessellate = false;\n  hasAltitudeMode = false;\n  for (let i = 0; i < ii; ++i) {\n    const geometry = geometries[i];\n    extrudes[i] = geometry.get('extrude');\n    tessellates[i] = geometry.get('tessellate');\n    altitudeModes[i] = geometry.get('altitudeMode');\n    hasExtrude = hasExtrude || extrudes[i] !== undefined;\n    hasTessellate = hasTessellate || tessellates[i] !== undefined;\n    hasAltitudeMode = hasAltitudeMode || altitudeModes[i];\n  }\n  if (hasExtrude) {\n    multiGeometry.set('extrude', extrudes);\n  }\n  if (hasTessellate) {\n    multiGeometry.set('tessellate', tessellates);\n  }\n  if (hasAltitudeMode) {\n    multiGeometry.set('altitudeMode', altitudeModes);\n  }\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst DATA_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'displayName': makeObjectPropertySetter(readString),\n  'value': makeObjectPropertySetter(readString)\n});\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction dataParser(node, objectStack) {\n  const name = node.getAttribute('name');\n  parseNode(DATA_PARSERS, node, objectStack);\n  const featureObject = /** @type {Object} */\n  objectStack[objectStack.length - 1];\n  if (name && featureObject.displayName) {\n    featureObject[name] = {\n      value: featureObject.value,\n      displayName: featureObject.displayName,\n      toString: function () {\n        return featureObject.value;\n      }\n    };\n  } else if (name !== null) {\n    featureObject[name] = featureObject.value;\n  } else if (featureObject.displayName !== null) {\n    featureObject[featureObject.displayName] = featureObject.value;\n  }\n  delete featureObject['value'];\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst EXTENDED_DATA_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'Data': dataParser,\n  'SchemaData': schemaDataParser\n});\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction extendedDataParser(node, objectStack) {\n  parseNode(EXTENDED_DATA_PARSERS, node, objectStack);\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction regionParser(node, objectStack) {\n  parseNode(REGION_PARSERS, node, objectStack);\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst PAIR_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'Style': makeObjectPropertySetter(readStyle),\n  'key': makeObjectPropertySetter(readString),\n  'styleUrl': makeObjectPropertySetter(readStyleURL)\n});\n\n/**\n * @this {KML}\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction pairDataParser(node, objectStack) {\n  const pairObject = pushParseAndPop({}, PAIR_PARSERS, node, objectStack, this);\n  if (!pairObject) {\n    return;\n  }\n  const key = /** @type {string|undefined} */pairObject['key'];\n  if (key && key == 'normal') {\n    const styleUrl = /** @type {string|undefined} */pairObject['styleUrl'];\n    if (styleUrl) {\n      objectStack[objectStack.length - 1] = styleUrl;\n    }\n    const style = /** @type {Style} */pairObject['Style'];\n    if (style) {\n      objectStack[objectStack.length - 1] = style;\n    }\n  }\n}\n\n/**\n * @this {KML}\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction placemarkStyleMapParser(node, objectStack) {\n  const styleMapValue = readStyleMapValue.call(this, node, objectStack);\n  if (!styleMapValue) {\n    return;\n  }\n  const placemarkObject = objectStack[objectStack.length - 1];\n  if (Array.isArray(styleMapValue)) {\n    placemarkObject['Style'] = styleMapValue;\n  } else if (typeof styleMapValue === 'string') {\n    placemarkObject['styleUrl'] = styleMapValue;\n  } else {\n    throw new Error('`styleMapValue` has an unknown type');\n  }\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst SCHEMA_DATA_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'SimpleData': simpleDataParser\n});\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction schemaDataParser(node, objectStack) {\n  parseNode(SCHEMA_DATA_PARSERS, node, objectStack);\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction simpleDataParser(node, objectStack) {\n  const name = node.getAttribute('name');\n  if (name !== null) {\n    const data = readString(node);\n    const featureObject = /** @type {Object} */\n    objectStack[objectStack.length - 1];\n    featureObject[name] = data;\n  }\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst LAT_LON_ALT_BOX_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'altitudeMode': makeObjectPropertySetter(readString),\n  'minAltitude': makeObjectPropertySetter(readDecimal),\n  'maxAltitude': makeObjectPropertySetter(readDecimal),\n  'north': makeObjectPropertySetter(readDecimal),\n  'south': makeObjectPropertySetter(readDecimal),\n  'east': makeObjectPropertySetter(readDecimal),\n  'west': makeObjectPropertySetter(readDecimal)\n});\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction latLonAltBoxParser(node, objectStack) {\n  const object = pushParseAndPop({}, LAT_LON_ALT_BOX_PARSERS, node, objectStack);\n  if (!object) {\n    return;\n  }\n  const regionObject = /** @type {Object} */\n  objectStack[objectStack.length - 1];\n  const extent = [parseFloat(object['west']), parseFloat(object['south']), parseFloat(object['east']), parseFloat(object['north'])];\n  regionObject['extent'] = extent;\n  regionObject['altitudeMode'] = object['altitudeMode'];\n  regionObject['minAltitude'] = parseFloat(object['minAltitude']);\n  regionObject['maxAltitude'] = parseFloat(object['maxAltitude']);\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst LOD_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'minLodPixels': makeObjectPropertySetter(readDecimal),\n  'maxLodPixels': makeObjectPropertySetter(readDecimal),\n  'minFadeExtent': makeObjectPropertySetter(readDecimal),\n  'maxFadeExtent': makeObjectPropertySetter(readDecimal)\n});\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction lodParser(node, objectStack) {\n  const object = pushParseAndPop({}, LOD_PARSERS, node, objectStack);\n  if (!object) {\n    return;\n  }\n  const lodObject = /** @type {Object} */objectStack[objectStack.length - 1];\n  lodObject['minLodPixels'] = parseFloat(object['minLodPixels']);\n  lodObject['maxLodPixels'] = parseFloat(object['maxLodPixels']);\n  lodObject['minFadeExtent'] = parseFloat(object['minFadeExtent']);\n  lodObject['maxFadeExtent'] = parseFloat(object['maxFadeExtent']);\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst INNER_BOUNDARY_IS_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  // KML spec only allows one LinearRing  per innerBoundaryIs, but Google Earth\n  // allows multiple, so we parse multiple here too.\n  'LinearRing': makeArrayPusher(readFlatLinearRing)\n});\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction innerBoundaryIsParser(node, objectStack) {\n  const innerBoundaryFlatLinearRings = pushParseAndPop(/** @type {Array<Array<number>>} */[], INNER_BOUNDARY_IS_PARSERS, node, objectStack);\n  if (innerBoundaryFlatLinearRings.length > 0) {\n    const flatLinearRings = /** @type {Array<Array<number>>} */\n    objectStack[objectStack.length - 1];\n    flatLinearRings.push(...innerBoundaryFlatLinearRings);\n  }\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst OUTER_BOUNDARY_IS_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'LinearRing': makeReplacer(readFlatLinearRing)\n});\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction outerBoundaryIsParser(node, objectStack) {\n  /** @type {Array<number>|undefined} */\n  const flatLinearRing = pushParseAndPop(undefined, OUTER_BOUNDARY_IS_PARSERS, node, objectStack);\n  if (flatLinearRing) {\n    const flatLinearRings = /** @type {Array<Array<number>>} */\n    objectStack[objectStack.length - 1];\n    flatLinearRings[0] = flatLinearRing;\n  }\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction linkParser(node, objectStack) {\n  parseNode(LINK_PARSERS, node, objectStack);\n}\n\n/**\n * @param {Node} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction whenParser(node, objectStack) {\n  const gxTrackObject = /** @type {GxTrackObject} */\n  objectStack[objectStack.length - 1];\n  const whens = gxTrackObject.whens;\n  const s = getAllTextContent(node, false);\n  const when = Date.parse(s);\n  whens.push(isNaN(when) ? 0 : when);\n}\n\n/**\n * @param {Node} node Node to append a TextNode with the color to.\n * @param {import(\"../color.js\").Color|string} color Color.\n */\nfunction writeColorTextNode(node, color) {\n  const rgba = asArray(color);\n  const opacity = rgba.length == 4 ? rgba[3] : 1;\n  /** @type {Array<string|number>} */\n  const abgr = [opacity * 255, rgba[2], rgba[1], rgba[0]];\n  for (let i = 0; i < 4; ++i) {\n    const hex = Math.floor(/** @type {number} */abgr[i]).toString(16);\n    abgr[i] = hex.length == 1 ? '0' + hex : hex;\n  }\n  writeStringTextNode(node, abgr.join(''));\n}\n\n/**\n * @param {Node} node Node to append a TextNode with the coordinates to.\n * @param {Array<number>} coordinates Coordinates.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction writeCoordinatesTextNode(node, coordinates, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const layout = context['layout'];\n  const stride = context['stride'];\n  let dimension;\n  if (layout == 'XY' || layout == 'XYM') {\n    dimension = 2;\n  } else if (layout == 'XYZ' || layout == 'XYZM') {\n    dimension = 3;\n  } else {\n    throw new Error('Invalid geometry layout');\n  }\n  const ii = coordinates.length;\n  let text = '';\n  if (ii > 0) {\n    text += coordinates[0];\n    for (let d = 1; d < dimension; ++d) {\n      text += ',' + coordinates[d];\n    }\n    for (let i = stride; i < ii; i += stride) {\n      text += ' ' + coordinates[i];\n      for (let d = 1; d < dimension; ++d) {\n        text += ',' + coordinates[i + d];\n      }\n    }\n  }\n  writeStringTextNode(node, text);\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\n// @ts-ignore\nconst EXTENDEDDATA_NODE_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\n  'Data': makeChildAppender(writeDataNode),\n  'value': makeChildAppender(writeDataNodeValue),\n  'displayName': makeChildAppender(writeDataNodeName)\n});\n\n/**\n * @param {Element} node Node.\n * @param {{name: *, value: *}} pair Name value pair.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction writeDataNode(node, pair, objectStack) {\n  node.setAttribute('name', pair.name);\n  const /** @type {import(\"../xml.js\").NodeStackItem} */context = {\n    node: node\n  };\n  const value = pair.value;\n  if (typeof value == 'object') {\n    if (value !== null && value.displayName) {\n      pushSerializeAndPop(context, EXTENDEDDATA_NODE_SERIALIZERS, OBJECT_PROPERTY_NODE_FACTORY, [value.displayName], objectStack, ['displayName']);\n    }\n    if (value !== null && value.value) {\n      pushSerializeAndPop(context, EXTENDEDDATA_NODE_SERIALIZERS, OBJECT_PROPERTY_NODE_FACTORY, [value.value], objectStack, ['value']);\n    }\n  } else {\n    pushSerializeAndPop(context, EXTENDEDDATA_NODE_SERIALIZERS, OBJECT_PROPERTY_NODE_FACTORY, [value], objectStack, ['value']);\n  }\n}\n\n/**\n * @param {Node} node Node to append a TextNode with the name to.\n * @param {string} name DisplayName.\n */\nfunction writeDataNodeName(node, name) {\n  writeCDATASection(node, name);\n}\n\n/**\n * @param {Node} node Node to append a CDATA Section with the value to.\n * @param {string} value Value.\n */\nfunction writeDataNodeValue(node, value) {\n  writeStringTextNode(node, value);\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\n// @ts-ignore\nconst DOCUMENT_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\n  'Placemark': makeChildAppender(writePlacemark)\n});\n\n/**\n * @const\n * @param {*} value Value.\n * @param {Array<*>} objectStack Object stack.\n * @param {string} [nodeName] Node name.\n * @return {Node|undefined} Node.\n */\nconst DOCUMENT_NODE_FACTORY = function (value, objectStack, nodeName) {\n  const parentNode = objectStack[objectStack.length - 1].node;\n  return createElementNS(parentNode.namespaceURI, 'Placemark');\n};\n\n/**\n * @param {Element} node Node.\n * @param {Array<Feature>} features Features.\n * @param {Array<*>} objectStack Object stack.\n * @this {KML}\n */\nfunction writeDocument(node, features, objectStack) {\n  const /** @type {import(\"../xml.js\").NodeStackItem} */context = {\n    node: node\n  };\n  pushSerializeAndPop(context, DOCUMENT_SERIALIZERS, DOCUMENT_NODE_FACTORY, features, objectStack, undefined, this);\n}\n\n/**\n * A factory for creating Data nodes.\n * @const\n * @type {function(*, Array<*>): (Node|undefined)}\n */\nconst DATA_NODE_FACTORY = makeSimpleNodeFactory('Data');\n\n/**\n * @param {Element} node Node.\n * @param {{names: Array<string>, values: (Array<*>)}} namesAndValues Names and values.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction writeExtendedData(node, namesAndValues, objectStack) {\n  const /** @type {import(\"../xml.js\").NodeStackItem} */context = {\n    node: node\n  };\n  const names = namesAndValues.names;\n  const values = namesAndValues.values;\n  const length = names.length;\n  for (let i = 0; i < length; i++) {\n    pushSerializeAndPop(context, EXTENDEDDATA_NODE_SERIALIZERS, DATA_NODE_FACTORY, [{\n      name: names[i],\n      value: values[i]\n    }], objectStack);\n  }\n}\n\n/**\n * @const\n * @type {Object<string, Array<string>>}\n */\n// @ts-ignore\nconst ICON_SEQUENCE = makeStructureNS(NAMESPACE_URIS, ['href'], makeStructureNS(GX_NAMESPACE_URIS, ['x', 'y', 'w', 'h']));\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\n// @ts-ignore\nconst ICON_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\n  'href': makeChildAppender(writeStringTextNode)\n}, makeStructureNS(GX_NAMESPACE_URIS, {\n  'x': makeChildAppender(writeDecimalTextNode),\n  'y': makeChildAppender(writeDecimalTextNode),\n  'w': makeChildAppender(writeDecimalTextNode),\n  'h': makeChildAppender(writeDecimalTextNode)\n}));\n\n/**\n * @const\n * @param {*} value Value.\n * @param {Array<*>} objectStack Object stack.\n * @param {string} [nodeName] Node name.\n * @return {Node|undefined} Node.\n */\nconst GX_NODE_FACTORY = function (value, objectStack, nodeName) {\n  return createElementNS(GX_NAMESPACE_URIS[0], 'gx:' + nodeName);\n};\n\n/**\n * @param {Element} node Node.\n * @param {Object} icon Icon object.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction writeIcon(node, icon, objectStack) {\n  const /** @type {import(\"../xml.js\").NodeStackItem} */context = {\n    node: node\n  };\n  const parentNode = objectStack[objectStack.length - 1].node;\n  let orderedKeys = ICON_SEQUENCE[parentNode.namespaceURI];\n  let values = makeSequence(icon, orderedKeys);\n  pushSerializeAndPop(context, ICON_SERIALIZERS, OBJECT_PROPERTY_NODE_FACTORY, values, objectStack, orderedKeys);\n  orderedKeys = ICON_SEQUENCE[GX_NAMESPACE_URIS[0]];\n  values = makeSequence(icon, orderedKeys);\n  pushSerializeAndPop(context, ICON_SERIALIZERS, GX_NODE_FACTORY, values, objectStack, orderedKeys);\n}\n\n/**\n * @const\n * @type {Object<string, Array<string>>}\n */\n// @ts-ignore\nconst ICON_STYLE_SEQUENCE = makeStructureNS(NAMESPACE_URIS, ['scale', 'heading', 'Icon', 'color', 'hotSpot']);\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\n// @ts-ignore\nconst ICON_STYLE_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\n  'Icon': makeChildAppender(writeIcon),\n  'color': makeChildAppender(writeColorTextNode),\n  'heading': makeChildAppender(writeDecimalTextNode),\n  'hotSpot': makeChildAppender(writeVec2),\n  'scale': makeChildAppender(writeScaleTextNode)\n});\n\n/**\n * @param {Element} node Node.\n * @param {import(\"../style/Icon.js\").default} style Icon style.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction writeIconStyle(node, style, objectStack) {\n  const /** @type {import(\"../xml.js\").NodeStackItem} */context = {\n    node: node\n  };\n  const /** @type {Object<string, any>} */properties = {};\n  const src = style.getSrc();\n  const size = style.getSize();\n  const iconImageSize = style.getImageSize();\n  const iconProperties = {\n    'href': src\n  };\n  if (size) {\n    iconProperties['w'] = size[0];\n    iconProperties['h'] = size[1];\n    const anchor = style.getAnchor(); // top-left\n    const origin = style.getOrigin(); // top-left\n\n    if (origin && iconImageSize && origin[0] !== 0 && origin[1] !== size[1]) {\n      iconProperties['x'] = origin[0];\n      iconProperties['y'] = iconImageSize[1] - (origin[1] + size[1]);\n    }\n    if (anchor && (anchor[0] !== size[0] / 2 || anchor[1] !== size[1] / 2)) {\n      const /** @type {Vec2} */hotSpot = {\n        x: anchor[0],\n        xunits: 'pixels',\n        y: size[1] - anchor[1],\n        yunits: 'pixels'\n      };\n      properties['hotSpot'] = hotSpot;\n    }\n  }\n  properties['Icon'] = iconProperties;\n  let scale = style.getScaleArray()[0];\n  let imageSize = size;\n  if (imageSize === null) {\n    imageSize = DEFAULT_IMAGE_STYLE_SIZE;\n  }\n  if (imageSize.length == 2) {\n    const resizeScale = scaleForSize(imageSize);\n    scale = scale / resizeScale;\n  }\n  if (scale !== 1) {\n    properties['scale'] = scale;\n  }\n  const rotation = style.getRotation();\n  if (rotation !== 0) {\n    properties['heading'] = rotation; // 0-360\n  }\n  const color = style.getColor();\n  if (color) {\n    properties['color'] = color;\n  }\n  const parentNode = objectStack[objectStack.length - 1].node;\n  const orderedKeys = ICON_STYLE_SEQUENCE[parentNode.namespaceURI];\n  const values = makeSequence(properties, orderedKeys);\n  pushSerializeAndPop(context, ICON_STYLE_SERIALIZERS, OBJECT_PROPERTY_NODE_FACTORY, values, objectStack, orderedKeys);\n}\n\n/**\n * @const\n * @type {Object<string, Array<string>>}\n */\n// @ts-ignore\nconst LABEL_STYLE_SEQUENCE = makeStructureNS(NAMESPACE_URIS, ['color', 'scale']);\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\n// @ts-ignore\nconst LABEL_STYLE_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\n  'color': makeChildAppender(writeColorTextNode),\n  'scale': makeChildAppender(writeScaleTextNode)\n});\n\n/**\n * @param {Element} node Node.\n * @param {Text} style style.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction writeLabelStyle(node, style, objectStack) {\n  const /** @type {import(\"../xml.js\").NodeStackItem} */context = {\n    node: node\n  };\n  const properties = {};\n  const fill = style.getFill();\n  if (fill) {\n    properties['color'] = fill.getColor();\n  }\n  const scale = style.getScale();\n  if (scale && scale !== 1) {\n    properties['scale'] = scale;\n  }\n  const parentNode = objectStack[objectStack.length - 1].node;\n  const orderedKeys = LABEL_STYLE_SEQUENCE[parentNode.namespaceURI];\n  const values = makeSequence(properties, orderedKeys);\n  pushSerializeAndPop(context, LABEL_STYLE_SERIALIZERS, OBJECT_PROPERTY_NODE_FACTORY, values, objectStack, orderedKeys);\n}\n\n/**\n * @const\n * @type {Object<string, Array<string>>}\n */\n// @ts-ignore\nconst LINE_STYLE_SEQUENCE = makeStructureNS(NAMESPACE_URIS, ['color', 'width']);\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\n// @ts-ignore\nconst LINE_STYLE_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\n  'color': makeChildAppender(writeColorTextNode),\n  'width': makeChildAppender(writeDecimalTextNode)\n});\n\n/**\n * @param {Element} node Node.\n * @param {Stroke} style style.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction writeLineStyle(node, style, objectStack) {\n  const /** @type {import(\"../xml.js\").NodeStackItem} */context = {\n    node: node\n  };\n  const properties = {\n    'color': style.getColor(),\n    'width': Number(style.getWidth()) || 1\n  };\n  const parentNode = objectStack[objectStack.length - 1].node;\n  const orderedKeys = LINE_STYLE_SEQUENCE[parentNode.namespaceURI];\n  const values = makeSequence(properties, orderedKeys);\n  pushSerializeAndPop(context, LINE_STYLE_SERIALIZERS, OBJECT_PROPERTY_NODE_FACTORY, values, objectStack, orderedKeys);\n}\n\n/**\n * @const\n * @type {Object<string, string>}\n */\nconst GEOMETRY_TYPE_TO_NODENAME = {\n  'Point': 'Point',\n  'LineString': 'LineString',\n  'LinearRing': 'LinearRing',\n  'Polygon': 'Polygon',\n  'MultiPoint': 'MultiGeometry',\n  'MultiLineString': 'MultiGeometry',\n  'MultiPolygon': 'MultiGeometry',\n  'GeometryCollection': 'MultiGeometry'\n};\n\n/**\n * @const\n * @param {*} value Value.\n * @param {Array<*>} objectStack Object stack.\n * @param {string} [nodeName] Node name.\n * @return {Node|undefined} Node.\n */\nconst GEOMETRY_NODE_FACTORY = function (value, objectStack, nodeName) {\n  if (value) {\n    const parentNode = objectStack[objectStack.length - 1].node;\n    return createElementNS(parentNode.namespaceURI, GEOMETRY_TYPE_TO_NODENAME[/** @type {import(\"../geom/Geometry.js\").default} */value.getType()]);\n  }\n};\n\n/**\n * A factory for creating Point nodes.\n * @const\n * @type {function(*, Array<*>, string=): (Node|undefined)}\n */\nconst POINT_NODE_FACTORY = makeSimpleNodeFactory('Point');\n\n/**\n * A factory for creating LineString nodes.\n * @const\n * @type {function(*, Array<*>, string=): (Node|undefined)}\n */\nconst LINE_STRING_NODE_FACTORY = makeSimpleNodeFactory('LineString');\n\n/**\n * A factory for creating LinearRing nodes.\n * @const\n * @type {function(*, Array<*>, string=): (Node|undefined)}\n */\nconst LINEAR_RING_NODE_FACTORY = makeSimpleNodeFactory('LinearRing');\n\n/**\n * A factory for creating Polygon nodes.\n * @const\n * @type {function(*, Array<*>, string=): (Node|undefined)}\n */\nconst POLYGON_NODE_FACTORY = makeSimpleNodeFactory('Polygon');\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\n// @ts-ignore\nconst MULTI_GEOMETRY_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\n  'LineString': makeChildAppender(writePrimitiveGeometry),\n  'Point': makeChildAppender(writePrimitiveGeometry),\n  'Polygon': makeChildAppender(writePolygon),\n  'GeometryCollection': makeChildAppender(writeMultiGeometry)\n});\n\n/**\n * @param {Element} node Node.\n * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction writeMultiGeometry(node, geometry, objectStack) {\n  /** @type {import(\"../xml.js\").NodeStackItem} */\n  const context = {\n    node: node\n  };\n  const type = geometry.getType();\n  /** @type {Array<import(\"../geom/Geometry.js\").default>} */\n  let geometries = [];\n  /** @type {function(*, Array<*>, string=): (Node|undefined)} */\n  let factory;\n  if (type === 'GeometryCollection') {\n    /** @type {GeometryCollection} */geometry.getGeometriesArrayRecursive().forEach(function (geometry) {\n      const type = geometry.getType();\n      if (type === 'MultiPoint') {\n        geometries = geometries.concat(/** @type {MultiPoint} */geometry.getPoints());\n      } else if (type === 'MultiLineString') {\n        geometries = geometries.concat(/** @type {MultiLineString} */geometry.getLineStrings());\n      } else if (type === 'MultiPolygon') {\n        geometries = geometries.concat(/** @type {MultiPolygon} */geometry.getPolygons());\n      } else if (type === 'Point' || type === 'LineString' || type === 'Polygon') {\n        geometries.push(geometry);\n      } else {\n        throw new Error('Unknown geometry type');\n      }\n    });\n    factory = GEOMETRY_NODE_FACTORY;\n  } else if (type === 'MultiPoint') {\n    geometries = /** @type {MultiPoint} */geometry.getPoints();\n    factory = POINT_NODE_FACTORY;\n  } else if (type === 'MultiLineString') {\n    geometries = /** @type {MultiLineString} */geometry.getLineStrings();\n    factory = LINE_STRING_NODE_FACTORY;\n  } else if (type === 'MultiPolygon') {\n    geometries = /** @type {MultiPolygon} */geometry.getPolygons();\n    factory = POLYGON_NODE_FACTORY;\n  } else {\n    throw new Error('Unknown geometry type');\n  }\n  pushSerializeAndPop(context, MULTI_GEOMETRY_SERIALIZERS, factory, geometries, objectStack);\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\n// @ts-ignore\nconst BOUNDARY_IS_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\n  'LinearRing': makeChildAppender(writePrimitiveGeometry)\n});\n\n/**\n * @param {Element} node Node.\n * @param {import(\"../geom/LinearRing.js\").default} linearRing Linear ring.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction writeBoundaryIs(node, linearRing, objectStack) {\n  const /** @type {import(\"../xml.js\").NodeStackItem} */context = {\n    node: node\n  };\n  pushSerializeAndPop(context, BOUNDARY_IS_SERIALIZERS, LINEAR_RING_NODE_FACTORY, [linearRing], objectStack);\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\n// @ts-ignore\nconst PLACEMARK_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\n  'ExtendedData': makeChildAppender(writeExtendedData),\n  'MultiGeometry': makeChildAppender(writeMultiGeometry),\n  'LineString': makeChildAppender(writePrimitiveGeometry),\n  'LinearRing': makeChildAppender(writePrimitiveGeometry),\n  'Point': makeChildAppender(writePrimitiveGeometry),\n  'Polygon': makeChildAppender(writePolygon),\n  'Style': makeChildAppender(writeStyle),\n  'address': makeChildAppender(writeStringTextNode),\n  'description': makeChildAppender(writeStringTextNode),\n  'name': makeChildAppender(writeStringTextNode),\n  'open': makeChildAppender(writeBooleanTextNode),\n  'phoneNumber': makeChildAppender(writeStringTextNode),\n  'styleUrl': makeChildAppender(writeStringTextNode),\n  'visibility': makeChildAppender(writeBooleanTextNode)\n});\n\n/**\n * @const\n * @type {Object<string, Array<string>>}\n */\n// @ts-ignore\nconst PLACEMARK_SEQUENCE = makeStructureNS(NAMESPACE_URIS, ['name', 'open', 'visibility', 'address', 'phoneNumber', 'description', 'styleUrl', 'Style']);\n\n/**\n * A factory for creating ExtendedData nodes.\n * @const\n * @type {function(*, Array<*>): (Node|undefined)}\n */\nconst EXTENDEDDATA_NODE_FACTORY = makeSimpleNodeFactory('ExtendedData');\n\n/**\n * FIXME currently we do serialize arbitrary/custom feature properties\n * (ExtendedData).\n * @param {Element} node Node.\n * @param {Feature} feature Feature.\n * @param {Array<*>} objectStack Object stack.\n * @this {KML}\n */\nfunction writePlacemark(node, feature, objectStack) {\n  const /** @type {import(\"../xml.js\").NodeStackItem} */context = {\n    node: node\n  };\n\n  // set id\n  if (feature.getId()) {\n    node.setAttribute('id', /** @type {string} */feature.getId());\n  }\n\n  // serialize properties (properties unknown to KML are not serialized)\n  const properties = feature.getProperties();\n\n  // don't export these to ExtendedData\n  const filter = {\n    'address': 1,\n    'description': 1,\n    'name': 1,\n    'open': 1,\n    'phoneNumber': 1,\n    'styleUrl': 1,\n    'visibility': 1\n  };\n  filter[feature.getGeometryName()] = 1;\n  const keys = Object.keys(properties || {}).sort().filter(function (v) {\n    return !filter[v];\n  });\n  const styleFunction = feature.getStyleFunction();\n  if (styleFunction) {\n    // FIXME the styles returned by the style function are supposed to be\n    // resolution-independent here\n    const styles = styleFunction(feature, 0);\n    if (styles) {\n      const styleArray = Array.isArray(styles) ? styles : [styles];\n      let pointStyles = styleArray;\n      if (feature.getGeometry()) {\n        pointStyles = styleArray.filter(function (style) {\n          const geometry = style.getGeometryFunction()(feature);\n          if (geometry) {\n            const type = geometry.getType();\n            if (type === 'GeometryCollection') {\n              return /** @type {GeometryCollection} */geometry.getGeometriesArrayRecursive().filter(function (geometry) {\n                const type = geometry.getType();\n                return type === 'Point' || type === 'MultiPoint';\n              }).length;\n            }\n            return type === 'Point' || type === 'MultiPoint';\n          }\n        });\n        'Point';\n      }\n      if (this.writeStyles_) {\n        let lineStyles = styleArray;\n        let polyStyles = styleArray;\n        if (feature.getGeometry()) {\n          lineStyles = styleArray.filter(function (style) {\n            const geometry = style.getGeometryFunction()(feature);\n            if (geometry) {\n              const type = geometry.getType();\n              if (type === 'GeometryCollection') {\n                return /** @type {GeometryCollection} */geometry.getGeometriesArrayRecursive().filter(function (geometry) {\n                  const type = geometry.getType();\n                  return type === 'LineString' || type === 'MultiLineString';\n                }).length;\n              }\n              return type === 'LineString' || type === 'MultiLineString';\n            }\n          });\n          polyStyles = styleArray.filter(function (style) {\n            const geometry = style.getGeometryFunction()(feature);\n            if (geometry) {\n              const type = geometry.getType();\n              if (type === 'GeometryCollection') {\n                return /** @type {GeometryCollection} */geometry.getGeometriesArrayRecursive().filter(function (geometry) {\n                  const type = geometry.getType();\n                  return type === 'Polygon' || type === 'MultiPolygon';\n                }).length;\n              }\n              return type === 'Polygon' || type === 'MultiPolygon';\n            }\n          });\n        }\n        properties['Style'] = {\n          pointStyles: pointStyles,\n          lineStyles: lineStyles,\n          polyStyles: polyStyles\n        };\n      }\n      if (pointStyles.length && properties['name'] === undefined) {\n        const textStyle = pointStyles[0].getText();\n        if (textStyle) {\n          properties['name'] = textStyle.getText();\n        }\n      }\n    }\n  }\n  const parentNode = objectStack[objectStack.length - 1].node;\n  const orderedKeys = PLACEMARK_SEQUENCE[parentNode.namespaceURI];\n  const values = makeSequence(properties, orderedKeys);\n  pushSerializeAndPop(context, PLACEMARK_SERIALIZERS, OBJECT_PROPERTY_NODE_FACTORY, values, objectStack, orderedKeys);\n  if (keys.length > 0) {\n    const sequence = makeSequence(properties, keys);\n    const namesAndValues = {\n      names: keys,\n      values: sequence\n    };\n    pushSerializeAndPop(context, PLACEMARK_SERIALIZERS, EXTENDEDDATA_NODE_FACTORY, [namesAndValues], objectStack);\n  }\n\n  // serialize geometry\n  const options = /** @type {import(\"./Feature.js\").WriteOptions} */\n  objectStack[0];\n  let geometry = feature.getGeometry();\n  if (geometry) {\n    geometry = transformGeometryWithOptions(geometry, true, options);\n  }\n  pushSerializeAndPop(context, PLACEMARK_SERIALIZERS, GEOMETRY_NODE_FACTORY, [geometry], objectStack);\n}\n\n/**\n * @const\n * @type {Object<string, Array<string>>}\n */\n// @ts-ignore\nconst PRIMITIVE_GEOMETRY_SEQUENCE = makeStructureNS(NAMESPACE_URIS, ['extrude', 'tessellate', 'altitudeMode', 'coordinates']);\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\n// @ts-ignore\nconst PRIMITIVE_GEOMETRY_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\n  'extrude': makeChildAppender(writeBooleanTextNode),\n  'tessellate': makeChildAppender(writeBooleanTextNode),\n  'altitudeMode': makeChildAppender(writeStringTextNode),\n  'coordinates': makeChildAppender(writeCoordinatesTextNode)\n});\n\n/**\n * @param {Element} node Node.\n * @param {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction writePrimitiveGeometry(node, geometry, objectStack) {\n  const flatCoordinates = geometry.getFlatCoordinates();\n  const /** @type {import(\"../xml.js\").NodeStackItem} */context = {\n    node: node\n  };\n  context['layout'] = geometry.getLayout();\n  context['stride'] = geometry.getStride();\n\n  // serialize properties (properties unknown to KML are not serialized)\n  const properties = geometry.getProperties();\n  properties.coordinates = flatCoordinates;\n  const parentNode = objectStack[objectStack.length - 1].node;\n  const orderedKeys = PRIMITIVE_GEOMETRY_SEQUENCE[parentNode.namespaceURI];\n  const values = makeSequence(properties, orderedKeys);\n  pushSerializeAndPop(context, PRIMITIVE_GEOMETRY_SERIALIZERS, OBJECT_PROPERTY_NODE_FACTORY, values, objectStack, orderedKeys);\n}\n\n/**\n * @const\n * @type {Object<string, Array<string>>}\n */\n// @ts-ignore\nconst POLY_STYLE_SEQUENCE = makeStructureNS(NAMESPACE_URIS, ['color', 'fill', 'outline']);\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\n// @ts-ignore\nconst POLYGON_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\n  'outerBoundaryIs': makeChildAppender(writeBoundaryIs),\n  'innerBoundaryIs': makeChildAppender(writeBoundaryIs)\n});\n\n/**\n * A factory for creating innerBoundaryIs nodes.\n * @const\n * @type {function(*, Array<*>, string=): (Node|undefined)}\n */\nconst INNER_BOUNDARY_NODE_FACTORY = makeSimpleNodeFactory('innerBoundaryIs');\n\n/**\n * A factory for creating outerBoundaryIs nodes.\n * @const\n * @type {function(*, Array<*>, string=): (Node|undefined)}\n */\nconst OUTER_BOUNDARY_NODE_FACTORY = makeSimpleNodeFactory('outerBoundaryIs');\n\n/**\n * @param {Element} node Node.\n * @param {Polygon} polygon Polygon.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction writePolygon(node, polygon, objectStack) {\n  const linearRings = polygon.getLinearRings();\n  const outerRing = linearRings.shift();\n  const /** @type {import(\"../xml.js\").NodeStackItem} */context = {\n    node: node\n  };\n  // inner rings\n  pushSerializeAndPop(context, POLYGON_SERIALIZERS, INNER_BOUNDARY_NODE_FACTORY, linearRings, objectStack);\n  // outer ring\n  pushSerializeAndPop(context, POLYGON_SERIALIZERS, OUTER_BOUNDARY_NODE_FACTORY, [outerRing], objectStack);\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\n// @ts-ignore\nconst POLY_STYLE_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\n  'color': makeChildAppender(writeColorTextNode),\n  'fill': makeChildAppender(writeBooleanTextNode),\n  'outline': makeChildAppender(writeBooleanTextNode)\n});\n\n/**\n * @param {Element} node Node.\n * @param {Style} style Style.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction writePolyStyle(node, style, objectStack) {\n  const /** @type {import(\"../xml.js\").NodeStackItem} */context = {\n    node: node\n  };\n  const fill = style.getFill();\n  const stroke = style.getStroke();\n  const properties = {\n    'color': fill ? fill.getColor() : undefined,\n    'fill': fill ? undefined : false,\n    'outline': stroke ? undefined : false\n  };\n  const parentNode = objectStack[objectStack.length - 1].node;\n  const orderedKeys = POLY_STYLE_SEQUENCE[parentNode.namespaceURI];\n  const values = makeSequence(properties, orderedKeys);\n  pushSerializeAndPop(context, POLY_STYLE_SERIALIZERS, OBJECT_PROPERTY_NODE_FACTORY, values, objectStack, orderedKeys);\n}\n\n/**\n * @param {Node} node Node to append a TextNode with the scale to.\n * @param {number|undefined} scale Scale.\n */\nfunction writeScaleTextNode(node, scale) {\n  // the Math is to remove any excess decimals created by float arithmetic\n  writeDecimalTextNode(node, Math.round(scale * 1e6) / 1e6);\n}\n\n/**\n * @const\n * @type {Object<string, Array<string>>}\n */\n// @ts-ignore\nconst STYLE_SEQUENCE = makeStructureNS(NAMESPACE_URIS, ['IconStyle', 'LabelStyle', 'LineStyle', 'PolyStyle']);\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\n// @ts-ignore\nconst STYLE_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\n  'IconStyle': makeChildAppender(writeIconStyle),\n  'LabelStyle': makeChildAppender(writeLabelStyle),\n  'LineStyle': makeChildAppender(writeLineStyle),\n  'PolyStyle': makeChildAppender(writePolyStyle)\n});\n\n/**\n * @param {Element} node Node.\n * @param {Object<string, Array<Style>>} styles Styles.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction writeStyle(node, styles, objectStack) {\n  const /** @type {import(\"../xml.js\").NodeStackItem} */context = {\n    node: node\n  };\n  const properties = {};\n  if (styles.pointStyles.length) {\n    const textStyle = styles.pointStyles[0].getText();\n    if (textStyle) {\n      properties['LabelStyle'] = textStyle;\n    }\n    const imageStyle = styles.pointStyles[0].getImage();\n    if (imageStyle && typeof (/** @type {?} */imageStyle.getSrc) === 'function') {\n      properties['IconStyle'] = imageStyle;\n    }\n  }\n  if (styles.lineStyles.length) {\n    const strokeStyle = styles.lineStyles[0].getStroke();\n    if (strokeStyle) {\n      properties['LineStyle'] = strokeStyle;\n    }\n  }\n  if (styles.polyStyles.length) {\n    const strokeStyle = styles.polyStyles[0].getStroke();\n    if (strokeStyle && !properties['LineStyle']) {\n      properties['LineStyle'] = strokeStyle;\n    }\n    properties['PolyStyle'] = styles.polyStyles[0];\n  }\n  const parentNode = objectStack[objectStack.length - 1].node;\n  const orderedKeys = STYLE_SEQUENCE[parentNode.namespaceURI];\n  const values = makeSequence(properties, orderedKeys);\n  pushSerializeAndPop(context, STYLE_SERIALIZERS, OBJECT_PROPERTY_NODE_FACTORY, values, objectStack, orderedKeys);\n}\n\n/**\n * @param {Element} node Node to append a TextNode with the Vec2 to.\n * @param {Vec2} vec2 Vec2.\n */\nfunction writeVec2(node, vec2) {\n  node.setAttribute('x', String(vec2.x));\n  node.setAttribute('y', String(vec2.y));\n  node.setAttribute('xunits', vec2.xunits);\n  node.setAttribute('yunits', vec2.yunits);\n}\nexport default KML;", "/**\n * @module ol/format/GML32\n */\nimport GML2 from './GML2.js';\nimport GML3 from './GML3.js';\nimport GMLBase from './GMLBase.js';\nimport { makeArrayExtender, makeArrayPusher, makeChildAppender, makeReplacer } from '../xml.js';\nimport { writeStringTextNode } from '../format/xsd.js';\n\n/**\n * @classdesc Feature format for reading and writing data in the GML format\n *            version 3.2.1.\n * @api\n */\nclass GML32 extends GML3 {\n  /**\n   * @param {import(\"./GMLBase.js\").Options} [options] Optional configuration object.\n   */\n  constructor(options) {\n    options = options ? options : {};\n    super(options);\n\n    /**\n     * @type {string}\n     */\n    this.schemaLocation = options.schemaLocation ? options.schemaLocation : this.namespace + ' http://schemas.opengis.net/gml/3.2.1/gml.xsd';\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"../geom/Geometry.js\").default|import(\"../extent.js\").Extent} geometry Geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @override\n   */\n  writeGeometryElement(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    objectStack[objectStack.length - 1] = Object.assign({\n      multiCurve: true,\n      multiSurface: true\n    }, context);\n    super.writeGeometryElement(node, geometry, objectStack);\n  }\n}\nGML32.prototype.namespace = 'http://www.opengis.net/gml/3.2';\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.GEOMETRY_FLAT_COORDINATES_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'pos': makeReplacer(GML3.prototype.readFlatPos),\n    'posList': makeReplacer(GML3.prototype.readFlatPosList),\n    'coordinates': makeReplacer(GML2.prototype.readFlatCoordinates)\n  }\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.FLAT_LINEAR_RINGS_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'interior': GML3.prototype.interiorParser,\n    'exterior': GML3.prototype.exteriorParser\n  }\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.GEOMETRY_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'Point': makeReplacer(GMLBase.prototype.readPoint),\n    'MultiPoint': makeReplacer(GMLBase.prototype.readMultiPoint),\n    'LineString': makeReplacer(GMLBase.prototype.readLineString),\n    'MultiLineString': makeReplacer(GMLBase.prototype.readMultiLineString),\n    'LinearRing': makeReplacer(GMLBase.prototype.readLinearRing),\n    'Polygon': makeReplacer(GMLBase.prototype.readPolygon),\n    'MultiPolygon': makeReplacer(GMLBase.prototype.readMultiPolygon),\n    'Surface': makeReplacer(GML32.prototype.readSurface),\n    'MultiSurface': makeReplacer(GML3.prototype.readMultiSurface),\n    'Curve': makeReplacer(GML32.prototype.readCurve),\n    'MultiCurve': makeReplacer(GML3.prototype.readMultiCurve),\n    'Envelope': makeReplacer(GML32.prototype.readEnvelope)\n  }\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.MULTICURVE_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'curveMember': makeArrayPusher(GML3.prototype.curveMemberParser),\n    'curveMembers': makeArrayPusher(GML3.prototype.curveMemberParser)\n  }\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.MULTISURFACE_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'surfaceMember': makeArrayPusher(GML3.prototype.surfaceMemberParser),\n    'surfaceMembers': makeArrayPusher(GML3.prototype.surfaceMemberParser)\n  }\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.CURVEMEMBER_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'LineString': makeArrayPusher(GMLBase.prototype.readLineString),\n    'Curve': makeArrayPusher(GML3.prototype.readCurve)\n  }\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.SURFACEMEMBER_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'Polygon': makeArrayPusher(GMLBase.prototype.readPolygon),\n    'Surface': makeArrayPusher(GML3.prototype.readSurface)\n  }\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.SURFACE_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'patches': makeReplacer(GML3.prototype.readPatch)\n  }\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.CURVE_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'segments': makeReplacer(GML3.prototype.readSegment)\n  }\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.ENVELOPE_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'lowerCorner': makeArrayPusher(GML3.prototype.readFlatPosList),\n    'upperCorner': makeArrayPusher(GML3.prototype.readFlatPosList)\n  }\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.PATCHES_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'PolygonPatch': makeReplacer(GML3.prototype.readPolygonPatch)\n  }\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.SEGMENTS_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'LineStringSegment': makeArrayExtender(GML3.prototype.readLineStringSegment)\n  }\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.MULTIPOINT_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'pointMember': makeArrayPusher(GMLBase.prototype.pointMemberParser),\n    'pointMembers': makeArrayPusher(GMLBase.prototype.pointMemberParser)\n  }\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.MULTILINESTRING_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'lineStringMember': makeArrayPusher(GMLBase.prototype.lineStringMemberParser),\n    'lineStringMembers': makeArrayPusher(GMLBase.prototype.lineStringMemberParser)\n  }\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.MULTIPOLYGON_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'polygonMember': makeArrayPusher(GMLBase.prototype.polygonMemberParser),\n    'polygonMembers': makeArrayPusher(GMLBase.prototype.polygonMemberParser)\n  }\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.POINTMEMBER_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'Point': makeArrayPusher(GMLBase.prototype.readFlatCoordinatesFromNode)\n  }\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.LINESTRINGMEMBER_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'LineString': makeArrayPusher(GMLBase.prototype.readLineString)\n  }\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.POLYGONMEMBER_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'Polygon': makeArrayPusher(GMLBase.prototype.readPolygon)\n  }\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.RING_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'LinearRing': makeReplacer(GMLBase.prototype.readFlatLinearRing),\n    'Ring': makeReplacer(GML32.prototype.readFlatCurveRing)\n  }\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML32.prototype.RING_SERIALIZERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'exterior': makeChildAppender(GML3.prototype.writeRing),\n    'interior': makeChildAppender(GML3.prototype.writeRing)\n  }\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML32.prototype.ENVELOPE_SERIALIZERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'lowerCorner': makeChildAppender(writeStringTextNode),\n    'upperCorner': makeChildAppender(writeStringTextNode)\n  }\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML32.prototype.SURFACEORPOLYGONMEMBER_SERIALIZERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'surfaceMember': makeChildAppender(GML3.prototype.writeSurfaceOrPolygonMember),\n    'polygonMember': makeChildAppender(GML3.prototype.writeSurfaceOrPolygonMember)\n  }\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML32.prototype.POINTMEMBER_SERIALIZERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'pointMember': makeChildAppender(GML3.prototype.writePointMember)\n  }\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML32.prototype.LINESTRINGORCURVEMEMBER_SERIALIZERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'lineStringMember': makeChildAppender(GML3.prototype.writeLineStringOrCurveMember),\n    'curveMember': makeChildAppender(GML3.prototype.writeLineStringOrCurveMember)\n  }\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML32.prototype.GEOMETRY_SERIALIZERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'Curve': makeChildAppender(GML3.prototype.writeCurveOrLineString),\n    'MultiCurve': makeChildAppender(GML3.prototype.writeMultiCurveOrLineString),\n    'Point': makeChildAppender(GML32.prototype.writePoint),\n    'MultiPoint': makeChildAppender(GML3.prototype.writeMultiPoint),\n    'LineString': makeChildAppender(GML3.prototype.writeCurveOrLineString),\n    'MultiLineString': makeChildAppender(GML3.prototype.writeMultiCurveOrLineString),\n    'LinearRing': makeChildAppender(GML3.prototype.writeLinearRing),\n    'Polygon': makeChildAppender(GML3.prototype.writeSurfaceOrPolygon),\n    'MultiPolygon': makeChildAppender(GML3.prototype.writeMultiSurfaceOrPolygon),\n    'Surface': makeChildAppender(GML3.prototype.writeSurfaceOrPolygon),\n    'MultiSurface': makeChildAppender(GML3.prototype.writeMultiSurfaceOrPolygon),\n    'Envelope': makeChildAppender(GML3.prototype.writeEnvelope)\n  }\n};\nexport default GML32;", "/**\n * @module ol/format/WFS\n */\nimport GML2 from './GML2.js';\nimport GML3 from './GML3.js';\nimport GML32 from './GML32.js';\nimport GMLBase, { GMLNS } from './GMLBase.js';\nimport XMLFeature from './XMLFeature.js';\nimport { XML_SCHEMA_INSTANCE_URI, createElementNS, isDocument, makeArrayPusher, makeChildAppender, makeObjectPropertySetter, makeSimpleNodeFactory, parse, parseNode, pushParseAndPop, pushSerializeAndPop } from '../xml.js';\nimport { and as andFilterFn, bbox as bboxFilterFn } from './filter.js';\nimport { assert } from '../asserts.js';\nimport { get as getProjection } from '../proj.js';\nimport { readNonNegativeIntegerString, readPositiveInteger, writeStringTextNode } from './xsd.js';\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nconst FEATURE_COLLECTION_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'boundedBy': makeObjectPropertySetter(GMLBase.prototype.readExtentElement, 'bounds')\n  },\n  'http://www.opengis.net/wfs/2.0': {\n    'member': makeArrayPusher(GMLBase.prototype.readFeaturesInternal)\n  }\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nconst TRANSACTION_SUMMARY_PARSERS = {\n  'http://www.opengis.net/wfs': {\n    'totalInserted': makeObjectPropertySetter(readPositiveInteger),\n    'totalUpdated': makeObjectPropertySetter(readPositiveInteger),\n    'totalDeleted': makeObjectPropertySetter(readPositiveInteger)\n  },\n  'http://www.opengis.net/wfs/2.0': {\n    'totalInserted': makeObjectPropertySetter(readPositiveInteger),\n    'totalUpdated': makeObjectPropertySetter(readPositiveInteger),\n    'totalDeleted': makeObjectPropertySetter(readPositiveInteger)\n  }\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nconst TRANSACTION_RESPONSE_PARSERS = {\n  'http://www.opengis.net/wfs': {\n    'TransactionSummary': makeObjectPropertySetter(readTransactionSummary, 'transactionSummary'),\n    'InsertResults': makeObjectPropertySetter(readInsertResults, 'insertIds')\n  },\n  'http://www.opengis.net/wfs/2.0': {\n    'TransactionSummary': makeObjectPropertySetter(readTransactionSummary, 'transactionSummary'),\n    'InsertResults': makeObjectPropertySetter(readInsertResults, 'insertIds')\n  }\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nconst QUERY_SERIALIZERS = {\n  'http://www.opengis.net/wfs': {\n    'PropertyName': makeChildAppender(writeStringTextNode)\n  },\n  'http://www.opengis.net/wfs/2.0': {\n    'PropertyName': makeChildAppender(writeStringTextNode)\n  }\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nconst TRANSACTION_SERIALIZERS = {\n  'http://www.opengis.net/wfs': {\n    'Insert': makeChildAppender(writeFeature),\n    'Update': makeChildAppender(writeUpdate),\n    'Delete': makeChildAppender(writeDelete),\n    'Property': makeChildAppender(writeProperty),\n    'Native': makeChildAppender(writeNative)\n  },\n  'http://www.opengis.net/wfs/2.0': {\n    'Insert': makeChildAppender(writeFeature),\n    'Update': makeChildAppender(writeUpdate),\n    'Delete': makeChildAppender(writeDelete),\n    'Property': makeChildAppender(writeProperty),\n    'Native': makeChildAppender(writeNative)\n  }\n};\n\n/**\n * @typedef {Object} Options\n * @property {Object<string, string>|string} [featureNS] The namespace URI used for features.\n * @property {Array<string>|string} [featureType] The feature type to parse. Only used for read operations.\n * @property {GMLBase} [gmlFormat] The GML format to use to parse the response.\n * Default is `ol/format/GML2` for WFS 1.0.0, `ol/format/GML3` for WFS 1.1.0 and `ol/format/GML32` for WFS 2.0.0.\n * @property {string} [schemaLocation] Optional schemaLocation to use for serialization, this will override the default.\n * @property {string} [version='1.1.0'] WFS version to use. Can be either `1.0.0`, `1.1.0` or `2.0.0`.\n */\n\n/**\n * @typedef {Object} WriteGetFeatureOptions\n * @property {string} featureNS The namespace URI used for features.\n * @property {string} featurePrefix The prefix for the feature namespace.\n * @property {Array<string|FeatureType>} featureTypes The feature type names or FeatureType objects to\n * define a unique bbox filter per feature type name (in this case, options `bbox` and `geometryName` are\n * ignored.).\n * @property {string} [srsName] SRS name. No srsName attribute will be set on\n * geometries when this is not provided.\n * @property {string} [handle] Handle.\n * @property {string} [outputFormat] Output format.\n * @property {number} [maxFeatures] Maximum number of features to fetch.\n * @property {string} [geometryName] Geometry name to use in a BBOX filter.\n * @property {Array<string>} [propertyNames] Optional list of property names to serialize.\n * @property {string} [viewParams] viewParams GeoServer vendor parameter.\n * @property {number} [startIndex] Start index to use for WFS paging. This is a\n * WFS 2.0 feature backported to WFS 1.1.0 by some Web Feature Services.\n * @property {number} [count] Number of features to retrieve when paging. This is a\n * WFS 2.0 feature backported to WFS 1.1.0 by some Web Feature Services. Please note that some\n * Web Feature Services have repurposed `maxfeatures` instead.\n * @property {import(\"../extent.js\").Extent} [bbox] Extent to use for the BBOX filter. The `geometryName`\n * option must be set.\n * @property {import(\"./filter/Filter.js\").default} [filter] Filter condition. See\n * {@link module:ol/format/filter} for more information.\n * @property {string} [resultType] Indicates what response should be returned,\n * e.g. `hits` only includes the `numberOfFeatures` attribute in the response and no features.\n */\n\n/**\n * @typedef {Object} FeatureType\n * @property {!string} name The feature type name.\n * @property {!import(\"../extent.js\").Extent} bbox Extent to use for the BBOX filter.\n * @property {!string} geometryName Geometry name to use in the BBOX filter.\n */\n\n/**\n * @typedef {Object} WriteTransactionOptions\n * @property {string} featureNS The namespace URI used for features.\n * @property {string} featurePrefix The prefix for the feature namespace.\n * @property {string} featureType The feature type name.\n * @property {string} [srsName] SRS name. No srsName attribute will be set on\n * geometries when this is not provided.\n * @property {string} [handle] Handle.\n * @property {boolean} [hasZ] Must be set to true if the transaction is for\n * a 3D layer. This will allow the Z coordinate to be included in the transaction.\n * @property {Array<Object>} nativeElements Native elements. Currently not supported.\n * @property {import(\"./GMLBase.js\").Options} [gmlOptions] GML options for the WFS transaction writer.\n * @property {string} [version='1.1.0'] WFS version to use for the transaction. Can be either `1.0.0`, `1.1.0` or `2.0.0`.\n */\n\n/**\n * Number of features; bounds/extent.\n * @typedef {Object} FeatureCollectionMetadata\n * @property {number} numberOfFeatures NumberOfFeatures.\n * @property {import(\"../extent.js\").Extent} bounds Bounds.\n */\n\n/**\n * @typedef {Object} TransactionSummary\n * @property {number} totalDeleted TotalDeleted.\n * @property {number} totalInserted TotalInserted.\n * @property {number} totalUpdated TotalUpdated.\n */\n\n/**\n * Total deleted; total inserted; total updated; array of insert ids.\n * @typedef {Object} TransactionResponse\n * @property {TransactionSummary} transactionSummary Transaction summary.\n * @property {Array<string>} insertIds InsertIds.\n */\n\n/**\n * @type {string}\n */\nconst FEATURE_PREFIX = 'feature';\n\n/**\n * @type {string}\n */\nconst XMLNS = 'http://www.w3.org/2000/xmlns/';\n\n/**\n * @type {Object<string, string>}\n */\nconst OGCNS = {\n  '2.0.0': 'http://www.opengis.net/ogc/1.1',\n  '1.1.0': 'http://www.opengis.net/ogc',\n  '1.0.0': 'http://www.opengis.net/ogc'\n};\n\n/**\n * @type {Object<string, string>}\n */\nconst WFSNS = {\n  '2.0.0': 'http://www.opengis.net/wfs/2.0',\n  '1.1.0': 'http://www.opengis.net/wfs',\n  '1.0.0': 'http://www.opengis.net/wfs'\n};\n\n/**\n * @type {Object<string, string>}\n */\nconst FESNS = {\n  '2.0.0': 'http://www.opengis.net/fes/2.0',\n  '1.1.0': 'http://www.opengis.net/fes',\n  '1.0.0': 'http://www.opengis.net/fes'\n};\n\n/**\n * @type {Object<string, string>}\n */\nconst SCHEMA_LOCATIONS = {\n  '2.0.0': 'http://www.opengis.net/wfs/2.0 http://schemas.opengis.net/wfs/2.0/wfs.xsd',\n  '1.1.0': 'http://www.opengis.net/wfs http://schemas.opengis.net/wfs/1.1.0/wfs.xsd',\n  '1.0.0': 'http://www.opengis.net/wfs http://schemas.opengis.net/wfs/1.0.0/wfs.xsd'\n};\n\n/**\n * @type {Object<string, object>}\n */\nconst GML_FORMATS = {\n  '2.0.0': GML32,\n  '1.1.0': GML3,\n  '1.0.0': GML2\n};\n\n/**\n * @const\n * @type {string}\n */\nconst DEFAULT_VERSION = '1.1.0';\n\n/**\n * @classdesc\n * Feature format for reading and writing data in the WFS format.\n * By default, supports WFS version 1.1.0. You can pass a GML format\n * as option to override the default.\n * Also see {@link module:ol/format/GMLBase~GMLBase} which is used by this format.\n *\n * @api\n */\nclass WFS extends XMLFeature {\n  /**\n   * @param {Options} [options] Optional configuration object.\n   */\n  constructor(options) {\n    super();\n    options = options ? options : {};\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.version_ = options.version ? options.version : DEFAULT_VERSION;\n\n    /**\n     * @private\n     * @type {Array<string>|string|undefined}\n     */\n    this.featureType_ = options.featureType;\n\n    /**\n     * @private\n     * @type {Object<string, string>|string|undefined}\n     */\n    this.featureNS_ = options.featureNS;\n\n    /**\n     * @private\n     * @type {GMLBase}\n     */\n    this.gmlFormat_ = options.gmlFormat ? options.gmlFormat : new GML_FORMATS[this.version_]();\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.schemaLocation_ = options.schemaLocation ? options.schemaLocation : SCHEMA_LOCATIONS[this.version_];\n  }\n\n  /**\n   * @return {Array<string>|string|undefined} featureType\n   */\n  getFeatureType() {\n    return this.featureType_;\n  }\n\n  /**\n   * @param {Array<string>|string|undefined} featureType Feature type(s) to parse.\n   */\n  setFeatureType(featureType) {\n    this.featureType_ = featureType;\n  }\n\n  /**\n   * @protected\n   * @param {Element} node Node.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Options.\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   * @override\n   */\n  readFeaturesFromNode(node, options) {\n    /** @type {import(\"../xml.js\").NodeStackItem} */\n    const context = {\n      node\n    };\n    Object.assign(context, {\n      'featureType': this.featureType_,\n      'featureNS': this.featureNS_\n    });\n    Object.assign(context, this.getReadOptions(node, options ? options : {}));\n    const objectStack = [context];\n    let featuresNS;\n    if (this.version_ === '2.0.0') {\n      featuresNS = FEATURE_COLLECTION_PARSERS;\n    } else {\n      featuresNS = this.gmlFormat_.FEATURE_COLLECTION_PARSERS;\n    }\n    let features = pushParseAndPop([], featuresNS, node, objectStack, this.gmlFormat_);\n    if (!features) {\n      features = [];\n    }\n    return features;\n  }\n\n  /**\n   * Read transaction response of the source.\n   *\n   * @param {Document|Element|Object|string} source Source.\n   * @return {TransactionResponse|undefined} Transaction response.\n   * @api\n   */\n  readTransactionResponse(source) {\n    if (!source) {\n      return undefined;\n    }\n    if (typeof source === 'string') {\n      const doc = parse(source);\n      return this.readTransactionResponseFromDocument(doc);\n    }\n    if (isDocument(source)) {\n      return this.readTransactionResponseFromDocument(/** @type {Document} */source);\n    }\n    return this.readTransactionResponseFromNode(/** @type {Element} */source);\n  }\n\n  /**\n   * Read feature collection metadata of the source.\n   *\n   * @param {Document|Element|Object|string} source Source.\n   * @return {FeatureCollectionMetadata|undefined}\n   *     FeatureCollection metadata.\n   * @api\n   */\n  readFeatureCollectionMetadata(source) {\n    if (!source) {\n      return undefined;\n    }\n    if (typeof source === 'string') {\n      const doc = parse(source);\n      return this.readFeatureCollectionMetadataFromDocument(doc);\n    }\n    if (isDocument(source)) {\n      return this.readFeatureCollectionMetadataFromDocument(/** @type {Document} */source);\n    }\n    return this.readFeatureCollectionMetadataFromNode(/** @type {Element} */source);\n  }\n\n  /**\n   * @param {Document} doc Document.\n   * @return {FeatureCollectionMetadata|undefined}\n   *     FeatureCollection metadata.\n   */\n  readFeatureCollectionMetadataFromDocument(doc) {\n    for (let n = /** @type {Node} */doc.firstChild; n; n = n.nextSibling) {\n      if (n.nodeType == Node.ELEMENT_NODE) {\n        return this.readFeatureCollectionMetadataFromNode(/** @type {Element} */n);\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @return {FeatureCollectionMetadata|undefined}\n   *     FeatureCollection metadata.\n   */\n  readFeatureCollectionMetadataFromNode(node) {\n    const result = {};\n    const value = readNonNegativeIntegerString(node.getAttribute('numberOfFeatures'));\n    result['numberOfFeatures'] = value;\n    return pushParseAndPop(/** @type {FeatureCollectionMetadata} */result, FEATURE_COLLECTION_PARSERS, node, [], this.gmlFormat_);\n  }\n\n  /**\n   * @param {Document} doc Document.\n   * @return {TransactionResponse|undefined} Transaction response.\n   */\n  readTransactionResponseFromDocument(doc) {\n    for (let n = /** @type {Node} */doc.firstChild; n; n = n.nextSibling) {\n      if (n.nodeType == Node.ELEMENT_NODE) {\n        return this.readTransactionResponseFromNode(/** @type {Element} */n);\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @return {TransactionResponse|undefined} Transaction response.\n   */\n  readTransactionResponseFromNode(node) {\n    return pushParseAndPop(/** @type {TransactionResponse} */{}, TRANSACTION_RESPONSE_PARSERS, node, []);\n  }\n\n  /**\n   * Encode format as WFS `GetFeature` and return the Node.\n   *\n   * @param {WriteGetFeatureOptions} options Options.\n   * @return {Node} Result.\n   * @api\n   */\n  writeGetFeature(options) {\n    const node = createElementNS(WFSNS[this.version_], 'GetFeature');\n    node.setAttribute('service', 'WFS');\n    node.setAttribute('version', this.version_);\n    if (options.handle) {\n      node.setAttribute('handle', options.handle);\n    }\n    if (options.outputFormat) {\n      node.setAttribute('outputFormat', options.outputFormat);\n    }\n    if (options.maxFeatures !== undefined) {\n      node.setAttribute('maxFeatures', String(options.maxFeatures));\n    }\n    if (options.resultType) {\n      node.setAttribute('resultType', options.resultType);\n    }\n    if (options.startIndex !== undefined) {\n      node.setAttribute('startIndex', String(options.startIndex));\n    }\n    if (options.count !== undefined) {\n      node.setAttribute('count', String(options.count));\n    }\n    if (options.viewParams !== undefined) {\n      node.setAttribute('viewParams', options.viewParams);\n    }\n    node.setAttributeNS(XML_SCHEMA_INSTANCE_URI, 'xsi:schemaLocation', this.schemaLocation_);\n    /** @type {import(\"../xml.js\").NodeStackItem} */\n    const context = {\n      node\n    };\n    Object.assign(context, {\n      'version': this.version_,\n      'srsName': options.srsName,\n      'featureNS': options.featureNS ? options.featureNS : this.featureNS_,\n      'featurePrefix': options.featurePrefix,\n      'propertyNames': options.propertyNames ? options.propertyNames : []\n    });\n    assert(Array.isArray(options.featureTypes), '`options.featureTypes` must be an Array');\n    if (typeof options.featureTypes[0] === 'string') {\n      let filter = options.filter;\n      if (options.bbox) {\n        assert(options.geometryName, '`options.geometryName` must also be provided when `options.bbox` is set');\n        filter = this.combineBboxAndFilter(options.geometryName, options.bbox, options.srsName, filter);\n      }\n      Object.assign(context, {\n        'geometryName': options.geometryName,\n        'filter': filter\n      });\n      writeGetFeature(node, /** @type {!Array<string>} */options.featureTypes, [context]);\n    } else {\n      // Write one query node per element in featuresType.\n      options.featureTypes.forEach((/** @type {FeatureType} */featureType) => {\n        const completeFilter = this.combineBboxAndFilter(featureType.geometryName, featureType.bbox, options.srsName, options.filter);\n        Object.assign(context, {\n          'geometryName': featureType.geometryName,\n          'filter': completeFilter\n        });\n        writeGetFeature(node, [featureType.name], [context]);\n      });\n    }\n    return node;\n  }\n\n  /**\n   * Create a bbox filter and combine it with another optional filter.\n   *\n   * @param {!string} geometryName Geometry name to use.\n   * @param {!import(\"../extent.js\").Extent} extent Extent.\n   * @param {string} [srsName] SRS name. No srsName attribute will be\n   *    set on geometries when this is not provided.\n   * @param {import(\"./filter/Filter.js\").default} [filter] Filter condition.\n   * @return {import(\"./filter/Filter.js\").default} The filter.\n   */\n  combineBboxAndFilter(geometryName, extent, srsName, filter) {\n    const bboxFilter = bboxFilterFn(geometryName, extent, srsName);\n    if (filter) {\n      // if bbox and filter are both set, combine the two into a single filter\n      return andFilterFn(filter, bboxFilter);\n    }\n    return bboxFilter;\n  }\n\n  /**\n   * Encode format as WFS `Transaction` and return the Node.\n   *\n   * @param {Array<import(\"../Feature.js\").default>} inserts The features to insert.\n   * @param {Array<import(\"../Feature.js\").default>} updates The features to update.\n   * @param {Array<import(\"../Feature.js\").default>} deletes The features to delete.\n   * @param {WriteTransactionOptions} options Write options.\n   * @return {Node} Result.\n   * @api\n   */\n  writeTransaction(inserts, updates, deletes, options) {\n    const objectStack = [];\n    const version = options.version ? options.version : this.version_;\n    const node = createElementNS(WFSNS[version], 'Transaction');\n    node.setAttribute('service', 'WFS');\n    node.setAttribute('version', version);\n    let baseObj;\n    /** @type {import(\"../xml.js\").NodeStackItem} */\n    if (options) {\n      baseObj = options.gmlOptions ? options.gmlOptions : {};\n      if (options.handle) {\n        node.setAttribute('handle', options.handle);\n      }\n    }\n    node.setAttributeNS(XML_SCHEMA_INSTANCE_URI, 'xsi:schemaLocation', SCHEMA_LOCATIONS[version]);\n    const request = createTransactionRequest(node, baseObj, version, options);\n    if (inserts) {\n      serializeTransactionRequest('Insert', inserts, objectStack, request);\n    }\n    if (updates) {\n      serializeTransactionRequest('Update', updates, objectStack, request);\n    }\n    if (deletes) {\n      serializeTransactionRequest('Delete', deletes, objectStack, request);\n    }\n    if (options.nativeElements) {\n      serializeTransactionRequest('Native', options.nativeElements, objectStack, request);\n    }\n    return node;\n  }\n\n  /**\n   * @param {Document} doc Document.\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   * @override\n   */\n  readProjectionFromDocument(doc) {\n    for (let n = doc.firstChild; n; n = n.nextSibling) {\n      if (n.nodeType == Node.ELEMENT_NODE) {\n        return this.readProjectionFromNode(/** @type {Element} */n);\n      }\n    }\n    return null;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   * @override\n   */\n  readProjectionFromNode(node) {\n    if (node.firstElementChild && node.firstElementChild.firstElementChild) {\n      node = node.firstElementChild.firstElementChild;\n      for (let n = node.firstElementChild; n; n = n.nextElementSibling) {\n        if (!(n.childNodes.length === 0 || n.childNodes.length === 1 && n.firstChild.nodeType === 3)) {\n          const objectStack = [{}];\n          this.gmlFormat_.readGeometryElement(n, objectStack);\n          return getProjection(objectStack.pop().srsName);\n        }\n      }\n    }\n    return null;\n  }\n}\n\n/**\n * @param {Element} node Node.\n * @param {*} baseObj Base object.\n * @param {string} version Version.\n * @param {WriteTransactionOptions} options Options.\n * @return {Object} Request object.\n */\nfunction createTransactionRequest(node, baseObj, version, options) {\n  const featurePrefix = options.featurePrefix ? options.featurePrefix : FEATURE_PREFIX;\n  let gmlVersion;\n  if (version === '1.0.0') {\n    gmlVersion = 2;\n  } else if (version === '1.1.0') {\n    gmlVersion = 3;\n  } else if (version === '2.0.0') {\n    gmlVersion = 3.2;\n  }\n  const obj = Object.assign({\n    node\n  }, {\n    version,\n    'featureNS': options.featureNS,\n    'featureType': options.featureType,\n    'featurePrefix': featurePrefix,\n    'gmlVersion': gmlVersion,\n    'hasZ': options.hasZ,\n    'srsName': options.srsName\n  }, baseObj);\n  return obj;\n}\n\n/**\n * @param {string} type Request type.\n * @param {Array<import(\"../Feature.js\").default>} features Features.\n * @param {Array<*>} objectStack Object stack.\n * @param {Element} request Transaction Request.\n */\nfunction serializeTransactionRequest(type, features, objectStack, request) {\n  pushSerializeAndPop(request, TRANSACTION_SERIALIZERS, makeSimpleNodeFactory(type), features, objectStack);\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} Transaction Summary.\n */\nfunction readTransactionSummary(node, objectStack) {\n  return pushParseAndPop({}, TRANSACTION_SUMMARY_PARSERS, node, objectStack);\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nconst OGC_FID_PARSERS = {\n  'http://www.opengis.net/ogc': {\n    'FeatureId': makeArrayPusher(function (node, objectStack) {\n      return node.getAttribute('fid');\n    })\n  },\n  'http://www.opengis.net/ogc/1.1': {\n    'FeatureId': makeArrayPusher(function (node, objectStack) {\n      return node.getAttribute('fid');\n    })\n  }\n};\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction fidParser(node, objectStack) {\n  parseNode(OGC_FID_PARSERS, node, objectStack);\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nconst INSERT_RESULTS_PARSERS = {\n  'http://www.opengis.net/wfs': {\n    'Feature': fidParser\n  },\n  'http://www.opengis.net/wfs/2.0': {\n    'Feature': fidParser\n  }\n};\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Array<string>|undefined} Insert results.\n */\nfunction readInsertResults(node, objectStack) {\n  return pushParseAndPop([], INSERT_RESULTS_PARSERS, node, objectStack);\n}\n\n/**\n * @param {Element} node Node.\n * @param {import(\"../Feature.js\").default} feature Feature.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeFeature(node, feature, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const featureType = context['featureType'];\n  const featureNS = context['featureNS'];\n  const gmlVersion = context['gmlVersion'];\n  const child = createElementNS(featureNS, featureType);\n  node.appendChild(child);\n  if (gmlVersion === 2) {\n    GML2.prototype.writeFeatureElement(child, feature, objectStack);\n  } else if (gmlVersion === 3) {\n    GML3.prototype.writeFeatureElement(child, feature, objectStack);\n  } else {\n    GML32.prototype.writeFeatureElement(child, feature, objectStack);\n  }\n}\n\n/**\n * @param {Node} node Node.\n * @param {number|string} fid Feature identifier.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeOgcFidFilter(node, fid, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const version = context['version'];\n  const ns = OGCNS[version];\n  const filter = createElementNS(ns, 'Filter');\n  const child = createElementNS(ns, 'FeatureId');\n  filter.appendChild(child);\n  child.setAttribute('fid', /** @type {string} */fid);\n  node.appendChild(filter);\n}\n\n/**\n * @param {string|undefined} featurePrefix The prefix of the feature.\n * @param {string} featureType The type of the feature.\n * @return {string} The value of the typeName property.\n */\nfunction getTypeName(featurePrefix, featureType) {\n  featurePrefix = featurePrefix ? featurePrefix : FEATURE_PREFIX;\n  const prefix = featurePrefix + ':';\n  // The featureType already contains the prefix.\n  if (featureType.startsWith(prefix)) {\n    return featureType;\n  }\n  return prefix + featureType;\n}\n\n/**\n * @param {Element} node Node.\n * @param {import(\"../Feature.js\").default} feature Feature.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeDelete(node, feature, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  assert(feature.getId() !== undefined, 'Features must have an id set');\n  const featureType = context['featureType'];\n  const featurePrefix = context['featurePrefix'];\n  const featureNS = context['featureNS'];\n  const typeName = getTypeName(featurePrefix, featureType);\n  node.setAttribute('typeName', typeName);\n  node.setAttributeNS(XMLNS, 'xmlns:' + featurePrefix, featureNS);\n  const fid = feature.getId();\n  if (fid !== undefined) {\n    writeOgcFidFilter(node, fid, objectStack);\n  }\n}\n\n/**\n * @param {Element} node Node.\n * @param {import(\"../Feature.js\").default} feature Feature.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeUpdate(node, feature, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  assert(feature.getId() !== undefined, 'Features must have an id set');\n  const version = context['version'];\n  const featureType = context['featureType'];\n  const featurePrefix = context['featurePrefix'];\n  const featureNS = context['featureNS'];\n  const typeName = getTypeName(featurePrefix, featureType);\n  const geometryName = feature.getGeometryName();\n  node.setAttribute('typeName', typeName);\n  node.setAttributeNS(XMLNS, 'xmlns:' + featurePrefix, featureNS);\n  const fid = feature.getId();\n  if (fid !== undefined) {\n    const keys = feature.getKeys();\n    const values = [];\n    for (let i = 0, ii = keys.length; i < ii; i++) {\n      const value = feature.get(keys[i]);\n      if (value !== undefined) {\n        let name = keys[i];\n        if (value && typeof (/** @type {?} */value.getSimplifiedGeometry) === 'function') {\n          name = geometryName;\n        }\n        values.push({\n          name: name,\n          value: value\n        });\n      }\n    }\n    pushSerializeAndPop(/** @type {import(\"../xml.js\").NodeStackItem} */{\n      version,\n      'gmlVersion': context['gmlVersion'],\n      node,\n      'hasZ': context['hasZ'],\n      'srsName': context['srsName']\n    }, TRANSACTION_SERIALIZERS, makeSimpleNodeFactory('Property'), values, objectStack);\n    writeOgcFidFilter(node, fid, objectStack);\n  }\n}\n\n/**\n * @param {Node} node Node.\n * @param {Object} pair Property name and value.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeProperty(node, pair, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const version = context['version'];\n  const ns = WFSNS[version];\n  const tagName = version === '2.0.0' ? 'ValueReference' : 'Name';\n  const name = createElementNS(ns, tagName);\n  const gmlVersion = context['gmlVersion'];\n  node.appendChild(name);\n  writeStringTextNode(name, pair.name);\n  if (pair.value !== undefined && pair.value !== null) {\n    const value = createElementNS(ns, 'Value');\n    node.appendChild(value);\n    if (pair.value && typeof (/** @type {?} */pair.value.getSimplifiedGeometry) === 'function') {\n      if (gmlVersion === 2) {\n        GML2.prototype.writeGeometryElement(value, pair.value, objectStack);\n      } else if (gmlVersion === 3) {\n        GML3.prototype.writeGeometryElement(value, pair.value, objectStack);\n      } else {\n        GML32.prototype.writeGeometryElement(value, pair.value, objectStack);\n      }\n    } else {\n      writeStringTextNode(value, pair.value);\n    }\n  }\n}\n\n/**\n * @param {Element} node Node.\n * @param {{vendorId: string, safeToIgnore: boolean, value: string}} nativeElement The native element.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeNative(node, nativeElement, objectStack) {\n  if (nativeElement.vendorId) {\n    node.setAttribute('vendorId', nativeElement.vendorId);\n  }\n  if (nativeElement.safeToIgnore !== undefined) {\n    node.setAttribute('safeToIgnore', String(nativeElement.safeToIgnore));\n  }\n  if (nativeElement.value !== undefined) {\n    writeStringTextNode(node, nativeElement.value);\n  }\n}\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nconst GETFEATURE_SERIALIZERS = {\n  'http://www.opengis.net/wfs': {\n    'Query': makeChildAppender(writeQuery)\n  },\n  'http://www.opengis.net/wfs/2.0': {\n    'Query': makeChildAppender(writeQuery)\n  },\n  'http://www.opengis.net/ogc': {\n    'During': makeChildAppender(writeDuringFilter),\n    'And': makeChildAppender(writeLogicalFilter),\n    'Or': makeChildAppender(writeLogicalFilter),\n    'Not': makeChildAppender(writeNotFilter),\n    'BBOX': makeChildAppender(writeBboxFilter),\n    'Contains': makeChildAppender(writeSpatialFilter),\n    'Intersects': makeChildAppender(writeSpatialFilter),\n    'Within': makeChildAppender(writeSpatialFilter),\n    'DWithin': makeChildAppender(writeDWithinFilter),\n    'PropertyIsEqualTo': makeChildAppender(writeComparisonFilter),\n    'PropertyIsNotEqualTo': makeChildAppender(writeComparisonFilter),\n    'PropertyIsLessThan': makeChildAppender(writeComparisonFilter),\n    'PropertyIsLessThanOrEqualTo': makeChildAppender(writeComparisonFilter),\n    'PropertyIsGreaterThan': makeChildAppender(writeComparisonFilter),\n    'PropertyIsGreaterThanOrEqualTo': makeChildAppender(writeComparisonFilter),\n    'PropertyIsNull': makeChildAppender(writeIsNullFilter),\n    'PropertyIsBetween': makeChildAppender(writeIsBetweenFilter),\n    'PropertyIsLike': makeChildAppender(writeIsLikeFilter)\n  },\n  'http://www.opengis.net/fes/2.0': {\n    'During': makeChildAppender(writeDuringFilter),\n    'And': makeChildAppender(writeLogicalFilter),\n    'Or': makeChildAppender(writeLogicalFilter),\n    'Not': makeChildAppender(writeNotFilter),\n    'BBOX': makeChildAppender(writeBboxFilter),\n    'Contains': makeChildAppender(writeSpatialFilter),\n    'Disjoint': makeChildAppender(writeSpatialFilter),\n    'Intersects': makeChildAppender(writeSpatialFilter),\n    'ResourceId': makeChildAppender(writeResourceIdFilter),\n    'Within': makeChildAppender(writeSpatialFilter),\n    'DWithin': makeChildAppender(writeDWithinFilter),\n    'PropertyIsEqualTo': makeChildAppender(writeComparisonFilter),\n    'PropertyIsNotEqualTo': makeChildAppender(writeComparisonFilter),\n    'PropertyIsLessThan': makeChildAppender(writeComparisonFilter),\n    'PropertyIsLessThanOrEqualTo': makeChildAppender(writeComparisonFilter),\n    'PropertyIsGreaterThan': makeChildAppender(writeComparisonFilter),\n    'PropertyIsGreaterThanOrEqualTo': makeChildAppender(writeComparisonFilter),\n    'PropertyIsNull': makeChildAppender(writeIsNullFilter),\n    'PropertyIsBetween': makeChildAppender(writeIsBetweenFilter),\n    'PropertyIsLike': makeChildAppender(writeIsLikeFilter)\n  }\n};\n\n/**\n * @param {Element} node Node.\n * @param {string} featureType Feature type.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeQuery(node, featureType, objectStack) {\n  const context = /** @type {Object} */objectStack[objectStack.length - 1];\n  const version = context['version'];\n  const featurePrefix = context['featurePrefix'];\n  const featureNS = context['featureNS'];\n  const propertyNames = context['propertyNames'];\n  const srsName = context['srsName'];\n  let typeName;\n  // If feature prefix is not defined, we must not use the default prefix.\n  if (featurePrefix) {\n    typeName = getTypeName(featurePrefix, featureType);\n  } else {\n    typeName = featureType;\n  }\n  let typeNameAttr;\n  if (version === '2.0.0') {\n    typeNameAttr = 'typeNames';\n  } else {\n    typeNameAttr = 'typeName';\n  }\n  node.setAttribute(typeNameAttr, typeName);\n  if (srsName) {\n    node.setAttribute('srsName', srsName);\n  }\n  if (featureNS) {\n    node.setAttributeNS(XMLNS, 'xmlns:' + featurePrefix, featureNS);\n  }\n  const item = /** @type {import(\"../xml.js\").NodeStackItem} */\n  Object.assign({}, context);\n  item.node = node;\n  pushSerializeAndPop(item, QUERY_SERIALIZERS, makeSimpleNodeFactory('PropertyName'), propertyNames, objectStack);\n  const filter = context['filter'];\n  if (filter) {\n    const child = createElementNS(getFilterNS(version), 'Filter');\n    node.appendChild(child);\n    writeFilterCondition(child, filter, objectStack);\n  }\n}\n\n/**\n * @param {Element} node Node.\n * @param {import(\"./filter/Filter.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeFilterCondition(node, filter, objectStack) {\n  const context = /** @type {Object} */objectStack[objectStack.length - 1];\n  /** @type {import(\"../xml.js\").NodeStackItem} */\n  const item = {\n    node\n  };\n  Object.assign(item, {\n    context\n  });\n  pushSerializeAndPop(item, GETFEATURE_SERIALIZERS, makeSimpleNodeFactory(filter.getTagName()), [filter], objectStack);\n}\n\n/**\n * @param {Node} node Node.\n * @param {import(\"./filter/Bbox.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeBboxFilter(node, filter, objectStack) {\n  const parent = /** @type {Object} */objectStack[objectStack.length - 1];\n  const context = parent['context'];\n  const version = context['version'];\n  parent['srsName'] = filter.srsName;\n  const format = GML_FORMATS[version];\n  writePropertyName(version, node, filter.geometryName);\n  format.prototype.writeGeometryElement(node, filter.extent, objectStack);\n}\n\n/**\n * @param {Element} node Element.\n * @param {import(\"./filter/ResourceId.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeResourceIdFilter(node, filter, objectStack) {\n  node.setAttribute('rid', /** @type {string} */filter.rid);\n}\n\n/**\n * @param {Node} node Node.\n * @param {import(\"./filter/Spatial.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeSpatialFilter(node, filter, objectStack) {\n  const parent = /** @type {Object} */objectStack[objectStack.length - 1];\n  const context = parent['context'];\n  const version = context['version'];\n  parent['srsName'] = filter.srsName;\n  const format = GML_FORMATS[version];\n  writePropertyName(version, node, filter.geometryName);\n  format.prototype.writeGeometryElement(node, filter.geometry, objectStack);\n}\n\n/**\n * @param {Node} node Node.\n * @param {import(\"./filter/DWithin.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeDWithinFilter(node, filter, objectStack) {\n  const parent = /** @type {Object} */objectStack[objectStack.length - 1];\n  const context = parent['context'];\n  const version = context['version'];\n  writeSpatialFilter(node, filter, objectStack);\n  const distance = createElementNS(getFilterNS(version), 'Distance');\n  writeStringTextNode(distance, filter.distance.toString());\n  if (version === '2.0.0') {\n    distance.setAttribute('uom', filter.unit);\n  } else {\n    distance.setAttribute('units', filter.unit);\n  }\n  node.appendChild(distance);\n}\n\n/**\n * @param {Node} node Node.\n * @param {import(\"./filter/During.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeDuringFilter(node, filter, objectStack) {\n  const parent = /** @type {Object} */objectStack[objectStack.length - 1];\n  const context = parent['context'];\n  const version = context['version'];\n  writeExpression(FESNS[version], 'ValueReference', node, filter.propertyName);\n  const timePeriod = createElementNS(GMLNS, 'TimePeriod');\n  node.appendChild(timePeriod);\n  const begin = createElementNS(GMLNS, 'begin');\n  timePeriod.appendChild(begin);\n  writeTimeInstant(begin, filter.begin);\n  const end = createElementNS(GMLNS, 'end');\n  timePeriod.appendChild(end);\n  writeTimeInstant(end, filter.end);\n}\n\n/**\n * @param {Element} node Node.\n * @param {import(\"./filter/LogicalNary.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeLogicalFilter(node, filter, objectStack) {\n  const parent = /** @type {Object} */objectStack[objectStack.length - 1];\n  const context = parent['context'];\n  /** @type {import(\"../xml.js\").NodeStackItem} */\n  const item = {\n    node\n  };\n  Object.assign(item, {\n    context\n  });\n  const conditions = filter.conditions;\n  for (let i = 0, ii = conditions.length; i < ii; ++i) {\n    const condition = conditions[i];\n    pushSerializeAndPop(item, GETFEATURE_SERIALIZERS, makeSimpleNodeFactory(condition.getTagName()), [condition], objectStack);\n  }\n}\n\n/**\n * @param {Element} node Node.\n * @param {import(\"./filter/Not.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeNotFilter(node, filter, objectStack) {\n  const parent = /** @type {Object} */objectStack[objectStack.length - 1];\n  const context = parent['context'];\n  /** @type {import(\"../xml.js\").NodeStackItem} */\n  const item = {\n    node\n  };\n  Object.assign(item, {\n    context\n  });\n  const condition = filter.condition;\n  pushSerializeAndPop(item, GETFEATURE_SERIALIZERS, makeSimpleNodeFactory(condition.getTagName()), [condition], objectStack);\n}\n\n/**\n * @param {Element} node Node.\n * @param {import(\"./filter/ComparisonBinary.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeComparisonFilter(node, filter, objectStack) {\n  const parent = /** @type {Object} */objectStack[objectStack.length - 1];\n  const context = parent['context'];\n  const version = context['version'];\n  if (filter.matchCase !== undefined) {\n    node.setAttribute('matchCase', filter.matchCase.toString());\n  }\n  writePropertyName(version, node, filter.propertyName);\n  writeLiteral(version, node, '' + filter.expression);\n}\n\n/**\n * @param {Node} node Node.\n * @param {import(\"./filter/IsNull.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeIsNullFilter(node, filter, objectStack) {\n  const parent = /** @type {Object} */objectStack[objectStack.length - 1];\n  const context = parent['context'];\n  const version = context['version'];\n  writePropertyName(version, node, filter.propertyName);\n}\n\n/**\n * @param {Node} node Node.\n * @param {import(\"./filter/IsBetween.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeIsBetweenFilter(node, filter, objectStack) {\n  const parent = /** @type {Object} */objectStack[objectStack.length - 1];\n  const context = parent['context'];\n  const version = context['version'];\n  const ns = getFilterNS(version);\n  writePropertyName(version, node, filter.propertyName);\n  const lowerBoundary = createElementNS(ns, 'LowerBoundary');\n  node.appendChild(lowerBoundary);\n  writeLiteral(version, lowerBoundary, '' + filter.lowerBoundary);\n  const upperBoundary = createElementNS(ns, 'UpperBoundary');\n  node.appendChild(upperBoundary);\n  writeLiteral(version, upperBoundary, '' + filter.upperBoundary);\n}\n\n/**\n * @param {Element} node Node.\n * @param {import(\"./filter/IsLike.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeIsLikeFilter(node, filter, objectStack) {\n  const parent = /** @type {Object} */objectStack[objectStack.length - 1];\n  const context = parent['context'];\n  const version = context['version'];\n  node.setAttribute('wildCard', filter.wildCard);\n  node.setAttribute('singleChar', filter.singleChar);\n  node.setAttribute('escapeChar', filter.escapeChar);\n  if (filter.matchCase !== undefined) {\n    node.setAttribute('matchCase', filter.matchCase.toString());\n  }\n  writePropertyName(version, node, filter.propertyName);\n  writeLiteral(version, node, '' + filter.pattern);\n}\n\n/**\n * @param {string} ns Namespace.\n * @param {string} tagName Tag name.\n * @param {Node} node Node.\n * @param {string} value Value.\n */\nfunction writeExpression(ns, tagName, node, value) {\n  const property = createElementNS(ns, tagName);\n  writeStringTextNode(property, value);\n  node.appendChild(property);\n}\n\n/**\n * @param {string} version Version.\n * @param {Node} node Node.\n * @param {string} value PropertyName value.\n */\nfunction writeLiteral(version, node, value) {\n  writeExpression(getFilterNS(version), 'Literal', node, value);\n}\n\n/**\n * @param {string} version Version.\n * @param {Node} node Node.\n * @param {string} value PropertyName value.\n */\nfunction writePropertyName(version, node, value) {\n  if (version === '2.0.0') {\n    writeExpression(FESNS[version], 'ValueReference', node, value);\n  } else {\n    writeExpression(OGCNS[version], 'PropertyName', node, value);\n  }\n}\n\n/**\n * @param {Node} node Node.\n * @param {string} time PropertyName value.\n */\nfunction writeTimeInstant(node, time) {\n  const timeInstant = createElementNS(GMLNS, 'TimeInstant');\n  node.appendChild(timeInstant);\n  const timePosition = createElementNS(GMLNS, 'timePosition');\n  timeInstant.appendChild(timePosition);\n  writeStringTextNode(timePosition, time);\n}\n\n/**\n * Encode filter as WFS `Filter` and return the Node.\n *\n * @param {import(\"./filter/Filter.js\").default} filter Filter.\n * @param {string} version WFS version. If not provided defaults to '1.1.0'\n * @return {Node} Result.\n * @api\n */\nexport function writeFilter(filter, version) {\n  version = version || '1.1.0';\n  const child = createElementNS(getFilterNS(version), 'Filter');\n  const context = {\n    node: child\n  };\n  Object.assign(context, {\n    'version': version,\n    'filter': filter\n  });\n  writeFilterCondition(child, filter, [context]);\n  return child;\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<string>} featureTypes Feature types.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeGetFeature(node, featureTypes, objectStack) {\n  const context = /** @type {Object} */objectStack[objectStack.length - 1];\n  const item = /** @type {import(\"../xml.js\").NodeStackItem} */\n  Object.assign({}, context);\n  item.node = node;\n  pushSerializeAndPop(item, GETFEATURE_SERIALIZERS, makeSimpleNodeFactory('Query'), featureTypes, objectStack);\n}\nfunction getFilterNS(version) {\n  let ns;\n  if (version === '2.0.0') {\n    ns = FESNS[version];\n  } else {\n    ns = OGCNS[version];\n  }\n  return ns;\n}\nexport default WFS;", "var z = Object.defineProperty;\nvar b = Math.pow;\nvar l = (i, e) => z(i, \"name\", {\n  value: e,\n  configurable: !0\n});\nvar m = (i, e, t) => new Promise((r, n) => {\n  var s = u => {\n      try {\n        a(t.next(u));\n      } catch (c) {\n        n(c);\n      }\n    },\n    o = u => {\n      try {\n        a(t.throw(u));\n      } catch (c) {\n        n(c);\n      }\n    },\n    a = u => u.done ? r(u.value) : Promise.resolve(u.value).then(s, o);\n  a((t = t.apply(i, e)).next());\n});\nimport { decompressSync as W } from \"fflate\";\nvar re = l((i, e) => {\n    let t = !1,\n      r = \"\",\n      n = L.GridLayer.extend({\n        createTile: l((s, o) => {\n          let a = document.createElement(\"img\"),\n            u = new AbortController(),\n            c = u.signal;\n          return a.cancel = () => {\n            u.abort();\n          }, t || (i.getHeader().then(d => {\n            d.tileType === 1 ? console.error(\"Error: archive contains MVT vector tiles, but leafletRasterLayer is for displaying raster tiles. See https://github.com/protomaps/PMTiles/tree/main/js for details.\") : d.tileType === 2 ? r = \"image/png\" : d.tileType === 3 ? r = \"image/jpeg\" : d.tileType === 4 ? r = \"image/webp\" : d.tileType === 5 && (r = \"image/avif\");\n          }), t = !0), i.getZxy(s.z, s.x, s.y, c).then(d => {\n            if (d) {\n              let h = new Blob([d.data], {\n                  type: r\n                }),\n                p = window.URL.createObjectURL(h);\n              a.src = p, a.cancel = void 0, o(void 0, a);\n            }\n          }).catch(d => {\n            if (d.name !== \"AbortError\") throw d;\n          }), a;\n        }, \"createTile\"),\n        _removeTile: l(function (s) {\n          let o = this._tiles[s];\n          o && (o.el.cancel && o.el.cancel(), o.el.width = 0, o.el.height = 0, o.el.deleted = !0, L.DomUtil.remove(o.el), delete this._tiles[s], this.fire(\"tileunload\", {\n            tile: o.el,\n            coords: this._keyToTileCoords(s)\n          }));\n        }, \"_removeTile\")\n      });\n    return new n(e);\n  }, \"leafletRasterLayer\"),\n  j = l(i => (e, t) => {\n    if (t instanceof AbortController) return i(e, t);\n    let r = new AbortController();\n    return i(e, r).then(n => t(void 0, n.data, n.cacheControl || \"\", n.expires || \"\"), n => t(n)).catch(n => t(n)), {\n      cancel: l(() => r.abort(), \"cancel\")\n    };\n  }, \"v3compat\"),\n  T = class T {\n    constructor(e) {\n      this.tilev4 = l((e, t) => m(this, null, function* () {\n        if (e.type === \"json\") {\n          let p = e.url.substr(10),\n            y = this.tiles.get(p);\n          if (y || (y = new x(p), this.tiles.set(p, y)), this.metadata) return {\n            data: yield y.getTileJson(e.url)\n          };\n          let f = yield y.getHeader();\n          return (f.minLon >= f.maxLon || f.minLat >= f.maxLat) && console.error(`Bounds of PMTiles archive ${f.minLon},${f.minLat},${f.maxLon},${f.maxLat} are not valid.`), {\n            data: {\n              tiles: [`${e.url}/{z}/{x}/{y}`],\n              minzoom: f.minZoom,\n              maxzoom: f.maxZoom,\n              bounds: [f.minLon, f.minLat, f.maxLon, f.maxLat]\n            }\n          };\n        }\n        let r = new RegExp(/pmtiles:\\/\\/(.+)\\/(\\d+)\\/(\\d+)\\/(\\d+)/),\n          n = e.url.match(r);\n        if (!n) throw new Error(\"Invalid PMTiles protocol URL\");\n        let s = n[1],\n          o = this.tiles.get(s);\n        o || (o = new x(s), this.tiles.set(s, o));\n        let a = n[2],\n          u = n[3],\n          c = n[4],\n          d = yield o.getHeader(),\n          h = yield o == null ? void 0 : o.getZxy(+a, +u, +c, t.signal);\n        if (h) return {\n          data: new Uint8Array(h.data),\n          cacheControl: h.cacheControl,\n          expires: h.expires\n        };\n        if (d.tileType === 1) {\n          if (this.errorOnMissingTile) throw new Error(\"Tile not found.\");\n          return {\n            data: new Uint8Array()\n          };\n        }\n        return {\n          data: null\n        };\n      }), \"tilev4\");\n      this.tile = j(this.tilev4);\n      this.tiles = new Map(), this.metadata = (e == null ? void 0 : e.metadata) || !1, this.errorOnMissingTile = (e == null ? void 0 : e.errorOnMissingTile) || !1;\n    }\n    add(e) {\n      this.tiles.set(e.source.getKey(), e);\n    }\n    get(e) {\n      return this.tiles.get(e);\n    }\n  };\nl(T, \"Protocol\");\nvar S = T;\nfunction w(i, e) {\n  return (e >>> 0) * 4294967296 + (i >>> 0);\n}\nl(w, \"toNum\");\nfunction F(i, e) {\n  let t = e.buf,\n    r = t[e.pos++],\n    n = (r & 112) >> 4;\n  if (r < 128 || (r = t[e.pos++], n |= (r & 127) << 3, r < 128) || (r = t[e.pos++], n |= (r & 127) << 10, r < 128) || (r = t[e.pos++], n |= (r & 127) << 17, r < 128) || (r = t[e.pos++], n |= (r & 127) << 24, r < 128) || (r = t[e.pos++], n |= (r & 1) << 31, r < 128)) return w(i, n);\n  throw new Error(\"Expected varint not more than 10 bytes\");\n}\nl(F, \"readVarintRemainder\");\nfunction v(i) {\n  let e = i.buf,\n    t = e[i.pos++],\n    r = t & 127;\n  return t < 128 || (t = e[i.pos++], r |= (t & 127) << 7, t < 128) || (t = e[i.pos++], r |= (t & 127) << 14, t < 128) || (t = e[i.pos++], r |= (t & 127) << 21, t < 128) ? r : (t = e[i.pos], r |= (t & 15) << 28, F(r, i));\n}\nl(v, \"readVarint\");\nfunction k(i, e, t, r) {\n  if (r === 0) {\n    t === 1 && (e[0] = i - 1 - e[0], e[1] = i - 1 - e[1]);\n    let n = e[0];\n    e[0] = e[1], e[1] = n;\n  }\n}\nl(k, \"rotate\");\nfunction N(i, e) {\n  let t = b(2, i),\n    r = e,\n    n = e,\n    s = e,\n    o = [0, 0],\n    a = 1;\n  for (; a < t;) r = 1 & s / 2, n = 1 & (s ^ r), k(a, o, r, n), o[0] += a * r, o[1] += a * n, s = s / 4, a *= 2;\n  return [i, o[0], o[1]];\n}\nl(N, \"idOnLevel\");\nvar q = [0, 1, 5, 21, 85, 341, 1365, 5461, 21845, 87381, 349525, 1398101, 5592405, 22369621, 89478485, 357913941, 1431655765, 5726623061, 22906492245, 91625968981, 366503875925, 1466015503701, 5864062014805, 23456248059221, 93824992236885, 375299968947541, 0x5555555555555];\nfunction G(i, e, t) {\n  if (i > 26) throw new Error(\"Tile zoom level exceeds max safe number limit (26)\");\n  if (e > b(2, i) - 1 || t > b(2, i) - 1) throw new Error(\"tile x/y outside zoom level bounds\");\n  let r = q[i],\n    n = b(2, i),\n    s = 0,\n    o = 0,\n    a = 0,\n    u = [e, t],\n    c = n / 2;\n  for (; c > 0;) s = (u[0] & c) > 0 ? 1 : 0, o = (u[1] & c) > 0 ? 1 : 0, a += c * c * (3 * s ^ o), k(c, u, s, o), c = c / 2;\n  return r + a;\n}\nl(G, \"zxyToTileId\");\nfunction ie(i) {\n  let e = 0,\n    t = 0;\n  for (let r = 0; r < 27; r++) {\n    let n = (1 << r) * (1 << r);\n    if (e + n > i) return N(r, i - e);\n    e += n;\n  }\n  throw new Error(\"Tile zoom level exceeds max safe number limit (26)\");\n}\nl(ie, \"tileIdToZxy\");\nvar J = (s => (s[s.Unknown = 0] = \"Unknown\", s[s.None = 1] = \"None\", s[s.Gzip = 2] = \"Gzip\", s[s.Brotli = 3] = \"Brotli\", s[s.Zstd = 4] = \"Zstd\", s))(J || {});\nfunction D(i, e) {\n  return m(this, null, function* () {\n    if (e === 1 || e === 0) return i;\n    if (e === 2) {\n      if (typeof globalThis.DecompressionStream == \"undefined\") return W(new Uint8Array(i));\n      let t = new Response(i).body;\n      if (!t) throw new Error(\"Failed to read response stream\");\n      let r = t.pipeThrough(new globalThis.DecompressionStream(\"gzip\"));\n      return new Response(r).arrayBuffer();\n    }\n    throw new Error(\"Compression method not supported\");\n  });\n}\nl(D, \"defaultDecompress\");\nvar O = (o => (o[o.Unknown = 0] = \"Unknown\", o[o.Mvt = 1] = \"Mvt\", o[o.Png = 2] = \"Png\", o[o.Jpeg = 3] = \"Jpeg\", o[o.Webp = 4] = \"Webp\", o[o.Avif = 5] = \"Avif\", o))(O || {});\nfunction _(i) {\n  return i === 1 ? \".mvt\" : i === 2 ? \".png\" : i === 3 ? \".jpg\" : i === 4 ? \".webp\" : i === 5 ? \".avif\" : \"\";\n}\nl(_, \"tileTypeExt\");\nvar Y = 127;\nfunction Q(i, e) {\n  let t = 0,\n    r = i.length - 1;\n  for (; t <= r;) {\n    let n = r + t >> 1,\n      s = e - i[n].tileId;\n    if (s > 0) t = n + 1;else if (s < 0) r = n - 1;else return i[n];\n  }\n  return r >= 0 && (i[r].runLength === 0 || e - i[r].tileId < i[r].runLength) ? i[r] : null;\n}\nl(Q, \"findTile\");\nvar A = class A {\n  constructor(e) {\n    this.file = e;\n  }\n  getKey() {\n    return this.file.name;\n  }\n  getBytes(e, t) {\n    return m(this, null, function* () {\n      return {\n        data: yield this.file.slice(e, e + t).arrayBuffer()\n      };\n    });\n  }\n};\nl(A, \"FileSource\");\nvar V = A,\n  U = class U {\n    constructor(e, t = new Headers()) {\n      this.url = e, this.customHeaders = t, this.mustReload = !1;\n      let r = \"\";\n      \"navigator\" in globalThis && (r = globalThis.navigator.userAgent || \"\");\n      let n = r.indexOf(\"Windows\") > -1,\n        s = /Chrome|Chromium|Edg|OPR|Brave/.test(r);\n      this.chromeWindowsNoCache = !1, n && s && (this.chromeWindowsNoCache = !0);\n    }\n    getKey() {\n      return this.url;\n    }\n    setHeaders(e) {\n      this.customHeaders = e;\n    }\n    getBytes(e, t, r, n) {\n      return m(this, null, function* () {\n        let s, o;\n        r ? o = r : (s = new AbortController(), o = s.signal);\n        let a = new Headers(this.customHeaders);\n        a.set(\"range\", `bytes=${e}-${e + t - 1}`);\n        let u;\n        this.mustReload ? u = \"reload\" : this.chromeWindowsNoCache && (u = \"no-store\");\n        let c = yield fetch(this.url, {\n          signal: o,\n          cache: u,\n          headers: a\n        });\n        if (e === 0 && c.status === 416) {\n          let y = c.headers.get(\"Content-Range\");\n          if (!y || !y.startsWith(\"bytes */\")) throw new Error(\"Missing content-length on 416 response\");\n          let f = +y.substr(8);\n          c = yield fetch(this.url, {\n            signal: o,\n            cache: \"reload\",\n            headers: {\n              range: `bytes=0-${f - 1}`\n            }\n          });\n        }\n        let d = c.headers.get(\"Etag\");\n        if (d != null && d.startsWith(\"W/\") && (d = null), c.status === 416 || n && d && d !== n) throw this.mustReload = !0, new E(`Server returned non-matching ETag ${n} after one retry. Check browser extensions and servers for issues that may affect correct ETag headers.`);\n        if (c.status >= 300) throw new Error(`Bad response code: ${c.status}`);\n        let h = c.headers.get(\"Content-Length\");\n        if (c.status === 200 && (!h || +h > t)) throw s && s.abort(), new Error(\"Server returned no content-length header or content-length exceeding request. Check that your storage backend supports HTTP Byte Serving.\");\n        return {\n          data: yield c.arrayBuffer(),\n          etag: d || void 0,\n          cacheControl: c.headers.get(\"Cache-Control\") || void 0,\n          expires: c.headers.get(\"Expires\") || void 0\n        };\n      });\n    }\n  };\nl(U, \"FetchSource\");\nvar C = U;\nfunction g(i, e) {\n  let t = i.getUint32(e + 4, !0),\n    r = i.getUint32(e + 0, !0);\n  return t * b(2, 32) + r;\n}\nl(g, \"getUint64\");\nfunction X(i, e) {\n  let t = new DataView(i),\n    r = t.getUint8(7);\n  if (r > 3) throw new Error(`Archive is spec version ${r} but this library supports up to spec version 3`);\n  return {\n    specVersion: r,\n    rootDirectoryOffset: g(t, 8),\n    rootDirectoryLength: g(t, 16),\n    jsonMetadataOffset: g(t, 24),\n    jsonMetadataLength: g(t, 32),\n    leafDirectoryOffset: g(t, 40),\n    leafDirectoryLength: g(t, 48),\n    tileDataOffset: g(t, 56),\n    tileDataLength: g(t, 64),\n    numAddressedTiles: g(t, 72),\n    numTileEntries: g(t, 80),\n    numTileContents: g(t, 88),\n    clustered: t.getUint8(96) === 1,\n    internalCompression: t.getUint8(97),\n    tileCompression: t.getUint8(98),\n    tileType: t.getUint8(99),\n    minZoom: t.getUint8(100),\n    maxZoom: t.getUint8(101),\n    minLon: t.getInt32(102, !0) / 1e7,\n    minLat: t.getInt32(106, !0) / 1e7,\n    maxLon: t.getInt32(110, !0) / 1e7,\n    maxLat: t.getInt32(114, !0) / 1e7,\n    centerZoom: t.getUint8(118),\n    centerLon: t.getInt32(119, !0) / 1e7,\n    centerLat: t.getInt32(123, !0) / 1e7,\n    etag: e\n  };\n}\nl(X, \"bytesToHeader\");\nfunction Z(i) {\n  let e = {\n      buf: new Uint8Array(i),\n      pos: 0\n    },\n    t = v(e),\n    r = [],\n    n = 0;\n  for (let s = 0; s < t; s++) {\n    let o = v(e);\n    r.push({\n      tileId: n + o,\n      offset: 0,\n      length: 0,\n      runLength: 1\n    }), n += o;\n  }\n  for (let s = 0; s < t; s++) r[s].runLength = v(e);\n  for (let s = 0; s < t; s++) r[s].length = v(e);\n  for (let s = 0; s < t; s++) {\n    let o = v(e);\n    o === 0 && s > 0 ? r[s].offset = r[s - 1].offset + r[s - 1].length : r[s].offset = o - 1;\n  }\n  return r;\n}\nl(Z, \"deserializeIndex\");\nvar R = class R extends Error {};\nl(R, \"EtagMismatch\");\nvar E = R;\nfunction K(i, e) {\n  return m(this, null, function* () {\n    let t = yield i.getBytes(0, 16384);\n    if (new DataView(t.data).getUint16(0, !0) !== 19792) throw new Error(\"Wrong magic number for PMTiles archive\");\n    let n = t.data.slice(0, Y),\n      s = X(n, t.etag),\n      o = t.data.slice(s.rootDirectoryOffset, s.rootDirectoryOffset + s.rootDirectoryLength),\n      a = `${i.getKey()}|${s.etag || \"\"}|${s.rootDirectoryOffset}|${s.rootDirectoryLength}`,\n      u = Z(yield e(o, s.internalCompression));\n    return [s, [a, u.length, u]];\n  });\n}\nl(K, \"getHeaderAndRoot\");\nfunction I(i, e, t, r, n) {\n  return m(this, null, function* () {\n    let s = yield i.getBytes(t, r, void 0, n.etag),\n      o = yield e(s.data, n.internalCompression),\n      a = Z(o);\n    if (a.length === 0) throw new Error(\"Empty directory is invalid\");\n    return a;\n  });\n}\nl(I, \"getDirectory\");\nvar H = class H {\n  constructor(e = 100, t = !0, r = D) {\n    this.cache = new Map(), this.maxCacheEntries = e, this.counter = 1, this.decompress = r;\n  }\n  getHeader(e) {\n    return m(this, null, function* () {\n      let t = e.getKey(),\n        r = this.cache.get(t);\n      if (r) return r.lastUsed = this.counter++, r.data;\n      let n = yield K(e, this.decompress);\n      return n[1] && this.cache.set(n[1][0], {\n        lastUsed: this.counter++,\n        data: n[1][2]\n      }), this.cache.set(t, {\n        lastUsed: this.counter++,\n        data: n[0]\n      }), this.prune(), n[0];\n    });\n  }\n  getDirectory(e, t, r, n) {\n    return m(this, null, function* () {\n      let s = `${e.getKey()}|${n.etag || \"\"}|${t}|${r}`,\n        o = this.cache.get(s);\n      if (o) return o.lastUsed = this.counter++, o.data;\n      let a = yield I(e, this.decompress, t, r, n);\n      return this.cache.set(s, {\n        lastUsed: this.counter++,\n        data: a\n      }), this.prune(), a;\n    });\n  }\n  prune() {\n    if (this.cache.size > this.maxCacheEntries) {\n      let e = 1 / 0,\n        t;\n      this.cache.forEach((r, n) => {\n        r.lastUsed < e && (e = r.lastUsed, t = n);\n      }), t && this.cache.delete(t);\n    }\n  }\n  invalidate(e) {\n    return m(this, null, function* () {\n      this.cache.delete(e.getKey());\n    });\n  }\n};\nl(H, \"ResolvedValueCache\");\nvar $ = H,\n  M = class M {\n    constructor(e = 100, t = !0, r = D) {\n      this.cache = new Map(), this.invalidations = new Map(), this.maxCacheEntries = e, this.counter = 1, this.decompress = r;\n    }\n    getHeader(e) {\n      return m(this, null, function* () {\n        let t = e.getKey(),\n          r = this.cache.get(t);\n        if (r) return r.lastUsed = this.counter++, yield r.data;\n        let n = new Promise((s, o) => {\n          K(e, this.decompress).then(a => {\n            a[1] && this.cache.set(a[1][0], {\n              lastUsed: this.counter++,\n              data: Promise.resolve(a[1][2])\n            }), s(a[0]), this.prune();\n          }).catch(a => {\n            o(a);\n          });\n        });\n        return this.cache.set(t, {\n          lastUsed: this.counter++,\n          data: n\n        }), n;\n      });\n    }\n    getDirectory(e, t, r, n) {\n      return m(this, null, function* () {\n        let s = `${e.getKey()}|${n.etag || \"\"}|${t}|${r}`,\n          o = this.cache.get(s);\n        if (o) return o.lastUsed = this.counter++, yield o.data;\n        let a = new Promise((u, c) => {\n          I(e, this.decompress, t, r, n).then(d => {\n            u(d), this.prune();\n          }).catch(d => {\n            c(d);\n          });\n        });\n        return this.cache.set(s, {\n          lastUsed: this.counter++,\n          data: a\n        }), a;\n      });\n    }\n    prune() {\n      if (this.cache.size >= this.maxCacheEntries) {\n        let e = 1 / 0,\n          t;\n        this.cache.forEach((r, n) => {\n          r.lastUsed < e && (e = r.lastUsed, t = n);\n        }), t && this.cache.delete(t);\n      }\n    }\n    invalidate(e) {\n      return m(this, null, function* () {\n        let t = e.getKey();\n        if (this.invalidations.get(t)) return yield this.invalidations.get(t);\n        this.cache.delete(e.getKey());\n        let r = new Promise((n, s) => {\n          this.getHeader(e).then(o => {\n            n(), this.invalidations.delete(t);\n          }).catch(o => {\n            s(o);\n          });\n        });\n        this.invalidations.set(t, r);\n      });\n    }\n  };\nl(M, \"SharedPromiseCache\");\nvar P = M,\n  B = class B {\n    constructor(e, t, r) {\n      typeof e == \"string\" ? this.source = new C(e) : this.source = e, r ? this.decompress = r : this.decompress = D, t ? this.cache = t : this.cache = new P();\n    }\n    getHeader() {\n      return m(this, null, function* () {\n        return yield this.cache.getHeader(this.source);\n      });\n    }\n    getZxyAttempt(e, t, r, n) {\n      return m(this, null, function* () {\n        let s = G(e, t, r),\n          o = yield this.cache.getHeader(this.source);\n        if (e < o.minZoom || e > o.maxZoom) return;\n        let a = o.rootDirectoryOffset,\n          u = o.rootDirectoryLength;\n        for (let c = 0; c <= 3; c++) {\n          let d = yield this.cache.getDirectory(this.source, a, u, o),\n            h = Q(d, s);\n          if (h) {\n            if (h.runLength > 0) {\n              let p = yield this.source.getBytes(o.tileDataOffset + h.offset, h.length, n, o.etag);\n              return {\n                data: yield this.decompress(p.data, o.tileCompression),\n                cacheControl: p.cacheControl,\n                expires: p.expires\n              };\n            }\n            a = o.leafDirectoryOffset + h.offset, u = h.length;\n          } else return;\n        }\n        throw new Error(\"Maximum directory depth exceeded\");\n      });\n    }\n    getZxy(e, t, r, n) {\n      return m(this, null, function* () {\n        try {\n          return yield this.getZxyAttempt(e, t, r, n);\n        } catch (s) {\n          if (s instanceof E) return this.cache.invalidate(this.source), yield this.getZxyAttempt(e, t, r, n);\n          throw s;\n        }\n      });\n    }\n    getMetadataAttempt() {\n      return m(this, null, function* () {\n        let e = yield this.cache.getHeader(this.source),\n          t = yield this.source.getBytes(e.jsonMetadataOffset, e.jsonMetadataLength, void 0, e.etag),\n          r = yield this.decompress(t.data, e.internalCompression),\n          n = new TextDecoder(\"utf-8\");\n        return JSON.parse(n.decode(r));\n      });\n    }\n    getMetadata() {\n      return m(this, null, function* () {\n        try {\n          return yield this.getMetadataAttempt();\n        } catch (e) {\n          if (e instanceof E) return this.cache.invalidate(this.source), yield this.getMetadataAttempt();\n          throw e;\n        }\n      });\n    }\n    getTileJson(e) {\n      return m(this, null, function* () {\n        let t = yield this.getHeader(),\n          r = yield this.getMetadata(),\n          n = _(t.tileType);\n        return {\n          tilejson: \"3.0.0\",\n          scheme: \"xyz\",\n          tiles: [`${e}/{z}/{x}/{y}${n}`],\n          vector_layers: r.vector_layers,\n          attribution: r.attribution,\n          description: r.description,\n          name: r.name,\n          version: r.version,\n          bounds: [t.minLon, t.minLat, t.maxLon, t.maxLat],\n          center: [t.centerLon, t.centerLat, t.centerZoom],\n          minzoom: t.minZoom,\n          maxzoom: t.maxZoom\n        };\n      });\n    }\n  };\nl(B, \"PMTiles\");\nvar x = B;\nexport { J as Compression, E as EtagMismatch, C as FetchSource, V as FileSource, x as PMTiles, S as Protocol, $ as ResolvedValueCache, P as SharedPromiseCache, O as TileType, X as bytesToHeader, Q as findTile, g as getUint64, re as leafletRasterLayer, v as readVarint, ie as tileIdToZxy, _ as tileTypeExt, G as zxyToTileId };\n", "var __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nvar __name = (target, value) => __defProp(target, \"name\", {\n  value,\n  configurable: true\n});\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = value => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = value => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = x => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\n\n// src/index.ts\nimport { default as DataTileSource } from \"ol/source/DataTile.js\";\nimport TileState from \"ol/TileState.js\";\nimport { MVT } from \"ol/format.js\";\nimport { default as VectorTileSource } from \"ol/source/VectorTile.js\";\nimport { createXYZ, extentFromProjection } from \"ol/tilegrid.js\";\nimport { PMTiles } from \"pmtiles\";\nvar _PMTilesRasterSource = class _PMTilesRasterSource extends DataTileSource {\n  constructor(options) {\n    super(__spreadValues(__spreadValues({}, options), {\n      state: \"loading\"\n    }));\n    this.loadImage = /* @__PURE__ */__name(src => {\n      return new Promise((resolve, reject) => {\n        const img = new Image();\n        img.addEventListener(\"load\", () => resolve(img));\n        img.addEventListener(\"error\", () => reject(new Error(\"load failed\")));\n        img.src = src;\n      });\n    }, \"loadImage\");\n    const p = new PMTiles(options.url);\n    p.getHeader().then(h => {\n      const projection = options.projection === void 0 ? \"EPSG:3857\" : options.projection;\n      this.tileGrid = options.tileGrid || createXYZ({\n        extent: extentFromProjection(projection),\n        maxResolution: options.maxResolution,\n        minZoom: h.minZoom,\n        maxZoom: h.maxZoom,\n        tileSize: options.tileSize\n      });\n      this.setLoader((z, x, y) => __async(this, null, function* () {\n        const response = yield p.getZxy(z, x, y);\n        if (!response) {\n          return new Uint8Array();\n        }\n        const src = URL.createObjectURL(new Blob([response.data]));\n        const image = yield this.loadImage(src);\n        URL.revokeObjectURL(src);\n        return image;\n      }));\n      this.setState(\"ready\");\n    });\n  }\n};\n__name(_PMTilesRasterSource, \"PMTilesRasterSource\");\nvar PMTilesRasterSource = _PMTilesRasterSource;\nvar _PMTilesVectorSource = class _PMTilesVectorSource extends VectorTileSource {\n  constructor(options) {\n    super(__spreadValues(__spreadValues({}, options), {\n      state: \"loading\",\n      url: \"pmtiles://{z}/{x}/{y}\",\n      format: options.format || new MVT()\n    }));\n    this.tileLoadFunction = /* @__PURE__ */__name((tile, url) => {\n      const vtile = tile;\n      const re = new RegExp(/pmtiles:\\/\\/(\\d+)\\/(\\d+)\\/(\\d+)/);\n      const result = url.match(re);\n      if (!(result && result.length >= 4)) {\n        throw Error(\"Could not parse tile URL\");\n      }\n      const z = +result[1];\n      const x = +result[2];\n      const y = +result[3];\n      vtile.setLoader((extent, resolution, projection) => {\n        this.pmtiles_.getZxy(z, x, y).then(tile_result => {\n          if (tile_result) {\n            const format = vtile.getFormat();\n            vtile.setFeatures(format.readFeatures(tile_result.data, {\n              extent,\n              featureProjection: projection\n            }));\n            vtile.setState(TileState.LOADED);\n          } else {\n            vtile.setFeatures([]);\n            vtile.setState(TileState.EMPTY);\n          }\n        }).catch(err => {\n          vtile.setFeatures([]);\n          vtile.setState(TileState.ERROR);\n        });\n      });\n    }, \"tileLoadFunction\");\n    this.pmtiles_ = new PMTiles(options.url);\n    this.pmtiles_.getHeader().then(h => {\n      const projection = options.projection || \"EPSG:3857\";\n      const extent = options.extent || extentFromProjection(projection);\n      this.tileGrid = options.tileGrid || createXYZ({\n        extent,\n        maxResolution: options.maxResolution,\n        maxZoom: options.maxZoom !== void 0 ? options.maxZoom : h.maxZoom,\n        minZoom: h.minZoom,\n        tileSize: options.tileSize || 512\n      });\n      this.setTileLoadFunction(this.tileLoadFunction);\n      this.setState(\"ready\");\n    });\n  }\n};\n__name(_PMTilesVectorSource, \"PMTilesVectorSource\");\nvar PMTilesVectorSource = _PMTilesVectorSource;\nexport { PMTilesRasterSource, PMTilesVectorSource };\n"],
  "mappings": "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",
  "names": ["Feature_default", "x", "z", "schemaLocation", "MULTIGEOMETRY_TO_MEMBER_NODENAME", "re", "m", "x", "z", "NAMESPACE_URIS", "NAMESPACE_URIS", "LINK_PARSERS", "m", "re", "x", "z", "NAMESPACE_URIS", "w", "imageState", "imageSize", "geometry", "type", "LINK_PARSERS", "v", "T", "e", "A", "U", "R", "H", "M", "B", "b", "x", "_PMTilesRasterSource", "z", "_PMTilesVectorSource", "re"]
}
