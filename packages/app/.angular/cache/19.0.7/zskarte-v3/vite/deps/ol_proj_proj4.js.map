{
  "version": 3,
  "sources": ["../../../../../../../../node_modules/ol/proj/proj4.js"],
  "sourcesContent": ["/**\n * @module ol/proj/proj4\n */\nimport Projection from './Projection.js';\nimport { addCoordinateTransforms, addEquivalentProjections, addProjection, createSafeCoordinateTransform } from '../proj.js';\nimport { get as getCachedProjection } from './projections.js';\nimport { get as getTransform } from './transforms.js';\n\n/**\n * @type {import(\"proj4\")|null}\n */\nlet registered = null;\n\n/**\n * @return {boolean} Proj4 has been registered.\n */\nexport function isRegistered() {\n  return !!registered;\n}\n\n/**\n * Unsets the shared proj4 previously set with register.\n */\nexport function unregister() {\n  registered = null;\n}\n\n/**\n * Make projections defined in proj4 (with `proj4.defs()`) available in\n * OpenLayers. Requires proj4 >= 2.8.0.\n *\n * This function should be called whenever changes are made to the proj4\n * registry, e.g. after calling `proj4.defs()`. Existing transforms will not be\n * modified by this function.\n *\n * @param {import(\"proj4\")} proj4 Proj4.\n * @api\n */\nexport function register(proj4) {\n  registered = proj4;\n  const projCodes = Object.keys(proj4.defs);\n  const len = projCodes.length;\n  let i, j;\n  for (i = 0; i < len; ++i) {\n    const code = projCodes[i];\n    if (!getCachedProjection(code)) {\n      const def = proj4.defs(code);\n      let units = /** @type {import(\"./Units.js\").Units} */def.units;\n      if (!units && def.projName === 'longlat') {\n        units = 'degrees';\n      }\n      addProjection(new Projection({\n        code: code,\n        axisOrientation: def.axis,\n        metersPerUnit: def.to_meter,\n        units\n      }));\n    }\n  }\n  for (i = 0; i < len; ++i) {\n    const code1 = projCodes[i];\n    const proj1 = getCachedProjection(code1);\n    for (j = 0; j < len; ++j) {\n      const code2 = projCodes[j];\n      const proj2 = getCachedProjection(code2);\n      if (!getTransform(code1, code2)) {\n        if (proj4.defs[code1] === proj4.defs[code2]) {\n          addEquivalentProjections([proj1, proj2]);\n        } else {\n          const transform = proj4(code1, code2);\n          addCoordinateTransforms(proj1, proj2, createSafeCoordinateTransform(proj1, proj2, transform.forward), createSafeCoordinateTransform(proj2, proj1, transform.inverse));\n        }\n      }\n    }\n  }\n}\n\n/**\n * @param {number} code The EPSG code.\n * @return {Promise<string>} The proj4 definition.\n */\nlet epsgLookup = async function (code) {\n  const response = await fetch(`https://epsg.io/${code}.proj4`);\n  if (!response.ok) {\n    throw new Error(`Unexpected response from epsg.io: ${response.status}`);\n  }\n  return response.text();\n};\n\n/**\n * Set the lookup function for getting proj4 definitions given an EPSG code.\n * By default, the {@link module:ol/proj/proj4.fromEPSGCode} function uses the\n * epsg.io website for proj4 definitions.  This can be changed by providing a\n * different lookup function.\n *\n * @param {function(number):Promise<string>} func The lookup function.\n * @api\n */\nexport function setEPSGLookup(func) {\n  epsgLookup = func;\n}\n\n/**\n * Get the current EPSG lookup function.\n *\n * @return {function(number):Promise<string>} The EPSG lookup function.\n */\nexport function getEPSGLookup() {\n  return epsgLookup;\n}\n\n/**\n * Get a projection from an EPSG code.  This function fetches the projection\n * definition from the epsg.io website, registers this definition for use with\n * proj4, and returns a configured projection.  You must call import proj4 and\n * call {@link module:ol/proj/proj4.register} before using this function.\n *\n * If the projection definition is already registered with proj4, it will not\n * be fetched again (so it is ok to call this function multiple times with the\n * same code).\n *\n * @param {number|string} code The EPSG code (e.g. 4326 or 'EPSG:4326').\n * @return {Promise<Projection>} The projection.\n * @api\n */\nexport async function fromEPSGCode(code) {\n  if (typeof code === 'string') {\n    code = parseInt(code.split(':').pop(), 10);\n  }\n  const proj4 = registered;\n  if (!proj4) {\n    throw new Error('Proj4 must be registered first with register(proj4)');\n  }\n  const epsgCode = 'EPSG:' + code;\n  if (proj4.defs(epsgCode)) {\n    return getCachedProjection(epsgCode);\n  }\n  proj4.defs(epsgCode, await epsgLookup(code));\n  register(proj4);\n  return getCachedProjection(epsgCode);\n}\n\n/**\n * Generate an EPSG lookup function which uses the MapTiler Coordinates API to find projection\n * definitions which do not require proj4 to be configured to handle `+nadgrids` parameters.\n * Call {@link module:ol/proj/proj4.setEPSGLookup} use the function for lookups\n * `setEPSGLookup(epsgLookupMapTiler('{YOUR_MAPTILER_API_KEY_HERE}'))`.\n *\n * @param {string} key MapTiler API key.  Get your own API key at https://www.maptiler.com/cloud/.\n * @return {function(number):Promise<string>} The EPSG lookup function.\n * @api\n */\nexport function epsgLookupMapTiler(key) {\n  return async function (code) {\n    const response = await fetch(`https://api.maptiler.com/coordinates/search/code:${code}.json?transformations=true&exports=true&key=${key}`);\n    if (!response.ok) {\n      throw new Error(`Unexpected response from maptiler.com: ${response.status}`);\n    }\n    return response.json().then(json => {\n      const results = json['results'];\n      if (results?.length > 0) {\n        const result = results.filter(r => r['id']?.['authority'] === 'EPSG' && r['id']?.['code'] === code)[0];\n        if (result) {\n          const transforms = result['transformations'];\n          if (transforms?.length > 0) {\n            // use default transform if it does not require grids\n            const defaultTransform = result['default_transformation'];\n            if (transforms.filter(t => t['id']?.['authority'] === defaultTransform?.['authority'] && t['id']?.['code'] === defaultTransform?.['code'] && t['grids']?.length === 0).length > 0) {\n              return result['exports']?.['proj4'];\n            }\n            // otherwise use most accurate alternative without grids\n            const transform = transforms.filter(t => t['grids']?.length === 0 && t['target_crs']?.['authority'] === 'EPSG' && t['target_crs']?.['code'] === 4326 && t['deprecated'] === false && t['usable'] === true).sort((t1, t2) => t1['accuracy'] - t2['accuracy'])[0]?.['exports']?.['proj4'];\n            if (transform) {\n              return transform;\n            }\n          }\n          // fallback to default\n          return result['exports']?.['proj4'];\n        }\n      }\n    });\n  };\n}"],
  "mappings": "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",
  "names": ["get"]
}
