{
  "version": 3,
  "sources": ["../../../../../../node_modules/ol-ext/style/FillPattern.js"],
  "sourcesContent": ["/*\tCopyright (c) 2016 Jean-Marc VIGLINO, \r\n  released under the CeCILL-B license (French BSD license)\r\n  (http://www.cecill.info/licences/Licence_CeCILL-B_V1-en.txt).\r\n*/\n\nimport { DEVICE_PIXEL_RATIO as ol_has_DEVICE_PIXEL_RATIO } from 'ol/has.js';\nimport ol_style_Fill from 'ol/style/Fill.js';\nimport { asString as ol_color_asString } from 'ol/color.js';\n\n/**\r\n * @classdesc\r\n * Fill style with named pattern\r\n *\r\n * @constructor\r\n * @param {any}  options\r\n *  @param {ol.style.Image|undefined} options.image an image pattern, image must be preloaded to draw on first call\r\n *  @param {number|undefined} options.opacity opacity with image pattern, default:1\r\n *  @param {string} options.pattern pattern name (override by image option)\r\n *  @param {ol_color} options.color pattern color\r\n *  @param {ol_style_Fill} options.fill fill color (background)\r\n *  @param {number|Array<number>} options.offset pattern offset for hash/dot/circle/cross pattern\r\n *  @param {number} options.size line size for hash/dot/circle/cross pattern\r\n *  @param {number} options.spacing spacing for hash/dot/circle/cross pattern\r\n *  @param {number|bool} options.angle angle for hash pattern / true for 45deg dot/circle/cross\r\n *  @param {number} options.scale pattern scale \r\n * @extends {ol_style_Fill}\r\n * @api\r\n */\nvar ol_style_FillPattern = class olstyleFillPattern extends ol_style_Fill {\n  constructor(options) {\n    super();\n    options = options || {};\n    var pattern;\n    var canvas = this.canvas_ = document.createElement('canvas');\n    var scale = Number(options.scale) > 0 ? Number(options.scale) : 1;\n    var ratio = scale * ol_has_DEVICE_PIXEL_RATIO || ol_has_DEVICE_PIXEL_RATIO;\n    var ctx = canvas.getContext('2d');\n    if (options.image) {\n      options.image.load();\n      var i;\n      var img = options.image.getImage();\n      if (img.width) {\n        canvas.width = Math.round(img.width * ratio);\n        canvas.height = Math.round(img.height * ratio);\n        ctx.globalAlpha = typeof options.opacity == 'number' ? options.opacity : 1;\n        ctx.drawImage(img, 0, 0, img.width, img.height, 0, 0, canvas.width, canvas.height);\n        pattern = ctx.createPattern(canvas, 'repeat');\n      } else {\n        var self = this;\n        pattern = [0, 0, 0, 0];\n        img.onload = function () {\n          canvas.width = Math.round(img.width * ratio);\n          canvas.height = Math.round(img.height * ratio);\n          ctx.globalAlpha = typeof options.opacity == 'number' ? options.opacity : 1;\n          ctx.drawImage(img, 0, 0, img.width, img.height, 0, 0, canvas.width, canvas.height);\n          pattern = ctx.createPattern(canvas, 'repeat');\n          self.setColor(pattern);\n        };\n      }\n    } else {\n      var pat = this.getPattern_(options);\n      canvas.width = Math.round(pat.width * ratio);\n      canvas.height = Math.round(pat.height * ratio);\n      ctx.beginPath();\n      if (options.fill) {\n        ctx.fillStyle = ol_color_asString(options.fill.getColor());\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n      }\n      ctx.scale(ratio, ratio);\n      ctx.lineCap = \"round\";\n      ctx.lineWidth = pat.stroke || 1;\n      ctx.fillStyle = ol_color_asString(options.color || \"#000\");\n      ctx.strokeStyle = ol_color_asString(options.color || \"#000\");\n      if (pat.circles) for (i = 0; i < pat.circles.length; i++) {\n        var ci = pat.circles[i];\n        ctx.beginPath();\n        ctx.arc(ci[0], ci[1], ci[2], 0, 2 * Math.PI);\n        if (pat.fill) ctx.fill();\n        if (pat.stroke) ctx.stroke();\n      }\n      if (!pat.repeat) pat.repeat = [[0, 0]];\n      if (pat.char) {\n        ctx.font = pat.font || pat.width + \"px Arial\";\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        if (pat.angle) {\n          ctx.fillText(pat.char, pat.width / 4, pat.height / 4);\n          ctx.fillText(pat.char, 5 * pat.width / 4, 5 * pat.height / 4);\n          ctx.fillText(pat.char, pat.width / 4, 5 * pat.height / 4);\n          ctx.fillText(pat.char, 5 * pat.width / 4, pat.height / 4);\n          ctx.fillText(pat.char, 3 * pat.width / 4, 3 * pat.height / 4);\n          ctx.fillText(pat.char, -pat.width / 4, -pat.height / 4);\n          ctx.fillText(pat.char, 3 * pat.width / 4, -pat.height / 4);\n          ctx.fillText(pat.char, -pat.width / 4, 3 * pat.height / 4);\n        } else ctx.fillText(pat.char, pat.width / 2, pat.height / 2);\n      }\n      if (pat.lines) for (i = 0; i < pat.lines.length; i++) for (var r = 0; r < pat.repeat.length; r++) {\n        var li = pat.lines[i];\n        ctx.beginPath();\n        ctx.moveTo(li[0] + pat.repeat[r][0], li[1] + pat.repeat[r][1]);\n        for (var k = 2; k < li.length; k += 2) {\n          ctx.lineTo(li[k] + pat.repeat[r][0], li[k + 1] + pat.repeat[r][1]);\n        }\n        if (pat.fill) ctx.fill();\n        if (pat.stroke) ctx.stroke();\n        ctx.save();\n        ctx.strokeStyle = 'red';\n        ctx.strokeWidth = 0.1;\n        //ctx.strokeRect(0,0,canvas.width,canvas.height);\n        ctx.restore();\n      }\n      pattern = ctx.createPattern(canvas, 'repeat');\n      if (options.offset) {\n        var offset = options.offset;\n        if (typeof offset == \"number\") offset = [offset, offset];\n        if (offset instanceof Array) {\n          var dx = Math.round(offset[0] * ratio);\n          var dy = Math.round(offset[1] * ratio);\n          // New pattern\n          ctx.scale(1 / ratio, 1 / ratio);\n          ctx.clearRect(0, 0, canvas.width, canvas.height);\n          ctx.translate(dx, dy);\n          ctx.fillStyle = pattern;\n          ctx.fillRect(-dx, -dy, canvas.width, canvas.height);\n          pattern = ctx.createPattern(canvas, 'repeat');\n        }\n      }\n    }\n    // Set pattern as fill color\n    this.setColor(pattern);\n  }\n  /** Static fuction to add char patterns\r\n   * @param {title}\r\n   * @param {object} options\r\n   *  @param {integer} [options.size=10] default 10\r\n   *  @param {integer} [options. width=10] default 10\r\n   *  @param {integer} [options.height=10] default 10\r\n   *  @param {Array<circles>} [options.circles]\r\n   *  @param {Array<pointlist>} [options.lines]\r\n   *  @param {integer} [options.stroke]\r\n   *  @param {bool} [options.fill]\r\n   *  @param {char} [option.char]\r\n   *  @param {string} [font=\"10px Arial\"]\r\n   */\n  static addPattern(title, options) {\n    if (!options) options = {};\n    ol_style_FillPattern.patterns[title || options.char] = {\n      width: options.width || options.size || 10,\n      height: options.height || options.size || 10,\n      font: options.font,\n      char: options.char,\n      circles: options.circles,\n      lines: options.lines,\n      repeat: options.repeat,\n      stroke: options.stroke,\n      angle: options.angle,\n      fill: options.fill\n    };\n  }\n  /**\r\n   * Clones the style.\r\n   * @return {ol_style_FillPattern}\r\n   */\n  clone() {\n    var s = super.clone();\n    s.canvas_ = this.canvas_;\n    return s;\n  }\n  /** Get canvas used as pattern\r\n  *\t@return {canvas}\r\n  */\n  getImage() {\n    return this.canvas_;\n  }\n  /** Get pattern\r\n  *\t@param {olx.style.FillPatternOption}\r\n  */\n  getPattern_(options) {\n    var pat = ol_style_FillPattern.patterns[options.pattern] || ol_style_FillPattern.patterns.dot;\n    var d = Math.round(options.spacing) || 10;\n    var size;\n    switch (options.pattern) {\n      case 'dot':\n      // fallsthrough\n      case 'circle':\n        {\n          size = options.size === 0 ? 0 : options.size / 2 || 2;\n          if (!options.angle) {\n            pat.width = pat.height = d;\n            pat.circles = [[d / 2, d / 2, size]];\n            if (options.pattern == 'circle') {\n              pat.circles = pat.circles.concat([[d / 2 + d, d / 2, size], [d / 2 - d, d / 2, size], [d / 2, d / 2 + d, size], [d / 2, d / 2 - d, size], [d / 2 + d, d / 2 + d, size], [d / 2 + d, d / 2 - d, size], [d / 2 - d, d / 2 + d, size], [d / 2 - d, d / 2 - d, size]]);\n            }\n          } else {\n            d = pat.width = pat.height = Math.round(d * 1.4);\n            pat.circles = [[d / 4, d / 4, size], [3 * d / 4, 3 * d / 4, size]];\n            if (options.pattern == 'circle') {\n              pat.circles = pat.circles.concat([[d / 4 + d, d / 4, size], [d / 4, d / 4 + d, size], [3 * d / 4 - d, 3 * d / 4, size], [3 * d / 4, 3 * d / 4 - d, size], [d / 4 + d, d / 4 + d, size], [3 * d / 4 - d, 3 * d / 4 - d, size]]);\n            }\n          }\n          break;\n        }\n      case 'tile':\n      // fallsthrough\n      case 'square':\n        {\n          size = options.size === 0 ? 0 : options.size / 2 || 2;\n          if (!options.angle) {\n            pat.width = pat.height = d;\n            pat.lines = [[d / 2 - size, d / 2 - size, d / 2 + size, d / 2 - size, d / 2 + size, d / 2 + size, d / 2 - size, d / 2 + size, d / 2 - size, d / 2 - size]];\n          } else {\n            pat.width = pat.height = d;\n            //size *= Math.sqrt(2);\n            pat.lines = [[d / 2 - size, d / 2, d / 2, d / 2 - size, d / 2 + size, d / 2, d / 2, d / 2 + size, d / 2 - size, d / 2]];\n          }\n          if (options.pattern == 'square') pat.repeat = [[0, 0], [0, d], [d, 0], [0, -d], [-d, 0], [-d, -d], [d, d], [-d, d], [d, -d]];\n          break;\n        }\n      case 'cross':\n        {\n          // Limit angle to 0 | 45\n          if (options.angle) options.angle = 45;\n        }\n      // fallsthrough\n      case 'hatch':\n        {\n          var a = Math.round(((options.angle || 0) - 90) % 360);\n          if (a > 180) a -= 360;\n          a *= Math.PI / 180;\n          var cos = Math.cos(a);\n          var sin = Math.sin(a);\n          if (Math.abs(sin) < 0.0001) {\n            pat.width = pat.height = d;\n            pat.lines = [[0, 0.5, d, 0.5]];\n            pat.repeat = [[0, 0], [0, d]];\n          } else if (Math.abs(cos) < 0.0001) {\n            pat.width = pat.height = d;\n            pat.lines = [[0.5, 0, 0.5, d]];\n            pat.repeat = [[0, 0], [d, 0]];\n            if (options.pattern == 'cross') {\n              pat.lines.push([0, 0.5, d, 0.5]);\n              pat.repeat.push([0, d]);\n            }\n          } else {\n            var w = pat.width = Math.round(Math.abs(d / sin)) || 1;\n            var h = pat.height = Math.round(Math.abs(d / cos)) || 1;\n            if (options.pattern == 'cross') {\n              pat.lines = [[-w, -h, 2 * w, 2 * h], [2 * w, -h, -w, 2 * h]];\n              pat.repeat = [[0, 0]];\n            } else if (cos * sin > 0) {\n              pat.lines = [[-w, -h, 2 * w, 2 * h]];\n              pat.repeat = [[0, 0], [w, 0], [0, h]];\n            } else {\n              pat.lines = [[2 * w, -h, -w, 2 * h]];\n              pat.repeat = [[0, 0], [-w, 0], [0, h]];\n            }\n          }\n          pat.stroke = options.size === 0 ? 0 : options.size || 4;\n          break;\n        }\n      default:\n        break;\n    }\n    return pat;\n  }\n};\n\n/** Patterns definitions\r\n * @see pattern generator http://www.imagico.de/map/jsdotpattern.php\r\n */\nol_style_FillPattern.patterns = {\n  \"hatch\": {\n    width: 5,\n    height: 5,\n    lines: [[0, 2.5, 5, 2.5]],\n    stroke: 1\n  },\n  \"cross\": {\n    width: 7,\n    height: 7,\n    lines: [[0, 3, 10, 3], [3, 0, 3, 10]],\n    stroke: 1\n  },\n  \"dot\": {\n    width: 8,\n    height: 8,\n    circles: [[5, 5, 2]],\n    stroke: false,\n    fill: true\n  },\n  \"circle\": {\n    width: 10,\n    height: 10,\n    circles: [[5, 5, 2]],\n    stroke: 1,\n    fill: false\n  },\n  \"square\": {\n    width: 10,\n    height: 10,\n    lines: [[3, 3, 3, 8, 8, 8, 8, 3, 3, 3]],\n    stroke: 1,\n    fill: false\n  },\n  \"tile\": {\n    width: 10,\n    height: 10,\n    lines: [[3, 3, 3, 8, 8, 8, 8, 3, 3, 3]],\n    fill: true\n  },\n  \"woven\": {\n    width: 12,\n    height: 12,\n    lines: [[3, 3, 9, 9], [0, 12, 3, 9], [9, 3, 12, 0], [-1, 1, 1, -1], [13, 11, 11, 13]],\n    stroke: 1\n  },\n  \"crosses\": {\n    width: 8,\n    height: 8,\n    lines: [[2, 2, 6, 6], [2, 6, 6, 2]],\n    stroke: 1\n  },\n  \"caps\": {\n    width: 8,\n    height: 8,\n    lines: [[2, 6, 4, 2, 6, 6]],\n    stroke: 1\n  },\n  \"nylon\": {\n    width: 20,\n    height: 20,\n    //\t\tlines: [[ 0,5, 0,0, 5,0 ],[ 5,10, 10,10, 10,5 ], [ 10,15, 10,20, 15,20 ],[ 15,10, 20,10, 20,15 ]],\n    //\t\trepeat: [[0,0], [20,0], [0,20], [-20,0], [0,-20], [-20,-20]],\n    lines: [[1, 6, 1, 1, 6, 1], [6, 11, 11, 11, 11, 6], [11, 16, 11, 21, 16, 21], [16, 11, 21, 11, 21, 16]],\n    repeat: [[0, 0], [-20, 0], [0, -20]],\n    stroke: 1\n  },\n  \"hexagon\": {\n    width: 20,\n    height: 12,\n    lines: [[0, 10, 4, 4, 10, 4, 14, 10, 10, 16, 4, 16, 0, 10]],\n    stroke: 1,\n    repeat: [[0, 0], [10, 6], [10, -6], [-10, -6]]\n  },\n  \"cemetry\": {\n    width: 15,\n    height: 19,\n    lines: [[0, 3.5, 7, 3.5], [3.5, 0, 3.5, 10]\n    //[7,12.5,14,12.5],[10.5,9,10.5,19]\n    ],\n    stroke: 1,\n    repeat: [[0, 0], [7, 9]]\n  },\n  \"sand\": {\n    width: 20,\n    height: 20,\n    circles: [[1, 2, 1], [9, 3, 1], [2, 16, 1], [7, 8, 1], [6, 14, 1], [4, 19, 1], [14, 2, 1], [12, 10, 1], [14, 18, 1], [18, 8, 1], [18, 14, 1]],\n    fill: 1\n  },\n  \"conglomerate\": {\n    width: 60,\n    height: 40,\n    circles: [[2, 4, 1], [17, 3, 1], [26, 18, 1], [12, 17, 1], [5, 17, 2], [28, 11, 2]],\n    lines: [[7, 5, 6, 7, 9, 9, 11, 8, 11, 6, 9, 5, 7, 5], [16, 10, 15, 13, 16, 14, 19, 15, 21, 13, 22, 9, 20, 8, 19, 8, 16, 10], [24, 6, 26, 7, 27, 5, 26, 4, 24, 4, 24, 6]],\n    repeat: [[30, 0], [-15, 20], [15, 20], [45, 20]],\n    stroke: 1\n  },\n  \"conglomerate2\": {\n    width: 60,\n    height: 40,\n    circles: [[2, 4, 1], [17, 3, 1], [26, 18, 1], [12, 17, 1], [5, 17, 2], [28, 11, 2]],\n    lines: [[7, 5, 6, 7, 9, 9, 11, 8, 11, 6, 9, 5, 7, 5], [16, 10, 15, 13, 16, 14, 19, 15, 21, 13, 22, 9, 20, 8, 19, 8, 16, 10], [24, 6, 26, 7, 27, 5, 26, 4, 24, 4, 24, 6]],\n    repeat: [[30, 0], [-15, 20], [15, 20], [45, 20]],\n    fill: 1\n  },\n  \"gravel\": {\n    width: 15,\n    height: 10,\n    circles: [[4, 2, 1], [5, 9, 1], [1, 7, 1]],\n    //[9,9,1],,[15,2,1]],\n    lines: [[7, 5, 6, 6, 7, 7, 8, 7, 9, 7, 10, 5, 9, 4, 7, 5], [11, 2, 14, 4, 14, 1, 12, 1, 11, 2]],\n    stroke: 1\n  },\n  \"brick\": {\n    width: 18,\n    height: 16,\n    lines: [[0, 1, 18, 1], [0, 10, 18, 10], [6, 1, 6, 10], [12, 10, 12, 18], [12, 0, 12, 1]],\n    stroke: 1\n  },\n  \"dolomite\": {\n    width: 20,\n    height: 16,\n    lines: [[0, 1, 20, 1], [0, 9, 20, 9], [1, 9, 6, 1], [11, 9, 14, 16], [14, 0, 14.4, 1]],\n    stroke: 1\n  },\n  \"coal\": {\n    width: 20,\n    height: 16,\n    lines: [[1, 5, 7, 1, 7, 7], [11, 10, 12, 5, 18, 9], [5, 10, 2, 15, 9, 15], [15, 16, 15, 13, 20, 16], [15, 0, 15, 2, 20, 0]],\n    fill: 1\n  },\n  \"breccia\": {\n    width: 20,\n    height: 16,\n    lines: [[1, 5, 7, 1, 7, 7, 1, 5], [11, 10, 12, 5, 18, 9, 11, 10], [5, 10, 2, 15, 9, 15, 5, 10], [15, 16, 15, 13, 22, 18], [15, 0, 15, 2, 20, 0]],\n    stroke: 1\n  },\n  \"clay\": {\n    width: 20,\n    height: 20,\n    lines: [[0, 0, 3, 11, 0, 20], [11, 0, 10, 3, 13, 13, 11, 20], [0, 0, 10, 3, 20, 0], [0, 12, 3, 11, 13, 13, 20, 12]],\n    stroke: 1\n  },\n  \"flooded\": {\n    width: 15,\n    height: 10,\n    lines: [[0, 1, 10, 1], [0, 6, 5, 6], [10, 6, 15, 6]],\n    stroke: 1\n  },\n  \"chaos\": {\n    width: 40,\n    height: 40,\n    lines: [[40, 2, 40, 0, 38, 0, 40, 2], [4, 0, 3, 2, 2, 5, 0, 0, 0, 3, 2, 7, 5, 6, 7, 7, 8, 10, 9, 12, 9, 13, 9, 14, 8, 14, 6, 15, 2, 15, 0, 20, 0, 22, 2, 20, 5, 19, 8, 15, 10, 14, 11, 12.25, 10, 12, 10, 10, 12, 9, 13, 7, 12, 6, 13, 4, 16, 7, 17, 4, 20, 0, 18, 0, 15, 3, 14, 2, 14, 0, 12, 1, 11, 0, 10, 1, 11, 4, 10, 7, 9, 8, 8, 5, 6, 4, 5, 3, 5, 1, 5, 0, 4, 0], [7, 1, 7, 3, 8, 3, 8, 2, 7, 1], [4, 3, 5, 5, 4, 5, 4, 3], [34, 5, 33, 7, 38, 10, 38, 8, 36, 5, 34, 5], [27, 0, 23, 2, 21, 8, 30, 0, 27, 0], [25, 8, 26, 12, 26, 16, 22.71875, 15.375, 20, 13, 18, 15, 17, 18, 13, 22, 17, 21, 19, 22, 21, 20, 19, 18, 22, 17, 30, 25, 26, 26, 24, 28, 21.75, 33.34375, 20, 36, 18, 40, 20, 40, 24, 37, 25, 32, 27, 31, 26, 38, 27, 37, 30, 32, 32, 35, 36, 37, 38, 40, 38, 39, 40, 40, 37, 36, 34, 32, 37, 31, 36, 29, 33, 27, 34, 24, 39, 21, 40, 21, 40, 16, 37, 20, 31, 22, 32, 25, 27, 20, 29, 15, 30, 20, 32, 20, 34, 18, 33, 12, 31, 11, 29, 14, 26, 9, 25, 8], [39, 24, 37, 26, 40, 28, 39, 24], [13, 15, 9, 19, 14, 18, 13, 15], [18, 23, 14, 27, 16, 27, 17, 25, 20, 26, 18, 23], [6, 24, 2, 26, 1, 28, 2, 30, 5, 28, 12, 30, 16, 32, 18, 30, 15, 30, 12, 28, 9, 25, 7, 27, 6, 24], [29, 27, 32, 28, 33, 31, 30, 29, 27, 28, 29, 27], [5, 35, 1, 33, 3, 36, 13, 38, 15, 35, 10, 36, 5, 35]],\n    fill: 1\n  },\n  \"grass\": {\n    width: 27,\n    height: 22,\n    lines: [[0, 10.5, 13, 10.5], [2.5, 10, 1.5, 7], [4.5, 10, 4.5, 5, 3.5, 4], [7, 10, 7.5, 6, 8.5, 3], [10, 10, 11, 6]],\n    repeat: [[0, 0], [14, 10]],\n    stroke: 1\n  },\n  \"swamp\": {\n    width: 24,\n    height: 23,\n    lines: [[0, 10.5, 9.5, 10.5], [2.5, 10, 2.5, 7], [4.5, 10, 4.5, 4], [6.5, 10, 6.5, 6], [3, 12.5, 7, 12.5]],\n    repeat: [[0, 0], [14, 10]],\n    stroke: 1\n  },\n  \"reed\": {\n    width: 26,\n    height: 23,\n    lines: [[2.5, 10, 2, 7], [4.5, 10, 4.2, 4], [6.5, 10, 6.8, 4], [8.5, 10, 9, 6], [3.7, 4, 3.7, 2.5], [4.7, 4, 4.7, 2.5], [6.3, 4, 6.3, 2.5], [7.3, 4, 7.3, 2.5]],\n    circles: [[4.2, 2.5, .5], [18.2, 12.5, .5], [6.8, 2.5, .5], [20.8, 12.5, .5], [9, 6, .5], [23, 16, .5]],\n    repeat: [[0, 0], [14, 10]],\n    stroke: 1\n  },\n  \"wave\": {\n    width: 10,\n    height: 8,\n    lines: [[0, 0, 5, 4, 10, 0]],\n    stroke: 1\n  },\n  \"vine\": {\n    width: 13,\n    height: 13,\n    lines: [[3, 0, 3, 6], [9, 7, 9, 13]],\n    stroke: 1.0\n  },\n  \"forest\": {\n    width: 55,\n    height: 30,\n    circles: [[7, 7, 3.5], [20, 20, 1.5], [42, 22, 3.5], [35, 5, 1.5]],\n    stroke: 1\n  },\n  \"forest2\": {\n    width: 55,\n    height: 30,\n    circles: [[7, 7, 3.5], [20, 20, 1.5], [42, 22, 3.5], [35, 5, 1.5]],\n    fill: 1,\n    stroke: 1\n  },\n  \"scrub\": {\n    width: 26,\n    height: 20,\n    lines: [[1, 4, 4, 8, 6, 4]],\n    circles: [[20, 13, 1.5]],\n    stroke: 1\n  },\n  \"tree\": {\n    width: 30,\n    height: 30,\n    lines: [[7.78, 10.61, 4.95, 10.61, 4.95, 7.78, 3.54, 7.78, 2.12, 6.36, 0.71, 6.36, 0, 4.24, 0.71, 2.12, 4.24, 0, 7.78, 0.71, 9.19, 3.54, 7.78, 4.95, 7.07, 7.07, 4.95, 7.78]],\n    repeat: [[3, 1], [18, 16]],\n    stroke: 1\n  },\n  \"tree2\": {\n    width: 30,\n    height: 30,\n    lines: [[7.78, 10.61, 4.95, 10.61, 4.95, 7.78, 3.54, 7.78, 2.12, 6.36, 0.71, 6.36, 0, 4.24, 0.71, 2.12, 4.24, 0, 7.78, 0.71, 9.19, 3.54, 7.78, 4.95, 7.07, 7.07, 4.95, 7.78, 4.95, 10.61, 7.78, 10.61]],\n    repeat: [[3, 1], [18, 16]],\n    fill: 1,\n    stroke: 1\n  },\n  \"pine\": {\n    width: 30,\n    height: 30,\n    lines: [[5.66, 11.31, 2.83, 11.31, 2.83, 8.49, 0, 8.49, 2.83, 0, 5.66, 8.49, 2.83, 8.49]],\n    repeat: [[3, 1], [18, 16]],\n    stroke: 1\n  },\n  \"pine2\": {\n    width: 30,\n    height: 30,\n    lines: [[5.66, 11.31, 2.83, 11.31, 2.83, 8.49, 0, 8.49, 2.83, 0, 5.66, 8.49, 2.83, 8.49, 2.83, 11.31, 5.66, 11.31]],\n    repeat: [[3, 1], [18, 16]],\n    fill: 1,\n    stroke: 1\n  },\n  \"mixtree\": {\n    width: 30,\n    height: 30,\n    lines: [[7.78, 10.61, 4.95, 10.61, 4.95, 7.78, 3.54, 7.78, 2.12, 6.36, 0.71, 6.36, 0, 4.24, 0.71, 2.12, 4.24, 0, 7.78, 0.71, 9.19, 3.54, 7.78, 4.95, 7.07, 7.07, 4.95, 7.78, 4.95, 10.61, 7.78, 10.61], [23.66, 27.31, 20.83, 27.31, 20.83, 24.49, 18, 24.49, 20.83, 16, 23.66, 24.49, 20.83, 24.49, 20.83, 27.31, 23.66, 27.31]],\n    repeat: [[3, 1]],\n    stroke: 1\n  },\n  \"mixtree2\": {\n    width: 30,\n    height: 30,\n    lines: [[7.78, 10.61, 4.95, 10.61, 4.95, 7.78, 3.54, 7.78, 2.12, 6.36, 0.71, 6.36, 0, 4.24, 0.71, 2.12, 4.24, 0, 7.78, 0.71, 9.19, 3.54, 7.78, 4.95, 7.07, 7.07, 4.95, 7.78, 4.95, 10.61, 7.78, 10.61], [23.66, 27.31, 20.83, 27.31, 20.83, 24.49, 18, 24.49, 20.83, 16, 23.66, 24.49, 20.83, 24.49, 20.83, 27.31, 23.66, 27.31]],\n    repeat: [[3, 1]],\n    fill: 1,\n    stroke: 1\n  },\n  \"pines\": {\n    width: 22,\n    height: 20,\n    lines: [[1, 4, 3.5, 1, 6, 4], [1, 8, 3.5, 5, 6, 8], [3.5, 1, 3.5, 11], [12, 14.5, 14.5, 14, 17, 14.5], [12, 18, 17, 18], [14.5, 12, 14.5, 18]],\n    repeat: [[2, 1]],\n    stroke: 1\n  },\n  \"rock\": {\n    width: 20,\n    height: 20,\n    lines: [[1, 0, 1, 9], [4, 0, 4, 9], [7, 0, 7, 9], [10, 1, 19, 1], [10, 4, 19, 4], [10, 7, 19, 7], [0, 11, 9, 11], [0, 14, 9, 14], [0, 17, 9, 17], [12, 10, 12, 19], [15, 10, 15, 19], [18, 10, 18, 19]],\n    repeat: [[0.5, 0.5]],\n    stroke: 1\n  },\n  \"rocks\": {\n    width: 20,\n    height: 20,\n    lines: [[5, 0, 3, 0, 5, 4, 4, 6, 0, 3, 0, 5, 3, 6, 5, 9, 3.75, 10, 2.5, 10, 0, 9, 0, 10, 4, 11, 5, 14, 4, 15, 0, 13, 0, 13, 0, 13, 0, 14, 0, 14, 5, 16, 5, 18, 3, 19, 0, 19, -0.25, 19.9375, 5, 20, 10, 19, 10, 20, 11, 20, 12, 19, 14, 20, 15, 20, 17, 19, 20, 20, 20, 19, 19, 16, 20, 15, 20, 11, 20, 10, 19, 8, 20, 5, 20, 0, 19, 0, 20, 2, 19, 4, 17, 4, 16, 3, 15, 0, 14, 0, 15, 4, 11, 5, 10, 4, 11, 0, 10, 0, 9, 4, 6, 5, 5, 0], [18, 5, 19, 6, 18, 10, 16, 10, 14, 9, 16, 5, 18, 5], [5, 6, 9, 5, 10, 6, 10, 9, 6, 10, 5, 6], [14, 5, 14, 8, 13, 9, 12, 9, 11, 7, 12, 5, 14, 5], [5, 11, 8, 10, 9, 11, 10, 14, 6, 15, 6, 15, 5, 11], [13, 10, 14, 11, 15, 14, 15, 14, 15, 14, 11, 15, 10, 11, 11, 10, 13, 10], [15, 12, 16, 11, 19, 11, 19, 15, 16, 14, 16, 14, 15, 12], [6, 16, 9, 15, 10, 18, 5, 19, 6, 16], [10, 16, 14, 16, 14, 18, 13, 19, 11, 18, 10, 16], [15, 15, 18, 16, 18, 18, 16, 19, 15, 18, 15, 15]],\n    stroke: 1\n  }\n};\nexport default ol_style_FillPattern;"],
  "mappings": "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",
  "names": []
}
