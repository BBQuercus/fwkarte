{
  "version": 3,
  "sources": ["../../../../../../../../node_modules/pbf/index.js", "../../../../../../../../node_modules/ol/format/MVT.js"],
  "sourcesContent": ["const SHIFT_LEFT_32 = (1 << 16) * (1 << 16);\nconst SHIFT_RIGHT_32 = 1 / SHIFT_LEFT_32;\n\n// Threshold chosen based on both benchmarking and knowledge about browser string\n// data structures (which currently switch structure types at 12 bytes or more)\nconst TEXT_DECODER_MIN_LENGTH = 12;\nconst utf8TextDecoder = typeof TextDecoder === 'undefined' ? null : new TextDecoder('utf-8');\nconst PBF_VARINT = 0; // varint: int32, int64, uint32, uint64, sint32, sint64, bool, enum\nconst PBF_FIXED64 = 1; // 64-bit: double, fixed64, sfixed64\nconst PBF_BYTES = 2; // length-delimited: string, bytes, embedded messages, packed repeated fields\nconst PBF_FIXED32 = 5; // 32-bit: float, fixed32, sfixed32\n\nexport default class Pbf {\n  /**\n   * @param {Uint8Array | ArrayBuffer} [buf]\n   */\n  constructor(buf = new Uint8Array(16)) {\n    this.buf = ArrayBuffer.isView(buf) ? buf : new Uint8Array(buf);\n    this.dataView = new DataView(this.buf.buffer);\n    this.pos = 0;\n    this.type = 0;\n    this.length = this.buf.length;\n  }\n\n  // === READING =================================================================\n\n  /**\n   * @template T\n   * @param {(tag: number, result: T, pbf: Pbf) => void} readField\n   * @param {T} result\n   * @param {number} [end]\n   */\n  readFields(readField, result, end = this.length) {\n    while (this.pos < end) {\n      const val = this.readVarint(),\n        tag = val >> 3,\n        startPos = this.pos;\n      this.type = val & 0x7;\n      readField(tag, result, this);\n      if (this.pos === startPos) this.skip(val);\n    }\n    return result;\n  }\n\n  /**\n   * @template T\n   * @param {(tag: number, result: T, pbf: Pbf) => void} readField\n   * @param {T} result\n   */\n  readMessage(readField, result) {\n    return this.readFields(readField, result, this.readVarint() + this.pos);\n  }\n  readFixed32() {\n    const val = this.dataView.getUint32(this.pos, true);\n    this.pos += 4;\n    return val;\n  }\n  readSFixed32() {\n    const val = this.dataView.getInt32(this.pos, true);\n    this.pos += 4;\n    return val;\n  }\n\n  // 64-bit int handling is based on github.com/dpw/node-buffer-more-ints (MIT-licensed)\n\n  readFixed64() {\n    const val = this.dataView.getUint32(this.pos, true) + this.dataView.getUint32(this.pos + 4, true) * SHIFT_LEFT_32;\n    this.pos += 8;\n    return val;\n  }\n  readSFixed64() {\n    const val = this.dataView.getUint32(this.pos, true) + this.dataView.getInt32(this.pos + 4, true) * SHIFT_LEFT_32;\n    this.pos += 8;\n    return val;\n  }\n  readFloat() {\n    const val = this.dataView.getFloat32(this.pos, true);\n    this.pos += 4;\n    return val;\n  }\n  readDouble() {\n    const val = this.dataView.getFloat64(this.pos, true);\n    this.pos += 8;\n    return val;\n  }\n\n  /**\n   * @param {boolean} [isSigned]\n   */\n  readVarint(isSigned) {\n    const buf = this.buf;\n    let val, b;\n    b = buf[this.pos++];\n    val = b & 0x7f;\n    if (b < 0x80) return val;\n    b = buf[this.pos++];\n    val |= (b & 0x7f) << 7;\n    if (b < 0x80) return val;\n    b = buf[this.pos++];\n    val |= (b & 0x7f) << 14;\n    if (b < 0x80) return val;\n    b = buf[this.pos++];\n    val |= (b & 0x7f) << 21;\n    if (b < 0x80) return val;\n    b = buf[this.pos];\n    val |= (b & 0x0f) << 28;\n    return readVarintRemainder(val, isSigned, this);\n  }\n  readVarint64() {\n    // for compatibility with v2.0.1\n    return this.readVarint(true);\n  }\n  readSVarint() {\n    const num = this.readVarint();\n    return num % 2 === 1 ? (num + 1) / -2 : num / 2; // zigzag encoding\n  }\n  readBoolean() {\n    return Boolean(this.readVarint());\n  }\n  readString() {\n    const end = this.readVarint() + this.pos;\n    const pos = this.pos;\n    this.pos = end;\n    if (end - pos >= TEXT_DECODER_MIN_LENGTH && utf8TextDecoder) {\n      // longer strings are fast with the built-in browser TextDecoder API\n      return utf8TextDecoder.decode(this.buf.subarray(pos, end));\n    }\n    // short strings are fast with our custom implementation\n    return readUtf8(this.buf, pos, end);\n  }\n  readBytes() {\n    const end = this.readVarint() + this.pos,\n      buffer = this.buf.subarray(this.pos, end);\n    this.pos = end;\n    return buffer;\n  }\n\n  // verbose for performance reasons; doesn't affect gzipped size\n\n  /**\n   * @param {number[]} [arr]\n   * @param {boolean} [isSigned]\n   */\n  readPackedVarint(arr = [], isSigned) {\n    const end = this.readPackedEnd();\n    while (this.pos < end) arr.push(this.readVarint(isSigned));\n    return arr;\n  }\n  /** @param {number[]} [arr] */\n  readPackedSVarint(arr = []) {\n    const end = this.readPackedEnd();\n    while (this.pos < end) arr.push(this.readSVarint());\n    return arr;\n  }\n  /** @param {boolean[]} [arr] */\n  readPackedBoolean(arr = []) {\n    const end = this.readPackedEnd();\n    while (this.pos < end) arr.push(this.readBoolean());\n    return arr;\n  }\n  /** @param {number[]} [arr] */\n  readPackedFloat(arr = []) {\n    const end = this.readPackedEnd();\n    while (this.pos < end) arr.push(this.readFloat());\n    return arr;\n  }\n  /** @param {number[]} [arr] */\n  readPackedDouble(arr = []) {\n    const end = this.readPackedEnd();\n    while (this.pos < end) arr.push(this.readDouble());\n    return arr;\n  }\n  /** @param {number[]} [arr] */\n  readPackedFixed32(arr = []) {\n    const end = this.readPackedEnd();\n    while (this.pos < end) arr.push(this.readFixed32());\n    return arr;\n  }\n  /** @param {number[]} [arr] */\n  readPackedSFixed32(arr = []) {\n    const end = this.readPackedEnd();\n    while (this.pos < end) arr.push(this.readSFixed32());\n    return arr;\n  }\n  /** @param {number[]} [arr] */\n  readPackedFixed64(arr = []) {\n    const end = this.readPackedEnd();\n    while (this.pos < end) arr.push(this.readFixed64());\n    return arr;\n  }\n  /** @param {number[]} [arr] */\n  readPackedSFixed64(arr = []) {\n    const end = this.readPackedEnd();\n    while (this.pos < end) arr.push(this.readSFixed64());\n    return arr;\n  }\n  readPackedEnd() {\n    return this.type === PBF_BYTES ? this.readVarint() + this.pos : this.pos + 1;\n  }\n\n  /** @param {number} val */\n  skip(val) {\n    const type = val & 0x7;\n    if (type === PBF_VARINT) while (this.buf[this.pos++] > 0x7f) {} else if (type === PBF_BYTES) this.pos = this.readVarint() + this.pos;else if (type === PBF_FIXED32) this.pos += 4;else if (type === PBF_FIXED64) this.pos += 8;else throw new Error(`Unimplemented type: ${type}`);\n  }\n\n  // === WRITING =================================================================\n\n  /**\n   * @param {number} tag\n   * @param {number} type\n   */\n  writeTag(tag, type) {\n    this.writeVarint(tag << 3 | type);\n  }\n\n  /** @param {number} min */\n  realloc(min) {\n    let length = this.length || 16;\n    while (length < this.pos + min) length *= 2;\n    if (length !== this.length) {\n      const buf = new Uint8Array(length);\n      buf.set(this.buf);\n      this.buf = buf;\n      this.dataView = new DataView(buf.buffer);\n      this.length = length;\n    }\n  }\n  finish() {\n    this.length = this.pos;\n    this.pos = 0;\n    return this.buf.subarray(0, this.length);\n  }\n\n  /** @param {number} val */\n  writeFixed32(val) {\n    this.realloc(4);\n    this.dataView.setInt32(this.pos, val, true);\n    this.pos += 4;\n  }\n\n  /** @param {number} val */\n  writeSFixed32(val) {\n    this.realloc(4);\n    this.dataView.setInt32(this.pos, val, true);\n    this.pos += 4;\n  }\n\n  /** @param {number} val */\n  writeFixed64(val) {\n    this.realloc(8);\n    this.dataView.setInt32(this.pos, val & -1, true);\n    this.dataView.setInt32(this.pos + 4, Math.floor(val * SHIFT_RIGHT_32), true);\n    this.pos += 8;\n  }\n\n  /** @param {number} val */\n  writeSFixed64(val) {\n    this.realloc(8);\n    this.dataView.setInt32(this.pos, val & -1, true);\n    this.dataView.setInt32(this.pos + 4, Math.floor(val * SHIFT_RIGHT_32), true);\n    this.pos += 8;\n  }\n\n  /** @param {number} val */\n  writeVarint(val) {\n    val = +val || 0;\n    if (val > 0xfffffff || val < 0) {\n      writeBigVarint(val, this);\n      return;\n    }\n    this.realloc(4);\n    this.buf[this.pos++] = val & 0x7f | (val > 0x7f ? 0x80 : 0);\n    if (val <= 0x7f) return;\n    this.buf[this.pos++] = (val >>>= 7) & 0x7f | (val > 0x7f ? 0x80 : 0);\n    if (val <= 0x7f) return;\n    this.buf[this.pos++] = (val >>>= 7) & 0x7f | (val > 0x7f ? 0x80 : 0);\n    if (val <= 0x7f) return;\n    this.buf[this.pos++] = val >>> 7 & 0x7f;\n  }\n\n  /** @param {number} val */\n  writeSVarint(val) {\n    this.writeVarint(val < 0 ? -val * 2 - 1 : val * 2);\n  }\n\n  /** @param {boolean} val */\n  writeBoolean(val) {\n    this.writeVarint(+val);\n  }\n\n  /** @param {string} str */\n  writeString(str) {\n    str = String(str);\n    this.realloc(str.length * 4);\n    this.pos++; // reserve 1 byte for short string length\n\n    const startPos = this.pos;\n    // write the string directly to the buffer and see how much was written\n    this.pos = writeUtf8(this.buf, str, this.pos);\n    const len = this.pos - startPos;\n    if (len >= 0x80) makeRoomForExtraLength(startPos, len, this);\n\n    // finally, write the message length in the reserved place and restore the position\n    this.pos = startPos - 1;\n    this.writeVarint(len);\n    this.pos += len;\n  }\n\n  /** @param {number} val */\n  writeFloat(val) {\n    this.realloc(4);\n    this.dataView.setFloat32(this.pos, val, true);\n    this.pos += 4;\n  }\n\n  /** @param {number} val */\n  writeDouble(val) {\n    this.realloc(8);\n    this.dataView.setFloat64(this.pos, val, true);\n    this.pos += 8;\n  }\n\n  /** @param {Uint8Array} buffer */\n  writeBytes(buffer) {\n    const len = buffer.length;\n    this.writeVarint(len);\n    this.realloc(len);\n    for (let i = 0; i < len; i++) this.buf[this.pos++] = buffer[i];\n  }\n\n  /**\n   * @template T\n   * @param {(obj: T, pbf: Pbf) => void} fn\n   * @param {T} obj\n   */\n  writeRawMessage(fn, obj) {\n    this.pos++; // reserve 1 byte for short message length\n\n    // write the message directly to the buffer and see how much was written\n    const startPos = this.pos;\n    fn(obj, this);\n    const len = this.pos - startPos;\n    if (len >= 0x80) makeRoomForExtraLength(startPos, len, this);\n\n    // finally, write the message length in the reserved place and restore the position\n    this.pos = startPos - 1;\n    this.writeVarint(len);\n    this.pos += len;\n  }\n\n  /**\n   * @template T\n   * @param {number} tag\n   * @param {(obj: T, pbf: Pbf) => void} fn\n   * @param {T} obj\n   */\n  writeMessage(tag, fn, obj) {\n    this.writeTag(tag, PBF_BYTES);\n    this.writeRawMessage(fn, obj);\n  }\n\n  /**\n   * @param {number} tag\n   * @param {number[]} arr\n   */\n  writePackedVarint(tag, arr) {\n    if (arr.length) this.writeMessage(tag, writePackedVarint, arr);\n  }\n  /**\n   * @param {number} tag\n   * @param {number[]} arr\n   */\n  writePackedSVarint(tag, arr) {\n    if (arr.length) this.writeMessage(tag, writePackedSVarint, arr);\n  }\n  /**\n   * @param {number} tag\n   * @param {boolean[]} arr\n   */\n  writePackedBoolean(tag, arr) {\n    if (arr.length) this.writeMessage(tag, writePackedBoolean, arr);\n  }\n  /**\n   * @param {number} tag\n   * @param {number[]} arr\n   */\n  writePackedFloat(tag, arr) {\n    if (arr.length) this.writeMessage(tag, writePackedFloat, arr);\n  }\n  /**\n   * @param {number} tag\n   * @param {number[]} arr\n   */\n  writePackedDouble(tag, arr) {\n    if (arr.length) this.writeMessage(tag, writePackedDouble, arr);\n  }\n  /**\n   * @param {number} tag\n   * @param {number[]} arr\n   */\n  writePackedFixed32(tag, arr) {\n    if (arr.length) this.writeMessage(tag, writePackedFixed32, arr);\n  }\n  /**\n   * @param {number} tag\n   * @param {number[]} arr\n   */\n  writePackedSFixed32(tag, arr) {\n    if (arr.length) this.writeMessage(tag, writePackedSFixed32, arr);\n  }\n  /**\n   * @param {number} tag\n   * @param {number[]} arr\n   */\n  writePackedFixed64(tag, arr) {\n    if (arr.length) this.writeMessage(tag, writePackedFixed64, arr);\n  }\n  /**\n   * @param {number} tag\n   * @param {number[]} arr\n   */\n  writePackedSFixed64(tag, arr) {\n    if (arr.length) this.writeMessage(tag, writePackedSFixed64, arr);\n  }\n\n  /**\n   * @param {number} tag\n   * @param {Uint8Array} buffer\n   */\n  writeBytesField(tag, buffer) {\n    this.writeTag(tag, PBF_BYTES);\n    this.writeBytes(buffer);\n  }\n  /**\n   * @param {number} tag\n   * @param {number} val\n   */\n  writeFixed32Field(tag, val) {\n    this.writeTag(tag, PBF_FIXED32);\n    this.writeFixed32(val);\n  }\n  /**\n   * @param {number} tag\n   * @param {number} val\n   */\n  writeSFixed32Field(tag, val) {\n    this.writeTag(tag, PBF_FIXED32);\n    this.writeSFixed32(val);\n  }\n  /**\n   * @param {number} tag\n   * @param {number} val\n   */\n  writeFixed64Field(tag, val) {\n    this.writeTag(tag, PBF_FIXED64);\n    this.writeFixed64(val);\n  }\n  /**\n   * @param {number} tag\n   * @param {number} val\n   */\n  writeSFixed64Field(tag, val) {\n    this.writeTag(tag, PBF_FIXED64);\n    this.writeSFixed64(val);\n  }\n  /**\n   * @param {number} tag\n   * @param {number} val\n   */\n  writeVarintField(tag, val) {\n    this.writeTag(tag, PBF_VARINT);\n    this.writeVarint(val);\n  }\n  /**\n   * @param {number} tag\n   * @param {number} val\n   */\n  writeSVarintField(tag, val) {\n    this.writeTag(tag, PBF_VARINT);\n    this.writeSVarint(val);\n  }\n  /**\n   * @param {number} tag\n   * @param {string} str\n   */\n  writeStringField(tag, str) {\n    this.writeTag(tag, PBF_BYTES);\n    this.writeString(str);\n  }\n  /**\n   * @param {number} tag\n   * @param {number} val\n   */\n  writeFloatField(tag, val) {\n    this.writeTag(tag, PBF_FIXED32);\n    this.writeFloat(val);\n  }\n  /**\n   * @param {number} tag\n   * @param {number} val\n   */\n  writeDoubleField(tag, val) {\n    this.writeTag(tag, PBF_FIXED64);\n    this.writeDouble(val);\n  }\n  /**\n   * @param {number} tag\n   * @param {boolean} val\n   */\n  writeBooleanField(tag, val) {\n    this.writeVarintField(tag, +val);\n  }\n}\n;\n\n/**\n * @param {number} l\n * @param {boolean | undefined} s\n * @param {Pbf} p\n */\nfunction readVarintRemainder(l, s, p) {\n  const buf = p.buf;\n  let h, b;\n  b = buf[p.pos++];\n  h = (b & 0x70) >> 4;\n  if (b < 0x80) return toNum(l, h, s);\n  b = buf[p.pos++];\n  h |= (b & 0x7f) << 3;\n  if (b < 0x80) return toNum(l, h, s);\n  b = buf[p.pos++];\n  h |= (b & 0x7f) << 10;\n  if (b < 0x80) return toNum(l, h, s);\n  b = buf[p.pos++];\n  h |= (b & 0x7f) << 17;\n  if (b < 0x80) return toNum(l, h, s);\n  b = buf[p.pos++];\n  h |= (b & 0x7f) << 24;\n  if (b < 0x80) return toNum(l, h, s);\n  b = buf[p.pos++];\n  h |= (b & 0x01) << 31;\n  if (b < 0x80) return toNum(l, h, s);\n  throw new Error('Expected varint not more than 10 bytes');\n}\n\n/**\n * @param {number} low\n * @param {number} high\n * @param {boolean} [isSigned]\n */\nfunction toNum(low, high, isSigned) {\n  return isSigned ? high * 0x100000000 + (low >>> 0) : (high >>> 0) * 0x100000000 + (low >>> 0);\n}\n\n/**\n * @param {number} val\n * @param {Pbf} pbf\n */\nfunction writeBigVarint(val, pbf) {\n  let low, high;\n  if (val >= 0) {\n    low = val % 0x100000000 | 0;\n    high = val / 0x100000000 | 0;\n  } else {\n    low = ~(-val % 0x100000000);\n    high = ~(-val / 0x100000000);\n    if (low ^ 0xffffffff) {\n      low = low + 1 | 0;\n    } else {\n      low = 0;\n      high = high + 1 | 0;\n    }\n  }\n  if (val >= 0x10000000000000000 || val < -0x10000000000000000) {\n    throw new Error('Given varint doesn\\'t fit into 10 bytes');\n  }\n  pbf.realloc(10);\n  writeBigVarintLow(low, high, pbf);\n  writeBigVarintHigh(high, pbf);\n}\n\n/**\n * @param {number} high\n * @param {number} low\n * @param {Pbf} pbf\n */\nfunction writeBigVarintLow(low, high, pbf) {\n  pbf.buf[pbf.pos++] = low & 0x7f | 0x80;\n  low >>>= 7;\n  pbf.buf[pbf.pos++] = low & 0x7f | 0x80;\n  low >>>= 7;\n  pbf.buf[pbf.pos++] = low & 0x7f | 0x80;\n  low >>>= 7;\n  pbf.buf[pbf.pos++] = low & 0x7f | 0x80;\n  low >>>= 7;\n  pbf.buf[pbf.pos] = low & 0x7f;\n}\n\n/**\n * @param {number} high\n * @param {Pbf} pbf\n */\nfunction writeBigVarintHigh(high, pbf) {\n  const lsb = (high & 0x07) << 4;\n  pbf.buf[pbf.pos++] |= lsb | ((high >>>= 3) ? 0x80 : 0);\n  if (!high) return;\n  pbf.buf[pbf.pos++] = high & 0x7f | ((high >>>= 7) ? 0x80 : 0);\n  if (!high) return;\n  pbf.buf[pbf.pos++] = high & 0x7f | ((high >>>= 7) ? 0x80 : 0);\n  if (!high) return;\n  pbf.buf[pbf.pos++] = high & 0x7f | ((high >>>= 7) ? 0x80 : 0);\n  if (!high) return;\n  pbf.buf[pbf.pos++] = high & 0x7f | ((high >>>= 7) ? 0x80 : 0);\n  if (!high) return;\n  pbf.buf[pbf.pos++] = high & 0x7f;\n}\n\n/**\n * @param {number} startPos\n * @param {number} len\n * @param {Pbf} pbf\n */\nfunction makeRoomForExtraLength(startPos, len, pbf) {\n  const extraLen = len <= 0x3fff ? 1 : len <= 0x1fffff ? 2 : len <= 0xfffffff ? 3 : Math.floor(Math.log(len) / (Math.LN2 * 7));\n\n  // if 1 byte isn't enough for encoding message length, shift the data to the right\n  pbf.realloc(extraLen);\n  for (let i = pbf.pos - 1; i >= startPos; i--) pbf.buf[i + extraLen] = pbf.buf[i];\n}\n\n/**\n * @param {number[]} arr\n * @param {Pbf} pbf\n */\nfunction writePackedVarint(arr, pbf) {\n  for (let i = 0; i < arr.length; i++) pbf.writeVarint(arr[i]);\n}\n/**\n * @param {number[]} arr\n * @param {Pbf} pbf\n */\nfunction writePackedSVarint(arr, pbf) {\n  for (let i = 0; i < arr.length; i++) pbf.writeSVarint(arr[i]);\n}\n/**\n * @param {number[]} arr\n * @param {Pbf} pbf\n */\nfunction writePackedFloat(arr, pbf) {\n  for (let i = 0; i < arr.length; i++) pbf.writeFloat(arr[i]);\n}\n/**\n * @param {number[]} arr\n * @param {Pbf} pbf\n */\nfunction writePackedDouble(arr, pbf) {\n  for (let i = 0; i < arr.length; i++) pbf.writeDouble(arr[i]);\n}\n/**\n * @param {boolean[]} arr\n * @param {Pbf} pbf\n */\nfunction writePackedBoolean(arr, pbf) {\n  for (let i = 0; i < arr.length; i++) pbf.writeBoolean(arr[i]);\n}\n/**\n * @param {number[]} arr\n * @param {Pbf} pbf\n */\nfunction writePackedFixed32(arr, pbf) {\n  for (let i = 0; i < arr.length; i++) pbf.writeFixed32(arr[i]);\n}\n/**\n * @param {number[]} arr\n * @param {Pbf} pbf\n */\nfunction writePackedSFixed32(arr, pbf) {\n  for (let i = 0; i < arr.length; i++) pbf.writeSFixed32(arr[i]);\n}\n/**\n * @param {number[]} arr\n * @param {Pbf} pbf\n */\nfunction writePackedFixed64(arr, pbf) {\n  for (let i = 0; i < arr.length; i++) pbf.writeFixed64(arr[i]);\n}\n/**\n * @param {number[]} arr\n * @param {Pbf} pbf\n */\nfunction writePackedSFixed64(arr, pbf) {\n  for (let i = 0; i < arr.length; i++) pbf.writeSFixed64(arr[i]);\n}\n\n// Buffer code below from https://github.com/feross/buffer, MIT-licensed\n\n/**\n * @param {Uint8Array} buf\n * @param {number} pos\n * @param {number} end\n */\nfunction readUtf8(buf, pos, end) {\n  let str = '';\n  let i = pos;\n  while (i < end) {\n    const b0 = buf[i];\n    let c = null; // codepoint\n    let bytesPerSequence = b0 > 0xEF ? 4 : b0 > 0xDF ? 3 : b0 > 0xBF ? 2 : 1;\n    if (i + bytesPerSequence > end) break;\n    let b1, b2, b3;\n    if (bytesPerSequence === 1) {\n      if (b0 < 0x80) {\n        c = b0;\n      }\n    } else if (bytesPerSequence === 2) {\n      b1 = buf[i + 1];\n      if ((b1 & 0xC0) === 0x80) {\n        c = (b0 & 0x1F) << 0x6 | b1 & 0x3F;\n        if (c <= 0x7F) {\n          c = null;\n        }\n      }\n    } else if (bytesPerSequence === 3) {\n      b1 = buf[i + 1];\n      b2 = buf[i + 2];\n      if ((b1 & 0xC0) === 0x80 && (b2 & 0xC0) === 0x80) {\n        c = (b0 & 0xF) << 0xC | (b1 & 0x3F) << 0x6 | b2 & 0x3F;\n        if (c <= 0x7FF || c >= 0xD800 && c <= 0xDFFF) {\n          c = null;\n        }\n      }\n    } else if (bytesPerSequence === 4) {\n      b1 = buf[i + 1];\n      b2 = buf[i + 2];\n      b3 = buf[i + 3];\n      if ((b1 & 0xC0) === 0x80 && (b2 & 0xC0) === 0x80 && (b3 & 0xC0) === 0x80) {\n        c = (b0 & 0xF) << 0x12 | (b1 & 0x3F) << 0xC | (b2 & 0x3F) << 0x6 | b3 & 0x3F;\n        if (c <= 0xFFFF || c >= 0x110000) {\n          c = null;\n        }\n      }\n    }\n    if (c === null) {\n      c = 0xFFFD;\n      bytesPerSequence = 1;\n    } else if (c > 0xFFFF) {\n      c -= 0x10000;\n      str += String.fromCharCode(c >>> 10 & 0x3FF | 0xD800);\n      c = 0xDC00 | c & 0x3FF;\n    }\n    str += String.fromCharCode(c);\n    i += bytesPerSequence;\n  }\n  return str;\n}\n\n/**\n * @param {Uint8Array} buf\n * @param {string} str\n * @param {number} pos\n */\nfunction writeUtf8(buf, str, pos) {\n  for (let i = 0, c, lead; i < str.length; i++) {\n    c = str.charCodeAt(i); // code point\n\n    if (c > 0xD7FF && c < 0xE000) {\n      if (lead) {\n        if (c < 0xDC00) {\n          buf[pos++] = 0xEF;\n          buf[pos++] = 0xBF;\n          buf[pos++] = 0xBD;\n          lead = c;\n          continue;\n        } else {\n          c = lead - 0xD800 << 10 | c - 0xDC00 | 0x10000;\n          lead = null;\n        }\n      } else {\n        if (c > 0xDBFF || i + 1 === str.length) {\n          buf[pos++] = 0xEF;\n          buf[pos++] = 0xBF;\n          buf[pos++] = 0xBD;\n        } else {\n          lead = c;\n        }\n        continue;\n      }\n    } else if (lead) {\n      buf[pos++] = 0xEF;\n      buf[pos++] = 0xBF;\n      buf[pos++] = 0xBD;\n      lead = null;\n    }\n    if (c < 0x80) {\n      buf[pos++] = c;\n    } else {\n      if (c < 0x800) {\n        buf[pos++] = c >> 0x6 | 0xC0;\n      } else {\n        if (c < 0x10000) {\n          buf[pos++] = c >> 0xC | 0xE0;\n        } else {\n          buf[pos++] = c >> 0x12 | 0xF0;\n          buf[pos++] = c >> 0xC & 0x3F | 0x80;\n        }\n        buf[pos++] = c >> 0x6 & 0x3F | 0x80;\n      }\n      buf[pos++] = c & 0x3F | 0x80;\n    }\n  }\n  return pos;\n}", "/**\n * @module ol/format/MVT\n */\n//FIXME Implement projection handling\n\nimport FeatureFormat, { transformGeometryWithOptions } from './Feature.js';\nimport LineString from '../geom/LineString.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPoint from '../geom/MultiPoint.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport PBF from 'pbf';\nimport Point from '../geom/Point.js';\nimport Polygon from '../geom/Polygon.js';\nimport Projection from '../proj/Projection.js';\nimport RenderFeature from '../render/Feature.js';\nimport { get } from '../proj.js';\nimport { inflateEnds } from '../geom/flat/orient.js';\n\n/**\n * @template {import(\"../Feature.js\").FeatureLike} [FeatureType=import(\"../render/Feature.js\").default]\n * @typedef {Object} Options\n * @property {import('./Feature.js').FeatureToFeatureClass<FeatureType>} [featureClass] Class for features returned by\n * {@link module:ol/format/MVT~MVT#readFeatures}. Set to {@link module:ol/Feature~Feature} to get full editing and geometry\n * support at the cost of decreased rendering performance. The default is\n * {@link module:ol/render/Feature~RenderFeature}, which is optimized for rendering and hit detection.\n * @property {string} [geometryName='geometry'] Geometry name to use when creating features.\n * @property {string} [layerName='layer'] Name of the feature attribute that holds the layer name.\n * @property {Array<string>} [layers] Layers to read features from. If not provided, features will be read from all\n * @property {string} [idProperty] Optional property that will be assigned as the feature id and removed from the properties.\n * layers.\n */\n\n/**\n * @classdesc\n * Feature format for reading data in the Mapbox MVT format.\n *\n * @template {import('../Feature.js').FeatureLike} [FeatureType=RenderFeature]\n * @extends {FeatureFormat<FeatureType>}\n * @api\n */\nclass MVT extends FeatureFormat {\n  /**\n   * @param {Options<FeatureType>} [options] Options.\n   */\n  constructor(options) {\n    super();\n    options = options ? options : {};\n\n    /**\n     * @type {Projection}\n     */\n    this.dataProjection = new Projection({\n      code: '',\n      units: 'tile-pixels'\n    });\n    this.featureClass = options.featureClass ? options.featureClass : (/** @type {import('./Feature.js').FeatureToFeatureClass<FeatureType>} */\n    RenderFeature);\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.geometryName_ = options.geometryName;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.layerName_ = options.layerName ? options.layerName : 'layer';\n\n    /**\n     * @private\n     * @type {Array<string>|null}\n     */\n    this.layers_ = options.layers ? options.layers : null;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.idProperty_ = options.idProperty;\n    this.supportedMediaTypes = ['application/vnd.mapbox-vector-tile', 'application/x-protobuf'];\n  }\n\n  /**\n   * Read the raw geometry from the pbf offset stored in a raw feature's geometry\n   * property.\n   * @param {PBF} pbf PBF.\n   * @param {Object} feature Raw feature.\n   * @param {Array<number>} flatCoordinates Array to store flat coordinates in.\n   * @param {Array<number>} ends Array to store ends in.\n   * @private\n   */\n  readRawGeometry_(pbf, feature, flatCoordinates, ends) {\n    pbf.pos = feature.geometry;\n    const end = pbf.readVarint() + pbf.pos;\n    let cmd = 1;\n    let length = 0;\n    let x = 0;\n    let y = 0;\n    let coordsLen = 0;\n    let currentEnd = 0;\n    while (pbf.pos < end) {\n      if (!length) {\n        const cmdLen = pbf.readVarint();\n        cmd = cmdLen & 0x7;\n        length = cmdLen >> 3;\n      }\n      length--;\n      if (cmd === 1 || cmd === 2) {\n        x += pbf.readSVarint();\n        y += pbf.readSVarint();\n        if (cmd === 1) {\n          // moveTo\n          if (coordsLen > currentEnd) {\n            ends.push(coordsLen);\n            currentEnd = coordsLen;\n          }\n        }\n        flatCoordinates.push(x, y);\n        coordsLen += 2;\n      } else if (cmd === 7) {\n        if (coordsLen > currentEnd) {\n          // close polygon\n          flatCoordinates.push(flatCoordinates[currentEnd], flatCoordinates[currentEnd + 1]);\n          coordsLen += 2;\n        }\n      } else {\n        throw new Error('Invalid command found in the PBF');\n      }\n    }\n    if (coordsLen > currentEnd) {\n      ends.push(coordsLen);\n      currentEnd = coordsLen;\n    }\n  }\n\n  /**\n   * @private\n   * @param {PBF} pbf PBF\n   * @param {Object} rawFeature Raw Mapbox feature.\n   * @param {import(\"./Feature.js\").ReadOptions} options Read options.\n   * @return {FeatureType|null} Feature.\n   */\n  createFeature_(pbf, rawFeature, options) {\n    const type = rawFeature.type;\n    if (type === 0) {\n      return null;\n    }\n    let feature;\n    const values = rawFeature.properties;\n    let id;\n    if (!this.idProperty_) {\n      id = rawFeature.id;\n    } else {\n      id = values[this.idProperty_];\n      delete values[this.idProperty_];\n    }\n    values[this.layerName_] = rawFeature.layer.name;\n    const flatCoordinates = /** @type {Array<number>} */[];\n    const ends = /** @type {Array<number>} */[];\n    this.readRawGeometry_(pbf, rawFeature, flatCoordinates, ends);\n    const geometryType = getGeometryType(type, ends.length);\n    if (this.featureClass === RenderFeature) {\n      feature = new (/** @type {import('./Feature.js').FeatureToFeatureClass<RenderFeature>} */\n      this.featureClass)(geometryType, flatCoordinates, ends, 2, values, id);\n      feature.transform(options.dataProjection);\n    } else {\n      let geom;\n      if (geometryType == 'Polygon') {\n        const endss = inflateEnds(flatCoordinates, ends);\n        geom = endss.length > 1 ? new MultiPolygon(flatCoordinates, 'XY', endss) : new Polygon(flatCoordinates, 'XY', ends);\n      } else {\n        geom = geometryType === 'Point' ? new Point(flatCoordinates, 'XY') : geometryType === 'LineString' ? new LineString(flatCoordinates, 'XY') : geometryType === 'MultiPoint' ? new MultiPoint(flatCoordinates, 'XY') : geometryType === 'MultiLineString' ? new MultiLineString(flatCoordinates, 'XY', ends) : null;\n      }\n      const ctor = /** @type {typeof import(\"../Feature.js\").default} */\n      this.featureClass;\n      feature = new ctor();\n      if (this.geometryName_) {\n        feature.setGeometryName(this.geometryName_);\n      }\n      const geometry = transformGeometryWithOptions(geom, false, options);\n      feature.setGeometry(geometry);\n      if (id !== undefined) {\n        feature.setId(id);\n      }\n      feature.setProperties(values, true);\n    }\n    return /** @type {FeatureType} */feature;\n  }\n\n  /**\n   * @return {import(\"./Feature.js\").Type} Format.\n   * @override\n   */\n  getType() {\n    return 'arraybuffer';\n  }\n\n  /**\n   * Read all features.\n   *\n   * @param {ArrayBuffer} source Source.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @return {Array<FeatureType>} Features.\n   * @api\n   * @override\n   */\n  readFeatures(source, options) {\n    const layers = this.layers_;\n    options = this.adaptOptions(options);\n    const dataProjection = get(options.dataProjection);\n    dataProjection.setWorldExtent(options.extent);\n    options.dataProjection = dataProjection;\n    const pbf = new PBF(/** @type {ArrayBuffer} */source);\n    const pbfLayers = pbf.readFields(layersPBFReader, {});\n    const features = [];\n    for (const name in pbfLayers) {\n      if (layers && !layers.includes(name)) {\n        continue;\n      }\n      const pbfLayer = pbfLayers[name];\n      const extent = pbfLayer ? [0, 0, pbfLayer.extent, pbfLayer.extent] : null;\n      dataProjection.setExtent(extent);\n      for (let i = 0, ii = pbfLayer.length; i < ii; ++i) {\n        const rawFeature = readRawFeature(pbf, pbfLayer, i);\n        const feature = this.createFeature_(pbf, rawFeature, options);\n        if (feature !== null) {\n          features.push(feature);\n        }\n      }\n    }\n    return /** @type {Array<FeatureType>} */features;\n  }\n\n  /**\n   * Read the projection from the source.\n   *\n   * @param {Document|Element|Object|string} source Source.\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   * @api\n   * @override\n   */\n  readProjection(source) {\n    return this.dataProjection;\n  }\n\n  /**\n   * Sets the layers that features will be read from.\n   * @param {Array<string>} layers Layers.\n   * @api\n   */\n  setLayers(layers) {\n    this.layers_ = layers;\n  }\n}\n\n/**\n * Reader callback for parsing layers.\n * @param {number} tag The tag.\n * @param {Object} layers The layers object.\n * @param {PBF} pbf The PBF.\n */\nfunction layersPBFReader(tag, layers, pbf) {\n  if (tag === 3) {\n    const layer = {\n      keys: [],\n      values: [],\n      features: []\n    };\n    const end = pbf.readVarint() + pbf.pos;\n    pbf.readFields(layerPBFReader, layer, end);\n    layer.length = layer.features.length;\n    if (layer.length) {\n      layers[layer.name] = layer;\n    }\n  }\n}\n\n/**\n * Reader callback for parsing layer.\n * @param {number} tag The tag.\n * @param {Object} layer The layer object.\n * @param {PBF} pbf The PBF.\n */\nfunction layerPBFReader(tag, layer, pbf) {\n  if (tag === 15) {\n    layer.version = pbf.readVarint();\n  } else if (tag === 1) {\n    layer.name = pbf.readString();\n  } else if (tag === 5) {\n    layer.extent = pbf.readVarint();\n  } else if (tag === 2) {\n    layer.features.push(pbf.pos);\n  } else if (tag === 3) {\n    layer.keys.push(pbf.readString());\n  } else if (tag === 4) {\n    let value = null;\n    const end = pbf.readVarint() + pbf.pos;\n    while (pbf.pos < end) {\n      tag = pbf.readVarint() >> 3;\n      value = tag === 1 ? pbf.readString() : tag === 2 ? pbf.readFloat() : tag === 3 ? pbf.readDouble() : tag === 4 ? pbf.readVarint64() : tag === 5 ? pbf.readVarint() : tag === 6 ? pbf.readSVarint() : tag === 7 ? pbf.readBoolean() : null;\n    }\n    layer.values.push(value);\n  }\n}\n\n/**\n * Reader callback for parsing feature.\n * @param {number} tag The tag.\n * @param {Object} feature The feature object.\n * @param {PBF} pbf The PBF.\n */\nfunction featurePBFReader(tag, feature, pbf) {\n  if (tag == 1) {\n    feature.id = pbf.readVarint();\n  } else if (tag == 2) {\n    const end = pbf.readVarint() + pbf.pos;\n    while (pbf.pos < end) {\n      const key = feature.layer.keys[pbf.readVarint()];\n      const value = feature.layer.values[pbf.readVarint()];\n      feature.properties[key] = value;\n    }\n  } else if (tag == 3) {\n    feature.type = pbf.readVarint();\n  } else if (tag == 4) {\n    feature.geometry = pbf.pos;\n  }\n}\n\n/**\n * Read a raw feature from the pbf offset stored at index `i` in the raw layer.\n * @param {PBF} pbf PBF.\n * @param {Object} layer Raw layer.\n * @param {number} i Index of the feature in the raw layer's `features` array.\n * @return {Object} Raw feature.\n */\nfunction readRawFeature(pbf, layer, i) {\n  pbf.pos = layer.features[i];\n  const end = pbf.readVarint() + pbf.pos;\n  const feature = {\n    layer: layer,\n    type: 0,\n    properties: {}\n  };\n  pbf.readFields(featurePBFReader, feature, end);\n  return feature;\n}\n\n/**\n * @param {number} type The raw feature's geometry type\n * @param {number} numEnds Number of ends of the flat coordinates of the\n * geometry.\n * @return {import(\"../render/Feature.js\").Type} The geometry type.\n */\nfunction getGeometryType(type, numEnds) {\n  /** @type {import(\"../render/Feature.js\").Type} */\n  let geometryType;\n  if (type === 1) {\n    geometryType = numEnds === 1 ? 'Point' : 'MultiPoint';\n  } else if (type === 2) {\n    geometryType = numEnds === 1 ? 'LineString' : 'MultiLineString';\n  } else if (type === 3) {\n    geometryType = 'Polygon';\n    // MultiPolygon not relevant for rendering - winding order determines\n    // outer rings of polygons.\n  }\n  return geometryType;\n}\nexport default MVT;"],
  "mappings": "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",
  "names": ["Feature_default"]
}
