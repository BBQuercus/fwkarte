{
  "version": 3,
  "sources": ["../../../../../../../../node_modules/ol/source/wms.js"],
  "sourcesContent": ["/**\n * @module ol/source/wms\n */\n\nimport { DECIMALS } from './common.js';\nimport { appendParams } from '../uri.js';\nimport { compareVersions } from '../string.js';\nimport { decode } from '../Image.js';\nimport { floor, round } from '../math.js';\nimport { getForViewAndSize, getHeight, getWidth } from '../extent.js';\nimport { get as getProjection } from '../proj.js';\nimport { getRequestExtent } from './Image.js';\n\n/**\n * Default WMS version.\n * @type {string}\n */\nexport const DEFAULT_VERSION = '1.3.0';\n\n/**\n * @const\n * @type {import(\"../size.js\").Size}\n */\nconst GETFEATUREINFO_IMAGE_SIZE = [101, 101];\n\n/**\n * @api\n * @typedef {'carmentaserver' | 'geoserver' | 'mapserver' | 'qgis'} ServerType\n * Set the server type to use implementation-specific parameters beyond the WMS specification.\n *  - `'carmentaserver'`: HiDPI support for [Carmenta Server](https://www.carmenta.com/en/products/carmenta-server)\n *  - `'geoserver'`: HiDPI support for [GeoServer](https://geoserver.org/)\n *  - `'mapserver'`: HiDPI support for [MapServer](https://mapserver.org/)\n *  - `'qgis'`: HiDPI support for [QGIS](https://qgis.org/)\n */\n\n/**\n * @param {string} baseUrl Base URL.\n * @param {import(\"../extent.js\").Extent} extent Extent.\n * @param {import(\"../size.js\").Size} size Size.\n * @param {import(\"../proj/Projection.js\").default} projection Projection.\n * @param {Object} params WMS params. Will be modified in place.\n * @return {string} Request URL.\n */\nexport function getRequestUrl(baseUrl, extent, size, projection, params) {\n  params['WIDTH'] = size[0];\n  params['HEIGHT'] = size[1];\n  const axisOrientation = projection.getAxisOrientation();\n  const v13 = compareVersions(params['VERSION'], '1.3') >= 0;\n  params[v13 ? 'CRS' : 'SRS'] = projection.getCode();\n  const bbox = v13 && axisOrientation.startsWith('ne') ? [extent[1], extent[0], extent[3], extent[2]] : extent;\n  params['BBOX'] = bbox.join(',');\n  return appendParams(baseUrl, params);\n}\n\n/**\n * @param {import(\"../extent\").Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @param {number} pixelRatio pixel ratio.\n * @param {import(\"../proj.js\").Projection} projection Projection.\n * @param {string} url WMS service url.\n * @param {Object} params WMS params.\n * @param {import(\"./wms.js\").ServerType} serverType The type of the remote WMS server.\n * @return {string} Image src.\n */\nexport function getImageSrc(extent, resolution, pixelRatio, projection, url, params, serverType) {\n  params = Object.assign({\n    REQUEST: 'GetMap'\n  }, params);\n  const imageResolution = resolution / pixelRatio;\n  const imageSize = [round(getWidth(extent) / imageResolution, DECIMALS), round(getHeight(extent) / imageResolution, DECIMALS)];\n  if (pixelRatio != 1) {\n    switch (serverType) {\n      case 'geoserver':\n        const dpi = 90 * pixelRatio + 0.5 | 0;\n        if ('FORMAT_OPTIONS' in params) {\n          params['FORMAT_OPTIONS'] += ';dpi:' + dpi;\n        } else {\n          params['FORMAT_OPTIONS'] = 'dpi:' + dpi;\n        }\n        break;\n      case 'mapserver':\n        params['MAP_RESOLUTION'] = 90 * pixelRatio;\n        break;\n      case 'carmentaserver':\n      case 'qgis':\n        params['DPI'] = 90 * pixelRatio;\n        break;\n      default:\n        throw new Error('Unknown `serverType` configured');\n    }\n  }\n  const src = getRequestUrl(url, extent, imageSize, projection, params);\n  return src;\n}\n\n/**\n * @param {Object} params WMS params.\n * @param {string} request WMS `REQUEST`.\n * @return {Object} WMS params with required properties set.\n */\nexport function getRequestParams(params, request) {\n  return Object.assign({\n    'REQUEST': request,\n    'SERVICE': 'WMS',\n    'VERSION': DEFAULT_VERSION,\n    'FORMAT': 'image/png',\n    'STYLES': '',\n    'TRANSPARENT': true\n  }, params);\n}\n\n/**\n * @typedef {Object} LoaderOptions\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\n * the image from the remote server.\n * @property {Object<string,*>} [params] WMS request parameters.\n * At least a `LAYERS` param is required. `STYLES` is\n * `''` by default. `VERSION` is `1.3.0` by default. `WIDTH`, `HEIGHT` and `BBOX` will be set\n * dynamically. `CRS` (`SRS` for WMS version < 1.3.0) will is derived from the `proection` config.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is 'EPSG:3857'.\n * @property {number} [ratio=1.5] Ratio. `1` means image requests are the size of the map viewport, `2` means\n * twice the width and height of the map viewport, and so on. Must be `1` or higher.\n * @property {import(\"./wms.js\").ServerType} [serverType] The type of\n * the remote WMS server: `mapserver`, `geoserver`, `carmentaserver`, or `qgis`.\n * Only needed if `hidpi` is `true`.\n * @property {string} url WMS service URL.\n * @property {function(HTMLImageElement, string): Promise<import('../DataTile.js').ImageLike>} [load] Function\n * to perform loading of the image. Receives the created `HTMLImageElement` and the desired `src` as argument and\n * returns a promise resolving to the loaded or decoded image. Default is {@link module:ol/Image.decode}.\n */\n\n/**\n * Creates a loader for WMS images.\n * @param {LoaderOptions} options Loader options.\n * @return {import(\"../Image.js\").ImageObjectPromiseLoader} Loader.\n * @api\n */\nexport function createLoader(options) {\n  const hidpi = options.hidpi === undefined ? true : options.hidpi;\n  const projection = getProjection(options.projection || 'EPSG:3857');\n  const ratio = options.ratio || 1.5;\n  const load = options.load || decode;\n  const crossOrigin = options.crossOrigin ?? null;\n\n  /**\n   * @type {import(\"../Image.js\").Loader}\n   */\n  return (extent, resolution, pixelRatio) => {\n    extent = getRequestExtent(extent, resolution, pixelRatio, ratio);\n    if (pixelRatio != 1 && (!hidpi || options.serverType === undefined)) {\n      pixelRatio = 1;\n    }\n    const src = getImageSrc(extent, resolution, pixelRatio, projection, options.url, getRequestParams(options.params, 'GetMap'), options.serverType);\n    const image = new Image();\n    image.crossOrigin = crossOrigin;\n    return load(image, src).then(image => ({\n      image,\n      extent,\n      pixelRatio\n    }));\n  };\n}\n\n/**\n * Get the GetFeatureInfo URL for the passed coordinate and resolution. Returns `undefined` if the\n * GetFeatureInfo URL cannot be constructed.\n * @param {LoaderOptions} options Options passed the `createWMSLoader()` function. In addition to\n * the params required by the loader, `INFO_FORMAT` should be specified, it defaults to\n * `application/json`. If `QUERY_LAYERS` is not provided, then the layers specified in the `LAYERS`\n * parameter will be used.\n * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n * @param {number} resolution Resolution.\n * @return {string|undefined} GetFeatureInfo URL.\n * @api\n */\nexport function getFeatureInfoUrl(options, coordinate, resolution) {\n  if (options.url === undefined) {\n    return undefined;\n  }\n  const projectionObj = getProjection(options.projection || 'EPSG:3857');\n  const extent = getForViewAndSize(coordinate, resolution, 0, GETFEATUREINFO_IMAGE_SIZE);\n  const baseParams = {\n    'QUERY_LAYERS': options.params['LAYERS'],\n    'INFO_FORMAT': 'application/json'\n  };\n  Object.assign(baseParams, getRequestParams(options.params, 'GetFeatureInfo'), options.params);\n  const x = floor((coordinate[0] - extent[0]) / resolution, DECIMALS);\n  const y = floor((extent[3] - coordinate[1]) / resolution, DECIMALS);\n  const v13 = compareVersions(baseParams['VERSION'], '1.3') >= 0;\n  baseParams[v13 ? 'I' : 'X'] = x;\n  baseParams[v13 ? 'J' : 'Y'] = y;\n  return getRequestUrl(options.url, extent, GETFEATUREINFO_IMAGE_SIZE, projectionObj, baseParams);\n}\n\n/**\n * Get the GetLegendGraphic URL, optionally optimized for the passed resolution and possibly\n * including any passed specific parameters. Returns `undefined` if the GetLegendGraphic URL\n * cannot be constructed.\n *\n * @param {LoaderOptions} options Options passed the `createWMSLoader()` function.\n * @param {number} [resolution] Resolution. If not provided, `SCALE` will not be calculated and\n * included in URL.\n * @return {string|undefined} GetLegendGraphic URL.\n * @api\n */\nexport function getLegendUrl(options, resolution) {\n  if (options.url === undefined) {\n    return undefined;\n  }\n  const baseParams = {\n    'SERVICE': 'WMS',\n    'VERSION': DEFAULT_VERSION,\n    'REQUEST': 'GetLegendGraphic',\n    'FORMAT': 'image/png'\n  };\n  if (resolution !== undefined) {\n    const mpu = getProjection(options.projection || 'EPSG:3857').getMetersPerUnit() || 1;\n    const pixelSize = 0.00028;\n    baseParams['SCALE'] = resolution * mpu / pixelSize;\n  }\n  Object.assign(baseParams, options.params);\n  if (options.params !== undefined && baseParams['LAYER'] === undefined) {\n    const layers = baseParams['LAYERS'];\n    const isSingleLayer = !Array.isArray(layers) || layers.length !== 1;\n    if (!isSingleLayer) {\n      return undefined;\n    }\n    baseParams['LAYER'] = layers;\n  }\n  return appendParams(options.url, baseParams);\n}"],
  "mappings": "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",
  "names": ["image"]
}
